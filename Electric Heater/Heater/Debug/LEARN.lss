
LEARN.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003588  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  00003588  0000361c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  0080006a  0080006a  00003626  2**0
                  ALLOC
  3 .stab         00004254  00000000  00000000  00003628  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001d28  00000000  00000000  0000787c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000095a4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000096e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009854  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b49d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c388  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d138  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d298  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000d525  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000dcf3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 0a 0a 	jmp	0x1414	; 0x1414 <__vector_1>
       8:	0c 94 37 0a 	jmp	0x146e	; 0x146e <__vector_2>
       c:	0c 94 64 0a 	jmp	0x14c8	; 0x14c8 <__vector_3>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 be 06 	jmp	0xd7c	; 0xd7c <__vector_11>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	f5 e3       	ldi	r31, 0x35	; 53
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 36       	cpi	r26, 0x6A	; 106
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	aa e6       	ldi	r26, 0x6A	; 106
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 37       	cpi	r26, 0x7C	; 124
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 74 1a 	call	0x34e8	; 0x34e8 <main>
      8a:	0c 94 c2 1a 	jmp	0x3584	; 0x3584 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 1a 	jmp	0x3516	; 0x3516 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 1a 	jmp	0x354e	; 0x354e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 1a 	jmp	0x352e	; 0x352e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 1a 	jmp	0x3566	; 0x3566 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 1a 	jmp	0x3536	; 0x3536 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 1a 	jmp	0x356e	; 0x356e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer0_Init>:
static void (*Timer2_CallBack_Ptr)(void) = NULL;


/*************  TIMER 0 FUNCTIONS	*************/
void Timer0_Init(Timer_PrescalerType prescaler, uint8 Value, boolean InterruptEnable)
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <Timer0_Init+0x6>
     b4c:	0f 92       	push	r0
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	89 83       	std	Y+1, r24	; 0x01
     b54:	6a 83       	std	Y+2, r22	; 0x02
     b56:	4b 83       	std	Y+3, r20	; 0x03

	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
	{
		CLEAR_BIT(TCCR0,TCCR0_WGM01_Bit);
     b58:	a3 e5       	ldi	r26, 0x53	; 83
     b5a:	b0 e0       	ldi	r27, 0x00	; 0
     b5c:	e3 e5       	ldi	r30, 0x53	; 83
     b5e:	f0 e0       	ldi	r31, 0x00	; 0
     b60:	80 81       	ld	r24, Z
     b62:	8f 7b       	andi	r24, 0xBF	; 191
     b64:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0,TCCR0_WGM00_Bit);
     b66:	a3 e5       	ldi	r26, 0x53	; 83
     b68:	b0 e0       	ldi	r27, 0x00	; 0
     b6a:	e3 e5       	ldi	r30, 0x53	; 83
     b6c:	f0 e0       	ldi	r31, 0x00	; 0
     b6e:	80 81       	ld	r24, Z
     b70:	87 7f       	andi	r24, 0xF7	; 247
     b72:	8c 93       	st	X, r24

		TCNT0 = Value;
     b74:	e2 e5       	ldi	r30, 0x52	; 82
     b76:	f0 e0       	ldi	r31, 0x00	; 0
     b78:	8a 81       	ldd	r24, Y+2	; 0x02
     b7a:	80 83       	st	Z, r24
		Timer0_Start(prescaler);
     b7c:	89 81       	ldd	r24, Y+1	; 0x01
     b7e:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Timer0_Start>

		if(InterruptEnable == TRUE)
     b82:	8b 81       	ldd	r24, Y+3	; 0x03
     b84:	81 30       	cpi	r24, 0x01	; 1
     b86:	41 f4       	brne	.+16     	; 0xb98 <Timer0_Init+0x52>
		{
			SET_BIT(TIMSK, TIMSK_TOIE0_Bit);
     b88:	a9 e5       	ldi	r26, 0x59	; 89
     b8a:	b0 e0       	ldi	r27, 0x00	; 0
     b8c:	e9 e5       	ldi	r30, 0x59	; 89
     b8e:	f0 e0       	ldi	r31, 0x00	; 0
     b90:	80 81       	ld	r24, Z
     b92:	81 60       	ori	r24, 0x01	; 1
     b94:	8c 93       	st	X, r24
     b96:	0a c0       	rjmp	.+20     	; 0xbac <Timer0_Init+0x66>
		}
		else if(InterruptEnable == FALSE)
     b98:	8b 81       	ldd	r24, Y+3	; 0x03
     b9a:	88 23       	and	r24, r24
     b9c:	39 f4       	brne	.+14     	; 0xbac <Timer0_Init+0x66>
		{
			CLEAR_BIT(TIMSK, TIMSK_TOIE0_Bit);
     b9e:	a9 e5       	ldi	r26, 0x59	; 89
     ba0:	b0 e0       	ldi	r27, 0x00	; 0
     ba2:	e9 e5       	ldi	r30, 0x59	; 89
     ba4:	f0 e0       	ldi	r31, 0x00	; 0
     ba6:	80 81       	ld	r24, Z
     ba8:	8e 7f       	andi	r24, 0xFE	; 254
     baa:	8c 93       	st	X, r24
		SET_BIT(TIMER0_TCCR0_R,TCCR0_WGM00_Bit);
	}
	#else
		#error "You shall define timer operation mode in Timer_Cfg.h"
	#endif
}
     bac:	0f 90       	pop	r0
     bae:	0f 90       	pop	r0
     bb0:	0f 90       	pop	r0
     bb2:	cf 91       	pop	r28
     bb4:	df 91       	pop	r29
     bb6:	08 95       	ret

00000bb8 <Timer0_Start>:

#if( (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)  ||  (TIMER0_OPERATION_MODE == TIMER_MODE_CTC) )
void Timer0_Start(Timer_PrescalerType prescaler)
{
     bb8:	df 93       	push	r29
     bba:	cf 93       	push	r28
     bbc:	0f 92       	push	r0
     bbe:	cd b7       	in	r28, 0x3d	; 61
     bc0:	de b7       	in	r29, 0x3e	; 62
     bc2:	89 83       	std	Y+1, r24	; 0x01
	if (prescaler == No_Prescaler)
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	81 30       	cpi	r24, 0x01	; 1
     bc8:	b1 f4       	brne	.+44     	; 0xbf6 <Timer0_Start+0x3e>
	{
		SET_BIT(TCCR0, TCCR0_CS00_Bit);
     bca:	a3 e5       	ldi	r26, 0x53	; 83
     bcc:	b0 e0       	ldi	r27, 0x00	; 0
     bce:	e3 e5       	ldi	r30, 0x53	; 83
     bd0:	f0 e0       	ldi	r31, 0x00	; 0
     bd2:	80 81       	ld	r24, Z
     bd4:	81 60       	ori	r24, 0x01	; 1
     bd6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS01_Bit);
     bd8:	a3 e5       	ldi	r26, 0x53	; 83
     bda:	b0 e0       	ldi	r27, 0x00	; 0
     bdc:	e3 e5       	ldi	r30, 0x53	; 83
     bde:	f0 e0       	ldi	r31, 0x00	; 0
     be0:	80 81       	ld	r24, Z
     be2:	8d 7f       	andi	r24, 0xFD	; 253
     be4:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS02_Bit);
     be6:	a3 e5       	ldi	r26, 0x53	; 83
     be8:	b0 e0       	ldi	r27, 0x00	; 0
     bea:	e3 e5       	ldi	r30, 0x53	; 83
     bec:	f0 e0       	ldi	r31, 0x00	; 0
     bee:	80 81       	ld	r24, Z
     bf0:	8b 7f       	andi	r24, 0xFB	; 251
     bf2:	8c 93       	st	X, r24
     bf4:	95 c0       	rjmp	.+298    	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_8)
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	82 30       	cpi	r24, 0x02	; 2
     bfa:	b1 f4       	brne	.+44     	; 0xc28 <Timer0_Start+0x70>
	{
		CLEAR_BIT(TCCR0, TCCR0_CS00_Bit);
     bfc:	a3 e5       	ldi	r26, 0x53	; 83
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e3 e5       	ldi	r30, 0x53	; 83
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	8e 7f       	andi	r24, 0xFE	; 254
     c08:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS01_Bit);
     c0a:	a3 e5       	ldi	r26, 0x53	; 83
     c0c:	b0 e0       	ldi	r27, 0x00	; 0
     c0e:	e3 e5       	ldi	r30, 0x53	; 83
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS02_Bit);
     c18:	a3 e5       	ldi	r26, 0x53	; 83
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	e3 e5       	ldi	r30, 0x53	; 83
     c1e:	f0 e0       	ldi	r31, 0x00	; 0
     c20:	80 81       	ld	r24, Z
     c22:	8b 7f       	andi	r24, 0xFB	; 251
     c24:	8c 93       	st	X, r24
     c26:	7c c0       	rjmp	.+248    	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_64)
     c28:	89 81       	ldd	r24, Y+1	; 0x01
     c2a:	83 30       	cpi	r24, 0x03	; 3
     c2c:	b1 f4       	brne	.+44     	; 0xc5a <Timer0_Start+0xa2>
	{
		SET_BIT(TCCR0, TCCR0_CS00_Bit);
     c2e:	a3 e5       	ldi	r26, 0x53	; 83
     c30:	b0 e0       	ldi	r27, 0x00	; 0
     c32:	e3 e5       	ldi	r30, 0x53	; 83
     c34:	f0 e0       	ldi	r31, 0x00	; 0
     c36:	80 81       	ld	r24, Z
     c38:	81 60       	ori	r24, 0x01	; 1
     c3a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS01_Bit);
     c3c:	a3 e5       	ldi	r26, 0x53	; 83
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e3 e5       	ldi	r30, 0x53	; 83
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	82 60       	ori	r24, 0x02	; 2
     c48:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS02_Bit);
     c4a:	a3 e5       	ldi	r26, 0x53	; 83
     c4c:	b0 e0       	ldi	r27, 0x00	; 0
     c4e:	e3 e5       	ldi	r30, 0x53	; 83
     c50:	f0 e0       	ldi	r31, 0x00	; 0
     c52:	80 81       	ld	r24, Z
     c54:	8b 7f       	andi	r24, 0xFB	; 251
     c56:	8c 93       	st	X, r24
     c58:	63 c0       	rjmp	.+198    	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_256)
     c5a:	89 81       	ldd	r24, Y+1	; 0x01
     c5c:	84 30       	cpi	r24, 0x04	; 4
     c5e:	b1 f4       	brne	.+44     	; 0xc8c <Timer0_Start+0xd4>
	{
		CLEAR_BIT(TCCR0, TCCR0_CS00_Bit);
     c60:	a3 e5       	ldi	r26, 0x53	; 83
     c62:	b0 e0       	ldi	r27, 0x00	; 0
     c64:	e3 e5       	ldi	r30, 0x53	; 83
     c66:	f0 e0       	ldi	r31, 0x00	; 0
     c68:	80 81       	ld	r24, Z
     c6a:	8e 7f       	andi	r24, 0xFE	; 254
     c6c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS01_Bit);
     c6e:	a3 e5       	ldi	r26, 0x53	; 83
     c70:	b0 e0       	ldi	r27, 0x00	; 0
     c72:	e3 e5       	ldi	r30, 0x53	; 83
     c74:	f0 e0       	ldi	r31, 0x00	; 0
     c76:	80 81       	ld	r24, Z
     c78:	8d 7f       	andi	r24, 0xFD	; 253
     c7a:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS02_Bit);
     c7c:	a3 e5       	ldi	r26, 0x53	; 83
     c7e:	b0 e0       	ldi	r27, 0x00	; 0
     c80:	e3 e5       	ldi	r30, 0x53	; 83
     c82:	f0 e0       	ldi	r31, 0x00	; 0
     c84:	80 81       	ld	r24, Z
     c86:	84 60       	ori	r24, 0x04	; 4
     c88:	8c 93       	st	X, r24
     c8a:	4a c0       	rjmp	.+148    	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == Prescaler_1024)
     c8c:	89 81       	ldd	r24, Y+1	; 0x01
     c8e:	85 30       	cpi	r24, 0x05	; 5
     c90:	b1 f4       	brne	.+44     	; 0xcbe <Timer0_Start+0x106>
	{
		SET_BIT(TCCR0, TCCR0_CS00_Bit);
     c92:	a3 e5       	ldi	r26, 0x53	; 83
     c94:	b0 e0       	ldi	r27, 0x00	; 0
     c96:	e3 e5       	ldi	r30, 0x53	; 83
     c98:	f0 e0       	ldi	r31, 0x00	; 0
     c9a:	80 81       	ld	r24, Z
     c9c:	81 60       	ori	r24, 0x01	; 1
     c9e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR0, TCCR0_CS01_Bit);
     ca0:	a3 e5       	ldi	r26, 0x53	; 83
     ca2:	b0 e0       	ldi	r27, 0x00	; 0
     ca4:	e3 e5       	ldi	r30, 0x53	; 83
     ca6:	f0 e0       	ldi	r31, 0x00	; 0
     ca8:	80 81       	ld	r24, Z
     caa:	8d 7f       	andi	r24, 0xFD	; 253
     cac:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS02_Bit);
     cae:	a3 e5       	ldi	r26, 0x53	; 83
     cb0:	b0 e0       	ldi	r27, 0x00	; 0
     cb2:	e3 e5       	ldi	r30, 0x53	; 83
     cb4:	f0 e0       	ldi	r31, 0x00	; 0
     cb6:	80 81       	ld	r24, Z
     cb8:	84 60       	ori	r24, 0x04	; 4
     cba:	8c 93       	st	X, r24
     cbc:	31 c0       	rjmp	.+98     	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
     cbe:	89 81       	ldd	r24, Y+1	; 0x01
     cc0:	86 30       	cpi	r24, 0x06	; 6
     cc2:	b1 f4       	brne	.+44     	; 0xcf0 <Timer0_Start+0x138>
	{
		CLEAR_BIT(TCCR0, TCCR0_CS00_Bit);
     cc4:	a3 e5       	ldi	r26, 0x53	; 83
     cc6:	b0 e0       	ldi	r27, 0x00	; 0
     cc8:	e3 e5       	ldi	r30, 0x53	; 83
     cca:	f0 e0       	ldi	r31, 0x00	; 0
     ccc:	80 81       	ld	r24, Z
     cce:	8e 7f       	andi	r24, 0xFE	; 254
     cd0:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS01_Bit);
     cd2:	a3 e5       	ldi	r26, 0x53	; 83
     cd4:	b0 e0       	ldi	r27, 0x00	; 0
     cd6:	e3 e5       	ldi	r30, 0x53	; 83
     cd8:	f0 e0       	ldi	r31, 0x00	; 0
     cda:	80 81       	ld	r24, Z
     cdc:	82 60       	ori	r24, 0x02	; 2
     cde:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS02_Bit);
     ce0:	a3 e5       	ldi	r26, 0x53	; 83
     ce2:	b0 e0       	ldi	r27, 0x00	; 0
     ce4:	e3 e5       	ldi	r30, 0x53	; 83
     ce6:	f0 e0       	ldi	r31, 0x00	; 0
     ce8:	80 81       	ld	r24, Z
     cea:	84 60       	ori	r24, 0x04	; 4
     cec:	8c 93       	st	X, r24
     cee:	18 c0       	rjmp	.+48     	; 0xd20 <Timer0_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
     cf0:	89 81       	ldd	r24, Y+1	; 0x01
     cf2:	86 30       	cpi	r24, 0x06	; 6
     cf4:	a9 f4       	brne	.+42     	; 0xd20 <Timer0_Start+0x168>
	{
		SET_BIT(TCCR0, TCCR0_CS00_Bit);
     cf6:	a3 e5       	ldi	r26, 0x53	; 83
     cf8:	b0 e0       	ldi	r27, 0x00	; 0
     cfa:	e3 e5       	ldi	r30, 0x53	; 83
     cfc:	f0 e0       	ldi	r31, 0x00	; 0
     cfe:	80 81       	ld	r24, Z
     d00:	81 60       	ori	r24, 0x01	; 1
     d02:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS01_Bit);
     d04:	a3 e5       	ldi	r26, 0x53	; 83
     d06:	b0 e0       	ldi	r27, 0x00	; 0
     d08:	e3 e5       	ldi	r30, 0x53	; 83
     d0a:	f0 e0       	ldi	r31, 0x00	; 0
     d0c:	80 81       	ld	r24, Z
     d0e:	82 60       	ori	r24, 0x02	; 2
     d10:	8c 93       	st	X, r24
		SET_BIT(TCCR0, TCCR0_CS02_Bit);
     d12:	a3 e5       	ldi	r26, 0x53	; 83
     d14:	b0 e0       	ldi	r27, 0x00	; 0
     d16:	e3 e5       	ldi	r30, 0x53	; 83
     d18:	f0 e0       	ldi	r31, 0x00	; 0
     d1a:	80 81       	ld	r24, Z
     d1c:	84 60       	ori	r24, 0x04	; 4
     d1e:	8c 93       	st	X, r24
	}
	else
	{
	}

}
     d20:	0f 90       	pop	r0
     d22:	cf 91       	pop	r28
     d24:	df 91       	pop	r29
     d26:	08 95       	ret

00000d28 <Timer0_Stop>:

void Timer0_Stop (void)
{
     d28:	df 93       	push	r29
     d2a:	cf 93       	push	r28
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR0, TCCR0_CS00_Bit);
     d30:	a3 e5       	ldi	r26, 0x53	; 83
     d32:	b0 e0       	ldi	r27, 0x00	; 0
     d34:	e3 e5       	ldi	r30, 0x53	; 83
     d36:	f0 e0       	ldi	r31, 0x00	; 0
     d38:	80 81       	ld	r24, Z
     d3a:	8e 7f       	andi	r24, 0xFE	; 254
     d3c:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS01_Bit);
     d3e:	a3 e5       	ldi	r26, 0x53	; 83
     d40:	b0 e0       	ldi	r27, 0x00	; 0
     d42:	e3 e5       	ldi	r30, 0x53	; 83
     d44:	f0 e0       	ldi	r31, 0x00	; 0
     d46:	80 81       	ld	r24, Z
     d48:	8d 7f       	andi	r24, 0xFD	; 253
     d4a:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR0, TCCR0_CS02_Bit);
     d4c:	a3 e5       	ldi	r26, 0x53	; 83
     d4e:	b0 e0       	ldi	r27, 0x00	; 0
     d50:	e3 e5       	ldi	r30, 0x53	; 83
     d52:	f0 e0       	ldi	r31, 0x00	; 0
     d54:	80 81       	ld	r24, Z
     d56:	8b 7f       	andi	r24, 0xFB	; 251
     d58:	8c 93       	st	X, r24
}
     d5a:	cf 91       	pop	r28
     d5c:	df 91       	pop	r29
     d5e:	08 95       	ret

00000d60 <Timer0_SetPreload>:



#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
void Timer0_SetPreload(uint8 preloadValue)
{
     d60:	df 93       	push	r29
     d62:	cf 93       	push	r28
     d64:	0f 92       	push	r0
     d66:	cd b7       	in	r28, 0x3d	; 61
     d68:	de b7       	in	r29, 0x3e	; 62
     d6a:	89 83       	std	Y+1, r24	; 0x01
	TCNT0 = preloadValue;
     d6c:	e2 e5       	ldi	r30, 0x52	; 82
     d6e:	f0 e0       	ldi	r31, 0x00	; 0
     d70:	89 81       	ldd	r24, Y+1	; 0x01
     d72:	80 83       	st	Z, r24
}
     d74:	0f 90       	pop	r0
     d76:	cf 91       	pop	r28
     d78:	df 91       	pop	r29
     d7a:	08 95       	ret

00000d7c <__vector_11>:

void __vector_11(void)
{
     d7c:	1f 92       	push	r1
     d7e:	0f 92       	push	r0
     d80:	0f b6       	in	r0, 0x3f	; 63
     d82:	0f 92       	push	r0
     d84:	11 24       	eor	r1, r1
     d86:	2f 93       	push	r18
     d88:	3f 93       	push	r19
     d8a:	4f 93       	push	r20
     d8c:	5f 93       	push	r21
     d8e:	6f 93       	push	r22
     d90:	7f 93       	push	r23
     d92:	8f 93       	push	r24
     d94:	9f 93       	push	r25
     d96:	af 93       	push	r26
     d98:	bf 93       	push	r27
     d9a:	ef 93       	push	r30
     d9c:	ff 93       	push	r31
     d9e:	df 93       	push	r29
     da0:	cf 93       	push	r28
     da2:	cd b7       	in	r28, 0x3d	; 61
     da4:	de b7       	in	r29, 0x3e	; 62
	static uint16 ovfCounter = 0;
	ovfCounter++;
     da6:	80 91 6e 00 	lds	r24, 0x006E
     daa:	90 91 6f 00 	lds	r25, 0x006F
     dae:	01 96       	adiw	r24, 0x01	; 1
     db0:	90 93 6f 00 	sts	0x006F, r25
     db4:	80 93 6e 00 	sts	0x006E, r24

	if(Timer0_CallBack_Ptr != NULL && ovfCounter == TIMER0_FINAL_OVFCOUNT)  /* 100 ms is passed */
     db8:	80 91 6a 00 	lds	r24, 0x006A
     dbc:	90 91 6b 00 	lds	r25, 0x006B
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	89 f0       	breq	.+34     	; 0xde6 <__vector_11+0x6a>
     dc4:	80 91 6e 00 	lds	r24, 0x006E
     dc8:	90 91 6f 00 	lds	r25, 0x006F
     dcc:	28 e1       	ldi	r18, 0x18	; 24
     dce:	8a 36       	cpi	r24, 0x6A	; 106
     dd0:	92 07       	cpc	r25, r18
     dd2:	49 f4       	brne	.+18     	; 0xde6 <__vector_11+0x6a>
	{
		(*Timer0_CallBack_Ptr)();
     dd4:	e0 91 6a 00 	lds	r30, 0x006A
     dd8:	f0 91 6b 00 	lds	r31, 0x006B
     ddc:	09 95       	icall
		ovfCounter = 0;
     dde:	10 92 6f 00 	sts	0x006F, r1
     de2:	10 92 6e 00 	sts	0x006E, r1
	}
	else
	{}

}
     de6:	cf 91       	pop	r28
     de8:	df 91       	pop	r29
     dea:	ff 91       	pop	r31
     dec:	ef 91       	pop	r30
     dee:	bf 91       	pop	r27
     df0:	af 91       	pop	r26
     df2:	9f 91       	pop	r25
     df4:	8f 91       	pop	r24
     df6:	7f 91       	pop	r23
     df8:	6f 91       	pop	r22
     dfa:	5f 91       	pop	r21
     dfc:	4f 91       	pop	r20
     dfe:	3f 91       	pop	r19
     e00:	2f 91       	pop	r18
     e02:	0f 90       	pop	r0
     e04:	0f be       	out	0x3f, r0	; 63
     e06:	0f 90       	pop	r0
     e08:	1f 90       	pop	r1
     e0a:	18 95       	reti

00000e0c <Timer0_GetPreload>:
}
#endif


uint8 Timer0_GetPreload(void)
{
     e0c:	df 93       	push	r29
     e0e:	cf 93       	push	r28
     e10:	cd b7       	in	r28, 0x3d	; 61
     e12:	de b7       	in	r29, 0x3e	; 62
	return TCNT0;
     e14:	e2 e5       	ldi	r30, 0x52	; 82
     e16:	f0 e0       	ldi	r31, 0x00	; 0
     e18:	80 81       	ld	r24, Z
}
     e1a:	cf 91       	pop	r28
     e1c:	df 91       	pop	r29
     e1e:	08 95       	ret

00000e20 <Timer0_EnableInterrupt>:

void Timer0_EnableInterrupt(void)
{
     e20:	df 93       	push	r29
     e22:	cf 93       	push	r28
     e24:	cd b7       	in	r28, 0x3d	; 61
     e26:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
	SET_BIT(TIMSK, TIMSK_TOIE0_Bit);
     e28:	a9 e5       	ldi	r26, 0x59	; 89
     e2a:	b0 e0       	ldi	r27, 0x00	; 0
     e2c:	e9 e5       	ldi	r30, 0x59	; 89
     e2e:	f0 e0       	ldi	r31, 0x00	; 0
     e30:	80 81       	ld	r24, Z
     e32:	81 60       	ori	r24, 0x01	; 1
     e34:	8c 93       	st	X, r24
	#elif (TIMER0_OPERATION_MODE == TIMER_MODE_CTC)
	SET_BIT(TIMSK, TIMSK_OCIE0_Bit);
	#endif
}
     e36:	cf 91       	pop	r28
     e38:	df 91       	pop	r29
     e3a:	08 95       	ret

00000e3c <Timer0_DisableInterrupt>:

void Timer0_DisableInterrupt(void)
{
     e3c:	df 93       	push	r29
     e3e:	cf 93       	push	r28
     e40:	cd b7       	in	r28, 0x3d	; 61
     e42:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER0_OPERATION_MODE == TIMER_MODE_INTERVAL)
	CLEAR_BIT(TIMSK, TIMSK_TOIE0_Bit);
     e44:	a9 e5       	ldi	r26, 0x59	; 89
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e9 e5       	ldi	r30, 0x59	; 89
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8e 7f       	andi	r24, 0xFE	; 254
     e50:	8c 93       	st	X, r24
	#elif (TIMER0_OPERATION_MODE == TIMER_MODE_CTC)
	CLEAR_BIT(TIMSK, TIMSK_OCIE0_Bit);
	#endif
}
     e52:	cf 91       	pop	r28
     e54:	df 91       	pop	r29
     e56:	08 95       	ret

00000e58 <Timer0_SetCallBack>:



void Timer0_SetCallBack ( void(*Ptr2Func)(void) )
{
     e58:	df 93       	push	r29
     e5a:	cf 93       	push	r28
     e5c:	00 d0       	rcall	.+0      	; 0xe5e <Timer0_SetCallBack+0x6>
     e5e:	cd b7       	in	r28, 0x3d	; 61
     e60:	de b7       	in	r29, 0x3e	; 62
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
	Timer0_CallBack_Ptr = Ptr2Func;
     e66:	89 81       	ldd	r24, Y+1	; 0x01
     e68:	9a 81       	ldd	r25, Y+2	; 0x02
     e6a:	90 93 6b 00 	sts	0x006B, r25
     e6e:	80 93 6a 00 	sts	0x006A, r24
}
     e72:	0f 90       	pop	r0
     e74:	0f 90       	pop	r0
     e76:	cf 91       	pop	r28
     e78:	df 91       	pop	r29
     e7a:	08 95       	ret

00000e7c <Timer2_Init>:

/*************  TIMER 2 FUNCTIONS	*************/


void Timer2_Init(Timer_PrescalerType prescaler, uint16 Value, boolean InterruptEnable)
{
     e7c:	df 93       	push	r29
     e7e:	cf 93       	push	r28
     e80:	00 d0       	rcall	.+0      	; 0xe82 <Timer2_Init+0x6>
     e82:	00 d0       	rcall	.+0      	; 0xe84 <Timer2_Init+0x8>
     e84:	cd b7       	in	r28, 0x3d	; 61
     e86:	de b7       	in	r29, 0x3e	; 62
     e88:	89 83       	std	Y+1, r24	; 0x01
     e8a:	7b 83       	std	Y+3, r23	; 0x03
     e8c:	6a 83       	std	Y+2, r22	; 0x02
     e8e:	4c 83       	std	Y+4, r20	; 0x04
		}

	}
	#elif (TIMER2_OPERATION_MODE == TIMER_MODE_CTC)
	{
		SET_BIT(TCCR2,TCCR2_WGM21_Bit);
     e90:	a5 e4       	ldi	r26, 0x45	; 69
     e92:	b0 e0       	ldi	r27, 0x00	; 0
     e94:	e5 e4       	ldi	r30, 0x45	; 69
     e96:	f0 e0       	ldi	r31, 0x00	; 0
     e98:	80 81       	ld	r24, Z
     e9a:	88 60       	ori	r24, 0x08	; 8
     e9c:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2,TCCR2_WGM20_Bit);
     e9e:	a5 e4       	ldi	r26, 0x45	; 69
     ea0:	b0 e0       	ldi	r27, 0x00	; 0
     ea2:	e5 e4       	ldi	r30, 0x45	; 69
     ea4:	f0 e0       	ldi	r31, 0x00	; 0
     ea6:	80 81       	ld	r24, Z
     ea8:	8f 7b       	andi	r24, 0xBF	; 191
     eaa:	8c 93       	st	X, r24

		OCR2 = Value;
     eac:	e3 e4       	ldi	r30, 0x43	; 67
     eae:	f0 e0       	ldi	r31, 0x00	; 0
     eb0:	8a 81       	ldd	r24, Y+2	; 0x02
     eb2:	80 83       	st	Z, r24
		Timer2_Start(prescaler);
     eb4:	89 81       	ldd	r24, Y+1	; 0x01
     eb6:	0e 94 79 07 	call	0xef2	; 0xef2 <Timer2_Start>

		if(InterruptEnable == TRUE)
     eba:	8c 81       	ldd	r24, Y+4	; 0x04
     ebc:	81 30       	cpi	r24, 0x01	; 1
     ebe:	41 f4       	brne	.+16     	; 0xed0 <Timer2_Init+0x54>
		{
			SET_BIT(TIMSK, TIMSK_OCIE2_Bit);
     ec0:	a9 e5       	ldi	r26, 0x59	; 89
     ec2:	b0 e0       	ldi	r27, 0x00	; 0
     ec4:	e9 e5       	ldi	r30, 0x59	; 89
     ec6:	f0 e0       	ldi	r31, 0x00	; 0
     ec8:	80 81       	ld	r24, Z
     eca:	80 68       	ori	r24, 0x80	; 128
     ecc:	8c 93       	st	X, r24
     ece:	0a c0       	rjmp	.+20     	; 0xee4 <Timer2_Init+0x68>
		}
		else if(InterruptEnable == FALSE)
     ed0:	8c 81       	ldd	r24, Y+4	; 0x04
     ed2:	88 23       	and	r24, r24
     ed4:	39 f4       	brne	.+14     	; 0xee4 <Timer2_Init+0x68>
		{
			CLEAR_BIT(TIMSK, TIMSK_OCIE2_Bit);
     ed6:	a9 e5       	ldi	r26, 0x59	; 89
     ed8:	b0 e0       	ldi	r27, 0x00	; 0
     eda:	e9 e5       	ldi	r30, 0x59	; 89
     edc:	f0 e0       	ldi	r31, 0x00	; 0
     ede:	80 81       	ld	r24, Z
     ee0:	8f 77       	andi	r24, 0x7F	; 127
     ee2:	8c 93       	st	X, r24
	#else
		#error "You shall define timer operation mode in Timer_Cfg.h"
	#endif


}
     ee4:	0f 90       	pop	r0
     ee6:	0f 90       	pop	r0
     ee8:	0f 90       	pop	r0
     eea:	0f 90       	pop	r0
     eec:	cf 91       	pop	r28
     eee:	df 91       	pop	r29
     ef0:	08 95       	ret

00000ef2 <Timer2_Start>:

#if( (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)  ||  (TIMER2_OPERATION_MODE == TIMER_MODE_CTC) )
void Timer2_Start(Timer_PrescalerType prescaler)
{
     ef2:	df 93       	push	r29
     ef4:	cf 93       	push	r28
     ef6:	0f 92       	push	r0
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	89 83       	std	Y+1, r24	; 0x01
	if (prescaler == No_Prescaler)
     efe:	89 81       	ldd	r24, Y+1	; 0x01
     f00:	81 30       	cpi	r24, 0x01	; 1
     f02:	b1 f4       	brne	.+44     	; 0xf30 <Timer2_Start+0x3e>
	{
		SET_BIT(TCCR2, TCCR2_CS20_Bit);
     f04:	a5 e4       	ldi	r26, 0x45	; 69
     f06:	b0 e0       	ldi	r27, 0x00	; 0
     f08:	e5 e4       	ldi	r30, 0x45	; 69
     f0a:	f0 e0       	ldi	r31, 0x00	; 0
     f0c:	80 81       	ld	r24, Z
     f0e:	81 60       	ori	r24, 0x01	; 1
     f10:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS21_Bit);
     f12:	a5 e4       	ldi	r26, 0x45	; 69
     f14:	b0 e0       	ldi	r27, 0x00	; 0
     f16:	e5 e4       	ldi	r30, 0x45	; 69
     f18:	f0 e0       	ldi	r31, 0x00	; 0
     f1a:	80 81       	ld	r24, Z
     f1c:	8d 7f       	andi	r24, 0xFD	; 253
     f1e:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS22_Bit);
     f20:	a5 e4       	ldi	r26, 0x45	; 69
     f22:	b0 e0       	ldi	r27, 0x00	; 0
     f24:	e5 e4       	ldi	r30, 0x45	; 69
     f26:	f0 e0       	ldi	r31, 0x00	; 0
     f28:	80 81       	ld	r24, Z
     f2a:	8b 7f       	andi	r24, 0xFB	; 251
     f2c:	8c 93       	st	X, r24
     f2e:	95 c0       	rjmp	.+298    	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_8)
     f30:	89 81       	ldd	r24, Y+1	; 0x01
     f32:	82 30       	cpi	r24, 0x02	; 2
     f34:	b1 f4       	brne	.+44     	; 0xf62 <Timer2_Start+0x70>
	{
		CLEAR_BIT(TCCR2, TCCR2_CS20_Bit);
     f36:	a5 e4       	ldi	r26, 0x45	; 69
     f38:	b0 e0       	ldi	r27, 0x00	; 0
     f3a:	e5 e4       	ldi	r30, 0x45	; 69
     f3c:	f0 e0       	ldi	r31, 0x00	; 0
     f3e:	80 81       	ld	r24, Z
     f40:	8e 7f       	andi	r24, 0xFE	; 254
     f42:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS21_Bit);
     f44:	a5 e4       	ldi	r26, 0x45	; 69
     f46:	b0 e0       	ldi	r27, 0x00	; 0
     f48:	e5 e4       	ldi	r30, 0x45	; 69
     f4a:	f0 e0       	ldi	r31, 0x00	; 0
     f4c:	80 81       	ld	r24, Z
     f4e:	82 60       	ori	r24, 0x02	; 2
     f50:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS22_Bit);
     f52:	a5 e4       	ldi	r26, 0x45	; 69
     f54:	b0 e0       	ldi	r27, 0x00	; 0
     f56:	e5 e4       	ldi	r30, 0x45	; 69
     f58:	f0 e0       	ldi	r31, 0x00	; 0
     f5a:	80 81       	ld	r24, Z
     f5c:	8b 7f       	andi	r24, 0xFB	; 251
     f5e:	8c 93       	st	X, r24
     f60:	7c c0       	rjmp	.+248    	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_64)
     f62:	89 81       	ldd	r24, Y+1	; 0x01
     f64:	83 30       	cpi	r24, 0x03	; 3
     f66:	b1 f4       	brne	.+44     	; 0xf94 <Timer2_Start+0xa2>
	{
		SET_BIT(TCCR2, TCCR2_CS20_Bit);
     f68:	a5 e4       	ldi	r26, 0x45	; 69
     f6a:	b0 e0       	ldi	r27, 0x00	; 0
     f6c:	e5 e4       	ldi	r30, 0x45	; 69
     f6e:	f0 e0       	ldi	r31, 0x00	; 0
     f70:	80 81       	ld	r24, Z
     f72:	81 60       	ori	r24, 0x01	; 1
     f74:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS21_Bit);
     f76:	a5 e4       	ldi	r26, 0x45	; 69
     f78:	b0 e0       	ldi	r27, 0x00	; 0
     f7a:	e5 e4       	ldi	r30, 0x45	; 69
     f7c:	f0 e0       	ldi	r31, 0x00	; 0
     f7e:	80 81       	ld	r24, Z
     f80:	82 60       	ori	r24, 0x02	; 2
     f82:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS22_Bit);
     f84:	a5 e4       	ldi	r26, 0x45	; 69
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e5 e4       	ldi	r30, 0x45	; 69
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	8b 7f       	andi	r24, 0xFB	; 251
     f90:	8c 93       	st	X, r24
     f92:	63 c0       	rjmp	.+198    	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_256)
     f94:	89 81       	ldd	r24, Y+1	; 0x01
     f96:	84 30       	cpi	r24, 0x04	; 4
     f98:	b1 f4       	brne	.+44     	; 0xfc6 <Timer2_Start+0xd4>
	{
		CLEAR_BIT(TCCR2, TCCR2_CS20_Bit);
     f9a:	a5 e4       	ldi	r26, 0x45	; 69
     f9c:	b0 e0       	ldi	r27, 0x00	; 0
     f9e:	e5 e4       	ldi	r30, 0x45	; 69
     fa0:	f0 e0       	ldi	r31, 0x00	; 0
     fa2:	80 81       	ld	r24, Z
     fa4:	8e 7f       	andi	r24, 0xFE	; 254
     fa6:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS21_Bit);
     fa8:	a5 e4       	ldi	r26, 0x45	; 69
     faa:	b0 e0       	ldi	r27, 0x00	; 0
     fac:	e5 e4       	ldi	r30, 0x45	; 69
     fae:	f0 e0       	ldi	r31, 0x00	; 0
     fb0:	80 81       	ld	r24, Z
     fb2:	8d 7f       	andi	r24, 0xFD	; 253
     fb4:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS22_Bit);
     fb6:	a5 e4       	ldi	r26, 0x45	; 69
     fb8:	b0 e0       	ldi	r27, 0x00	; 0
     fba:	e5 e4       	ldi	r30, 0x45	; 69
     fbc:	f0 e0       	ldi	r31, 0x00	; 0
     fbe:	80 81       	ld	r24, Z
     fc0:	84 60       	ori	r24, 0x04	; 4
     fc2:	8c 93       	st	X, r24
     fc4:	4a c0       	rjmp	.+148    	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == Prescaler_1024)
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	85 30       	cpi	r24, 0x05	; 5
     fca:	b1 f4       	brne	.+44     	; 0xff8 <Timer2_Start+0x106>
	{
		SET_BIT(TCCR2, TCCR2_CS20_Bit);
     fcc:	a5 e4       	ldi	r26, 0x45	; 69
     fce:	b0 e0       	ldi	r27, 0x00	; 0
     fd0:	e5 e4       	ldi	r30, 0x45	; 69
     fd2:	f0 e0       	ldi	r31, 0x00	; 0
     fd4:	80 81       	ld	r24, Z
     fd6:	81 60       	ori	r24, 0x01	; 1
     fd8:	8c 93       	st	X, r24
		CLEAR_BIT(TCCR2, TCCR2_CS21_Bit);
     fda:	a5 e4       	ldi	r26, 0x45	; 69
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e5 e4       	ldi	r30, 0x45	; 69
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	8d 7f       	andi	r24, 0xFD	; 253
     fe6:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS22_Bit);
     fe8:	a5 e4       	ldi	r26, 0x45	; 69
     fea:	b0 e0       	ldi	r27, 0x00	; 0
     fec:	e5 e4       	ldi	r30, 0x45	; 69
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	80 81       	ld	r24, Z
     ff2:	84 60       	ori	r24, 0x04	; 4
     ff4:	8c 93       	st	X, r24
     ff6:	31 c0       	rjmp	.+98     	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
     ff8:	89 81       	ldd	r24, Y+1	; 0x01
     ffa:	86 30       	cpi	r24, 0x06	; 6
     ffc:	b1 f4       	brne	.+44     	; 0x102a <Timer2_Start+0x138>
	{
		CLEAR_BIT(TCCR2, TCCR2_CS20_Bit);
     ffe:	a5 e4       	ldi	r26, 0x45	; 69
    1000:	b0 e0       	ldi	r27, 0x00	; 0
    1002:	e5 e4       	ldi	r30, 0x45	; 69
    1004:	f0 e0       	ldi	r31, 0x00	; 0
    1006:	80 81       	ld	r24, Z
    1008:	8e 7f       	andi	r24, 0xFE	; 254
    100a:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS21_Bit);
    100c:	a5 e4       	ldi	r26, 0x45	; 69
    100e:	b0 e0       	ldi	r27, 0x00	; 0
    1010:	e5 e4       	ldi	r30, 0x45	; 69
    1012:	f0 e0       	ldi	r31, 0x00	; 0
    1014:	80 81       	ld	r24, Z
    1016:	82 60       	ori	r24, 0x02	; 2
    1018:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS22_Bit);
    101a:	a5 e4       	ldi	r26, 0x45	; 69
    101c:	b0 e0       	ldi	r27, 0x00	; 0
    101e:	e5 e4       	ldi	r30, 0x45	; 69
    1020:	f0 e0       	ldi	r31, 0x00	; 0
    1022:	80 81       	ld	r24, Z
    1024:	84 60       	ori	r24, 0x04	; 4
    1026:	8c 93       	st	X, r24
    1028:	18 c0       	rjmp	.+48     	; 0x105a <Timer2_Start+0x168>
	}
	else if (prescaler == ExtClk_FallingEdge)
    102a:	89 81       	ldd	r24, Y+1	; 0x01
    102c:	86 30       	cpi	r24, 0x06	; 6
    102e:	a9 f4       	brne	.+42     	; 0x105a <Timer2_Start+0x168>
	{
		SET_BIT(TCCR2, TCCR2_CS20_Bit);
    1030:	a5 e4       	ldi	r26, 0x45	; 69
    1032:	b0 e0       	ldi	r27, 0x00	; 0
    1034:	e5 e4       	ldi	r30, 0x45	; 69
    1036:	f0 e0       	ldi	r31, 0x00	; 0
    1038:	80 81       	ld	r24, Z
    103a:	81 60       	ori	r24, 0x01	; 1
    103c:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS21_Bit);
    103e:	a5 e4       	ldi	r26, 0x45	; 69
    1040:	b0 e0       	ldi	r27, 0x00	; 0
    1042:	e5 e4       	ldi	r30, 0x45	; 69
    1044:	f0 e0       	ldi	r31, 0x00	; 0
    1046:	80 81       	ld	r24, Z
    1048:	82 60       	ori	r24, 0x02	; 2
    104a:	8c 93       	st	X, r24
		SET_BIT(TCCR2, TCCR2_CS22_Bit);
    104c:	a5 e4       	ldi	r26, 0x45	; 69
    104e:	b0 e0       	ldi	r27, 0x00	; 0
    1050:	e5 e4       	ldi	r30, 0x45	; 69
    1052:	f0 e0       	ldi	r31, 0x00	; 0
    1054:	80 81       	ld	r24, Z
    1056:	84 60       	ori	r24, 0x04	; 4
    1058:	8c 93       	st	X, r24
	}
	else
	{
	}

}
    105a:	0f 90       	pop	r0
    105c:	cf 91       	pop	r28
    105e:	df 91       	pop	r29
    1060:	08 95       	ret

00001062 <Timer2_Stop>:

void Timer2_Stop (void)
{
    1062:	df 93       	push	r29
    1064:	cf 93       	push	r28
    1066:	cd b7       	in	r28, 0x3d	; 61
    1068:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(TCCR2, TCCR2_CS20_Bit);
    106a:	a5 e4       	ldi	r26, 0x45	; 69
    106c:	b0 e0       	ldi	r27, 0x00	; 0
    106e:	e5 e4       	ldi	r30, 0x45	; 69
    1070:	f0 e0       	ldi	r31, 0x00	; 0
    1072:	80 81       	ld	r24, Z
    1074:	8e 7f       	andi	r24, 0xFE	; 254
    1076:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2, TCCR2_CS21_Bit);
    1078:	a5 e4       	ldi	r26, 0x45	; 69
    107a:	b0 e0       	ldi	r27, 0x00	; 0
    107c:	e5 e4       	ldi	r30, 0x45	; 69
    107e:	f0 e0       	ldi	r31, 0x00	; 0
    1080:	80 81       	ld	r24, Z
    1082:	8d 7f       	andi	r24, 0xFD	; 253
    1084:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR2, TCCR2_CS22_Bit);
    1086:	a5 e4       	ldi	r26, 0x45	; 69
    1088:	b0 e0       	ldi	r27, 0x00	; 0
    108a:	e5 e4       	ldi	r30, 0x45	; 69
    108c:	f0 e0       	ldi	r31, 0x00	; 0
    108e:	80 81       	ld	r24, Z
    1090:	8b 7f       	andi	r24, 0xFB	; 251
    1092:	8c 93       	st	X, r24
}
    1094:	cf 91       	pop	r28
    1096:	df 91       	pop	r29
    1098:	08 95       	ret

0000109a <Timer2_SetCompareValue>:


#elif( (TIMER2_OPERATION_MODE == TIMER_MODE_CTC))

void Timer2_SetCompareValue(uint8 compareValue)
{
    109a:	df 93       	push	r29
    109c:	cf 93       	push	r28
    109e:	0f 92       	push	r0
    10a0:	cd b7       	in	r28, 0x3d	; 61
    10a2:	de b7       	in	r29, 0x3e	; 62
    10a4:	89 83       	std	Y+1, r24	; 0x01
	OCR2 = compareValue;
    10a6:	e3 e4       	ldi	r30, 0x43	; 67
    10a8:	f0 e0       	ldi	r31, 0x00	; 0
    10aa:	89 81       	ldd	r24, Y+1	; 0x01
    10ac:	80 83       	st	Z, r24
}
    10ae:	0f 90       	pop	r0
    10b0:	cf 91       	pop	r28
    10b2:	df 91       	pop	r29
    10b4:	08 95       	ret

000010b6 <Timer2_GetPreload>:
#endif


uint8 Timer2_GetPreload(void)
{
    10b6:	df 93       	push	r29
    10b8:	cf 93       	push	r28
    10ba:	cd b7       	in	r28, 0x3d	; 61
    10bc:	de b7       	in	r29, 0x3e	; 62
	return TCNT2;
    10be:	e4 e4       	ldi	r30, 0x44	; 68
    10c0:	f0 e0       	ldi	r31, 0x00	; 0
    10c2:	80 81       	ld	r24, Z
}
    10c4:	cf 91       	pop	r28
    10c6:	df 91       	pop	r29
    10c8:	08 95       	ret

000010ca <Timer2_EnableInterrupt>:

void Timer2_EnableInterrupt(void)
{
    10ca:	df 93       	push	r29
    10cc:	cf 93       	push	r28
    10ce:	cd b7       	in	r28, 0x3d	; 61
    10d0:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
	SET_BIT(TIMSK, TIMSK_TOIE2_Bit);
	#elif (TIMER2_OPERATION_MODE == TIMER_MODE_CTC)
	SET_BIT(TIMSK, TIMSK_OCIE2_Bit);
    10d2:	a9 e5       	ldi	r26, 0x59	; 89
    10d4:	b0 e0       	ldi	r27, 0x00	; 0
    10d6:	e9 e5       	ldi	r30, 0x59	; 89
    10d8:	f0 e0       	ldi	r31, 0x00	; 0
    10da:	80 81       	ld	r24, Z
    10dc:	80 68       	ori	r24, 0x80	; 128
    10de:	8c 93       	st	X, r24
	#endif
}
    10e0:	cf 91       	pop	r28
    10e2:	df 91       	pop	r29
    10e4:	08 95       	ret

000010e6 <Timer2_DisableInterrupt>:

void Timer2_DisableInterrupt(void)
{
    10e6:	df 93       	push	r29
    10e8:	cf 93       	push	r28
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
	#if (TIMER2_OPERATION_MODE == TIMER_MODE_INTERVAL)
	CLEAR_BIT(TIMSK, TIMSK_TOIE2_Bit);
	#elif (TIMER2_OPERATION_MODE == TIMER_MODE_CTC)
	CLEAR_BIT(TIMSK, TIMSK_OCIE2_Bit);
    10ee:	a9 e5       	ldi	r26, 0x59	; 89
    10f0:	b0 e0       	ldi	r27, 0x00	; 0
    10f2:	e9 e5       	ldi	r30, 0x59	; 89
    10f4:	f0 e0       	ldi	r31, 0x00	; 0
    10f6:	80 81       	ld	r24, Z
    10f8:	8f 77       	andi	r24, 0x7F	; 127
    10fa:	8c 93       	st	X, r24
	#endif
}
    10fc:	cf 91       	pop	r28
    10fe:	df 91       	pop	r29
    1100:	08 95       	ret

00001102 <Timer2_SetCallBack>:



void Timer2_SetCallBack ( void(*Ptr2Func)(void) )
{
    1102:	df 93       	push	r29
    1104:	cf 93       	push	r28
    1106:	00 d0       	rcall	.+0      	; 0x1108 <Timer2_SetCallBack+0x6>
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	9a 83       	std	Y+2, r25	; 0x02
    110e:	89 83       	std	Y+1, r24	; 0x01
	Timer2_CallBack_Ptr = Ptr2Func;
    1110:	89 81       	ldd	r24, Y+1	; 0x01
    1112:	9a 81       	ldd	r25, Y+2	; 0x02
    1114:	90 93 6d 00 	sts	0x006D, r25
    1118:	80 93 6c 00 	sts	0x006C, r24
}
    111c:	0f 90       	pop	r0
    111e:	0f 90       	pop	r0
    1120:	cf 91       	pop	r28
    1122:	df 91       	pop	r29
    1124:	08 95       	ret

00001126 <I2C_Init>:
 *      Author: Mohamed
 */
#include "I2C.h"

void I2C_Init()
{
    1126:	df 93       	push	r29
    1128:	cf 93       	push	r28
    112a:	cd b7       	in	r28, 0x3d	; 61
    112c:	de b7       	in	r29, 0x3e	; 62
	TWBR = 0x02;
    112e:	e0 e2       	ldi	r30, 0x20	; 32
    1130:	f0 e0       	ldi	r31, 0x00	; 0
    1132:	82 e0       	ldi	r24, 0x02	; 2
    1134:	80 83       	st	Z, r24
	TWCR = (1<<TWEN);
    1136:	e6 e5       	ldi	r30, 0x56	; 86
    1138:	f0 e0       	ldi	r31, 0x00	; 0
    113a:	84 e0       	ldi	r24, 0x04	; 4
    113c:	80 83       	st	Z, r24
	TWSR = 0x00;
    113e:	e1 e2       	ldi	r30, 0x21	; 33
    1140:	f0 e0       	ldi	r31, 0x00	; 0
    1142:	10 82       	st	Z, r1
	TWAR = 0b00000010;
    1144:	e2 e2       	ldi	r30, 0x22	; 34
    1146:	f0 e0       	ldi	r31, 0x00	; 0
    1148:	82 e0       	ldi	r24, 0x02	; 2
    114a:	80 83       	st	Z, r24
}
    114c:	cf 91       	pop	r28
    114e:	df 91       	pop	r29
    1150:	08 95       	ret

00001152 <I2C_Start>:

void I2C_Start()
{
    1152:	df 93       	push	r29
    1154:	cf 93       	push	r28
    1156:	cd b7       	in	r28, 0x3d	; 61
    1158:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTA)|(1<<TWEN);
    115a:	e6 e5       	ldi	r30, 0x56	; 86
    115c:	f0 e0       	ldi	r31, 0x00	; 0
    115e:	87 e0       	ldi	r24, 0x07	; 7
    1160:	80 83       	st	Z, r24
	while(IS_BIT_CLEARED(TWCR,TWINT));
    1162:	e6 e5       	ldi	r30, 0x56	; 86
    1164:	f0 e0       	ldi	r31, 0x00	; 0
    1166:	80 81       	ld	r24, Z
    1168:	88 2f       	mov	r24, r24
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	90 70       	andi	r25, 0x00	; 0
    1170:	00 97       	sbiw	r24, 0x00	; 0
    1172:	b9 f3       	breq	.-18     	; 0x1162 <I2C_Start+0x10>
}
    1174:	cf 91       	pop	r28
    1176:	df 91       	pop	r29
    1178:	08 95       	ret

0000117a <I2C_Stop>:

void I2C_Stop()
{
    117a:	df 93       	push	r29
    117c:	cf 93       	push	r28
    117e:	cd b7       	in	r28, 0x3d	; 61
    1180:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWSTO)|(1<<TWEN);
    1182:	e6 e5       	ldi	r30, 0x56	; 86
    1184:	f0 e0       	ldi	r31, 0x00	; 0
    1186:	8d e0       	ldi	r24, 0x0D	; 13
    1188:	80 83       	st	Z, r24
}
    118a:	cf 91       	pop	r28
    118c:	df 91       	pop	r29
    118e:	08 95       	ret

00001190 <I2C_Write>:

void I2C_Write(uint8 data)
{
    1190:	df 93       	push	r29
    1192:	cf 93       	push	r28
    1194:	0f 92       	push	r0
    1196:	cd b7       	in	r28, 0x3d	; 61
    1198:	de b7       	in	r29, 0x3e	; 62
    119a:	89 83       	std	Y+1, r24	; 0x01
	TWDR = data;
    119c:	e3 e2       	ldi	r30, 0x23	; 35
    119e:	f0 e0       	ldi	r31, 0x00	; 0
    11a0:	89 81       	ldd	r24, Y+1	; 0x01
    11a2:	80 83       	st	Z, r24
	TWCR = (1<<TWINT)|(1<<TWEN);
    11a4:	e6 e5       	ldi	r30, 0x56	; 86
    11a6:	f0 e0       	ldi	r31, 0x00	; 0
    11a8:	85 e0       	ldi	r24, 0x05	; 5
    11aa:	80 83       	st	Z, r24
	while(IS_BIT_CLEARED(TWCR,TWINT));
    11ac:	e6 e5       	ldi	r30, 0x56	; 86
    11ae:	f0 e0       	ldi	r31, 0x00	; 0
    11b0:	80 81       	ld	r24, Z
    11b2:	88 2f       	mov	r24, r24
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	81 70       	andi	r24, 0x01	; 1
    11b8:	90 70       	andi	r25, 0x00	; 0
    11ba:	00 97       	sbiw	r24, 0x00	; 0
    11bc:	b9 f3       	breq	.-18     	; 0x11ac <I2C_Write+0x1c>
}
    11be:	0f 90       	pop	r0
    11c0:	cf 91       	pop	r28
    11c2:	df 91       	pop	r29
    11c4:	08 95       	ret

000011c6 <I2C_Read_ACK>:

uint8 I2C_Read_ACK()
{
    11c6:	df 93       	push	r29
    11c8:	cf 93       	push	r28
    11ca:	cd b7       	in	r28, 0x3d	; 61
    11cc:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN)|(1<<TWEA);
    11ce:	e6 e5       	ldi	r30, 0x56	; 86
    11d0:	f0 e0       	ldi	r31, 0x00	; 0
    11d2:	85 e1       	ldi	r24, 0x15	; 21
    11d4:	80 83       	st	Z, r24
	while(IS_BIT_CLEARED(TWCR,TWINT));
    11d6:	e6 e5       	ldi	r30, 0x56	; 86
    11d8:	f0 e0       	ldi	r31, 0x00	; 0
    11da:	80 81       	ld	r24, Z
    11dc:	88 2f       	mov	r24, r24
    11de:	90 e0       	ldi	r25, 0x00	; 0
    11e0:	81 70       	andi	r24, 0x01	; 1
    11e2:	90 70       	andi	r25, 0x00	; 0
    11e4:	00 97       	sbiw	r24, 0x00	; 0
    11e6:	b9 f3       	breq	.-18     	; 0x11d6 <I2C_Read_ACK+0x10>
	return TWDR;
    11e8:	e3 e2       	ldi	r30, 0x23	; 35
    11ea:	f0 e0       	ldi	r31, 0x00	; 0
    11ec:	80 81       	ld	r24, Z
}
    11ee:	cf 91       	pop	r28
    11f0:	df 91       	pop	r29
    11f2:	08 95       	ret

000011f4 <I2C_Read_NO_ACK>:

uint8 I2C_Read_NO_ACK()
{
    11f4:	df 93       	push	r29
    11f6:	cf 93       	push	r28
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
	TWCR = (1<<TWINT)|(1<<TWEN);
    11fc:	e6 e5       	ldi	r30, 0x56	; 86
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	85 e0       	ldi	r24, 0x05	; 5
    1202:	80 83       	st	Z, r24
	while(IS_BIT_CLEARED(TWCR,TWINT));
    1204:	e6 e5       	ldi	r30, 0x56	; 86
    1206:	f0 e0       	ldi	r31, 0x00	; 0
    1208:	80 81       	ld	r24, Z
    120a:	88 2f       	mov	r24, r24
    120c:	90 e0       	ldi	r25, 0x00	; 0
    120e:	81 70       	andi	r24, 0x01	; 1
    1210:	90 70       	andi	r25, 0x00	; 0
    1212:	00 97       	sbiw	r24, 0x00	; 0
    1214:	b9 f3       	breq	.-18     	; 0x1204 <I2C_Read_NO_ACK+0x10>
	return TWDR;
    1216:	e3 e2       	ldi	r30, 0x23	; 35
    1218:	f0 e0       	ldi	r31, 0x00	; 0
    121a:	80 81       	ld	r24, Z
}
    121c:	cf 91       	pop	r28
    121e:	df 91       	pop	r29
    1220:	08 95       	ret

00001222 <I2C_Status>:

uint8 I2C_Status()
{
    1222:	df 93       	push	r29
    1224:	cf 93       	push	r28
    1226:	0f 92       	push	r0
    1228:	cd b7       	in	r28, 0x3d	; 61
    122a:	de b7       	in	r29, 0x3e	; 62
	uint8 status;
	status = (TWSR & 0xF8);
    122c:	e1 e2       	ldi	r30, 0x21	; 33
    122e:	f0 e0       	ldi	r31, 0x00	; 0
    1230:	80 81       	ld	r24, Z
    1232:	88 7f       	andi	r24, 0xF8	; 248
    1234:	89 83       	std	Y+1, r24	; 0x01
	return status;
    1236:	89 81       	ldd	r24, Y+1	; 0x01
}
    1238:	0f 90       	pop	r0
    123a:	cf 91       	pop	r28
    123c:	df 91       	pop	r29
    123e:	08 95       	ret

00001240 <GIE_Enable>:
#include "Bit_Math.h"
#include "GIE_Interface.h"
#include "ATmega32_RegisterMap.h"

void GIE_Enable(void)
{
    1240:	df 93       	push	r29
    1242:	cf 93       	push	r28
    1244:	cd b7       	in	r28, 0x3d	; 61
    1246:	de b7       	in	r29, 0x3e	; 62
	/* To enable the global interrupt */
	SET_BIT(SREG,I_BIT);
    1248:	af e5       	ldi	r26, 0x5F	; 95
    124a:	b0 e0       	ldi	r27, 0x00	; 0
    124c:	ef e5       	ldi	r30, 0x5F	; 95
    124e:	f0 e0       	ldi	r31, 0x00	; 0
    1250:	80 81       	ld	r24, Z
    1252:	80 68       	ori	r24, 0x80	; 128
    1254:	8c 93       	st	X, r24
}
    1256:	cf 91       	pop	r28
    1258:	df 91       	pop	r29
    125a:	08 95       	ret

0000125c <GIE_Disable>:

void GIE_Disable(void)
{
    125c:	df 93       	push	r29
    125e:	cf 93       	push	r28
    1260:	cd b7       	in	r28, 0x3d	; 61
    1262:	de b7       	in	r29, 0x3e	; 62
	/* To disable the global interrupt */
	CLEAR_BIT(SREG,I_BIT);
    1264:	af e5       	ldi	r26, 0x5F	; 95
    1266:	b0 e0       	ldi	r27, 0x00	; 0
    1268:	ef e5       	ldi	r30, 0x5F	; 95
    126a:	f0 e0       	ldi	r31, 0x00	; 0
    126c:	80 81       	ld	r24, Z
    126e:	8f 77       	andi	r24, 0x7F	; 127
    1270:	8c 93       	st	X, r24
}
    1272:	cf 91       	pop	r28
    1274:	df 91       	pop	r29
    1276:	08 95       	ret

00001278 <Ext_Int_Init>:
#include "Bit_Math.h"

static void (*Ext_Int_CallBack[3])(void)={NULL};

void Ext_Int_Init(uint8 interruptChannel)
{
    1278:	df 93       	push	r29
    127a:	cf 93       	push	r28
    127c:	00 d0       	rcall	.+0      	; 0x127e <Ext_Int_Init+0x6>
    127e:	0f 92       	push	r0
    1280:	cd b7       	in	r28, 0x3d	; 61
    1282:	de b7       	in	r29, 0x3e	; 62
    1284:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptChannel)
    1286:	89 81       	ldd	r24, Y+1	; 0x01
    1288:	28 2f       	mov	r18, r24
    128a:	30 e0       	ldi	r19, 0x00	; 0
    128c:	3b 83       	std	Y+3, r19	; 0x03
    128e:	2a 83       	std	Y+2, r18	; 0x02
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	9b 81       	ldd	r25, Y+3	; 0x03
    1294:	81 30       	cpi	r24, 0x01	; 1
    1296:	91 05       	cpc	r25, r1
    1298:	c1 f0       	breq	.+48     	; 0x12ca <Ext_Int_Init+0x52>
    129a:	2a 81       	ldd	r18, Y+2	; 0x02
    129c:	3b 81       	ldd	r19, Y+3	; 0x03
    129e:	22 30       	cpi	r18, 0x02	; 2
    12a0:	31 05       	cpc	r19, r1
    12a2:	11 f1       	breq	.+68     	; 0x12e8 <Ext_Int_Init+0x70>
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	9b 81       	ldd	r25, Y+3	; 0x03
    12a8:	00 97       	sbiw	r24, 0x00	; 0
    12aa:	29 f5       	brne	.+74     	; 0x12f6 <Ext_Int_Init+0x7e>
		case EXT_INT0:
	#if EXT_INT0_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR,ISC01_BIT);
			CLEAR_BIT(MCUCR,ISC00_BIT);
	#elif EXT_INT0_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR,ISC01_BIT);
    12ac:	a5 e5       	ldi	r26, 0x55	; 85
    12ae:	b0 e0       	ldi	r27, 0x00	; 0
    12b0:	e5 e5       	ldi	r30, 0x55	; 85
    12b2:	f0 e0       	ldi	r31, 0x00	; 0
    12b4:	80 81       	ld	r24, Z
    12b6:	82 60       	ori	r24, 0x02	; 2
    12b8:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC00_BIT);
    12ba:	a5 e5       	ldi	r26, 0x55	; 85
    12bc:	b0 e0       	ldi	r27, 0x00	; 0
    12be:	e5 e5       	ldi	r30, 0x55	; 85
    12c0:	f0 e0       	ldi	r31, 0x00	; 0
    12c2:	80 81       	ld	r24, Z
    12c4:	81 60       	ori	r24, 0x01	; 1
    12c6:	8c 93       	st	X, r24
    12c8:	16 c0       	rjmp	.+44     	; 0x12f6 <Ext_Int_Init+0x7e>
		case EXT_INT1:
	#if EXT_INT1_SENSE_CONTROL == FALLING_EDGE
			SET_BIT(MCUCR,ISC11_BIT);
			CLEAR_BIT(MCUCR,ISC10_BIT);
	#elif EXT_INT1_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCR,ISC11_BIT);
    12ca:	a5 e5       	ldi	r26, 0x55	; 85
    12cc:	b0 e0       	ldi	r27, 0x00	; 0
    12ce:	e5 e5       	ldi	r30, 0x55	; 85
    12d0:	f0 e0       	ldi	r31, 0x00	; 0
    12d2:	80 81       	ld	r24, Z
    12d4:	88 60       	ori	r24, 0x08	; 8
    12d6:	8c 93       	st	X, r24
			SET_BIT(MCUCR,ISC10_BIT);
    12d8:	a5 e5       	ldi	r26, 0x55	; 85
    12da:	b0 e0       	ldi	r27, 0x00	; 0
    12dc:	e5 e5       	ldi	r30, 0x55	; 85
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	80 81       	ld	r24, Z
    12e2:	84 60       	ori	r24, 0x04	; 4
    12e4:	8c 93       	st	X, r24
    12e6:	07 c0       	rjmp	.+14     	; 0x12f6 <Ext_Int_Init+0x7e>
			break;
		case EXT_INT2:
	#if EXT_INT2_SENSE_CONTROL == FALLING_EDGE
			CLEAR_BIT(MCUCR,ISC2_BIT);
	#elif EXT_INT2_SENSE_CONTROL == RISING_EDGE
			SET_BIT(MCUCSR,ISC2_BIT);
    12e8:	a4 e5       	ldi	r26, 0x54	; 84
    12ea:	b0 e0       	ldi	r27, 0x00	; 0
    12ec:	e4 e5       	ldi	r30, 0x54	; 84
    12ee:	f0 e0       	ldi	r31, 0x00	; 0
    12f0:	80 81       	ld	r24, Z
    12f2:	80 64       	ori	r24, 0x40	; 64
    12f4:	8c 93       	st	X, r24
	#endif
			break;
		default:
			break;
	}
}
    12f6:	0f 90       	pop	r0
    12f8:	0f 90       	pop	r0
    12fa:	0f 90       	pop	r0
    12fc:	cf 91       	pop	r28
    12fe:	df 91       	pop	r29
    1300:	08 95       	ret

00001302 <Ext_Int_Enable>:
void Ext_Int_Enable(uint8 interruptChannel)
{
    1302:	df 93       	push	r29
    1304:	cf 93       	push	r28
    1306:	00 d0       	rcall	.+0      	; 0x1308 <Ext_Int_Enable+0x6>
    1308:	0f 92       	push	r0
    130a:	cd b7       	in	r28, 0x3d	; 61
    130c:	de b7       	in	r29, 0x3e	; 62
    130e:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptChannel)
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	28 2f       	mov	r18, r24
    1314:	30 e0       	ldi	r19, 0x00	; 0
    1316:	3b 83       	std	Y+3, r19	; 0x03
    1318:	2a 83       	std	Y+2, r18	; 0x02
    131a:	8a 81       	ldd	r24, Y+2	; 0x02
    131c:	9b 81       	ldd	r25, Y+3	; 0x03
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	91 05       	cpc	r25, r1
    1322:	89 f0       	breq	.+34     	; 0x1346 <Ext_Int_Enable+0x44>
    1324:	2a 81       	ldd	r18, Y+2	; 0x02
    1326:	3b 81       	ldd	r19, Y+3	; 0x03
    1328:	22 30       	cpi	r18, 0x02	; 2
    132a:	31 05       	cpc	r19, r1
    132c:	a1 f0       	breq	.+40     	; 0x1356 <Ext_Int_Enable+0x54>
    132e:	8a 81       	ldd	r24, Y+2	; 0x02
    1330:	9b 81       	ldd	r25, Y+3	; 0x03
    1332:	00 97       	sbiw	r24, 0x00	; 0
    1334:	b9 f4       	brne	.+46     	; 0x1364 <Ext_Int_Enable+0x62>
	{
		case EXT_INT0:
			SET_BIT(GICR, INT0_BIT);
    1336:	ab e5       	ldi	r26, 0x5B	; 91
    1338:	b0 e0       	ldi	r27, 0x00	; 0
    133a:	eb e5       	ldi	r30, 0x5B	; 91
    133c:	f0 e0       	ldi	r31, 0x00	; 0
    133e:	80 81       	ld	r24, Z
    1340:	80 64       	ori	r24, 0x40	; 64
    1342:	8c 93       	st	X, r24
    1344:	0f c0       	rjmp	.+30     	; 0x1364 <Ext_Int_Enable+0x62>
			break;
		case EXT_INT1:
			SET_BIT(GICR, INT1_BIT);
    1346:	ab e5       	ldi	r26, 0x5B	; 91
    1348:	b0 e0       	ldi	r27, 0x00	; 0
    134a:	eb e5       	ldi	r30, 0x5B	; 91
    134c:	f0 e0       	ldi	r31, 0x00	; 0
    134e:	80 81       	ld	r24, Z
    1350:	80 68       	ori	r24, 0x80	; 128
    1352:	8c 93       	st	X, r24
    1354:	07 c0       	rjmp	.+14     	; 0x1364 <Ext_Int_Enable+0x62>
			break;
		case EXT_INT2:
			SET_BIT(GICR, INT2_BIT);
    1356:	ab e5       	ldi	r26, 0x5B	; 91
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	eb e5       	ldi	r30, 0x5B	; 91
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	80 62       	ori	r24, 0x20	; 32
    1362:	8c 93       	st	X, r24
			break;
	}
}
    1364:	0f 90       	pop	r0
    1366:	0f 90       	pop	r0
    1368:	0f 90       	pop	r0
    136a:	cf 91       	pop	r28
    136c:	df 91       	pop	r29
    136e:	08 95       	ret

00001370 <Ext_Int_Disable>:

void Ext_Int_Disable(uint8 interruptChannel)
{
    1370:	df 93       	push	r29
    1372:	cf 93       	push	r28
    1374:	00 d0       	rcall	.+0      	; 0x1376 <Ext_Int_Disable+0x6>
    1376:	0f 92       	push	r0
    1378:	cd b7       	in	r28, 0x3d	; 61
    137a:	de b7       	in	r29, 0x3e	; 62
    137c:	89 83       	std	Y+1, r24	; 0x01
	switch(interruptChannel)
    137e:	89 81       	ldd	r24, Y+1	; 0x01
    1380:	28 2f       	mov	r18, r24
    1382:	30 e0       	ldi	r19, 0x00	; 0
    1384:	3b 83       	std	Y+3, r19	; 0x03
    1386:	2a 83       	std	Y+2, r18	; 0x02
    1388:	8a 81       	ldd	r24, Y+2	; 0x02
    138a:	9b 81       	ldd	r25, Y+3	; 0x03
    138c:	81 30       	cpi	r24, 0x01	; 1
    138e:	91 05       	cpc	r25, r1
    1390:	89 f0       	breq	.+34     	; 0x13b4 <Ext_Int_Disable+0x44>
    1392:	2a 81       	ldd	r18, Y+2	; 0x02
    1394:	3b 81       	ldd	r19, Y+3	; 0x03
    1396:	22 30       	cpi	r18, 0x02	; 2
    1398:	31 05       	cpc	r19, r1
    139a:	a1 f0       	breq	.+40     	; 0x13c4 <Ext_Int_Disable+0x54>
    139c:	8a 81       	ldd	r24, Y+2	; 0x02
    139e:	9b 81       	ldd	r25, Y+3	; 0x03
    13a0:	00 97       	sbiw	r24, 0x00	; 0
    13a2:	b9 f4       	brne	.+46     	; 0x13d2 <Ext_Int_Disable+0x62>
	{
		case EXT_INT0:
			CLEAR_BIT(GICR, INT0_BIT);
    13a4:	ab e5       	ldi	r26, 0x5B	; 91
    13a6:	b0 e0       	ldi	r27, 0x00	; 0
    13a8:	eb e5       	ldi	r30, 0x5B	; 91
    13aa:	f0 e0       	ldi	r31, 0x00	; 0
    13ac:	80 81       	ld	r24, Z
    13ae:	8f 7b       	andi	r24, 0xBF	; 191
    13b0:	8c 93       	st	X, r24
    13b2:	0f c0       	rjmp	.+30     	; 0x13d2 <Ext_Int_Disable+0x62>
			break;
		case EXT_INT1:
			CLEAR_BIT(GICR, INT1_BIT);
    13b4:	ab e5       	ldi	r26, 0x5B	; 91
    13b6:	b0 e0       	ldi	r27, 0x00	; 0
    13b8:	eb e5       	ldi	r30, 0x5B	; 91
    13ba:	f0 e0       	ldi	r31, 0x00	; 0
    13bc:	80 81       	ld	r24, Z
    13be:	8f 77       	andi	r24, 0x7F	; 127
    13c0:	8c 93       	st	X, r24
    13c2:	07 c0       	rjmp	.+14     	; 0x13d2 <Ext_Int_Disable+0x62>
			break;
		case EXT_INT2:
			CLEAR_BIT(GICR, INT2_BIT);
    13c4:	ab e5       	ldi	r26, 0x5B	; 91
    13c6:	b0 e0       	ldi	r27, 0x00	; 0
    13c8:	eb e5       	ldi	r30, 0x5B	; 91
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8f 7d       	andi	r24, 0xDF	; 223
    13d0:	8c 93       	st	X, r24
			break;
	}
}
    13d2:	0f 90       	pop	r0
    13d4:	0f 90       	pop	r0
    13d6:	0f 90       	pop	r0
    13d8:	cf 91       	pop	r28
    13da:	df 91       	pop	r29
    13dc:	08 95       	ret

000013de <Ext_Int_SetCallBack>:

void Ext_Int_SetCallBack(uint8 interruptChannel, void (*interruptAction)(void))
{
    13de:	df 93       	push	r29
    13e0:	cf 93       	push	r28
    13e2:	00 d0       	rcall	.+0      	; 0x13e4 <Ext_Int_SetCallBack+0x6>
    13e4:	0f 92       	push	r0
    13e6:	cd b7       	in	r28, 0x3d	; 61
    13e8:	de b7       	in	r29, 0x3e	; 62
    13ea:	89 83       	std	Y+1, r24	; 0x01
    13ec:	7b 83       	std	Y+3, r23	; 0x03
    13ee:	6a 83       	std	Y+2, r22	; 0x02
	Ext_Int_CallBack[interruptChannel] = interruptAction;
    13f0:	89 81       	ldd	r24, Y+1	; 0x01
    13f2:	88 2f       	mov	r24, r24
    13f4:	90 e0       	ldi	r25, 0x00	; 0
    13f6:	88 0f       	add	r24, r24
    13f8:	99 1f       	adc	r25, r25
    13fa:	fc 01       	movw	r30, r24
    13fc:	e0 59       	subi	r30, 0x90	; 144
    13fe:	ff 4f       	sbci	r31, 0xFF	; 255
    1400:	8a 81       	ldd	r24, Y+2	; 0x02
    1402:	9b 81       	ldd	r25, Y+3	; 0x03
    1404:	91 83       	std	Z+1, r25	; 0x01
    1406:	80 83       	st	Z, r24
}
    1408:	0f 90       	pop	r0
    140a:	0f 90       	pop	r0
    140c:	0f 90       	pop	r0
    140e:	cf 91       	pop	r28
    1410:	df 91       	pop	r29
    1412:	08 95       	ret

00001414 <__vector_1>:

ISR(INT0_VECT)
{
    1414:	1f 92       	push	r1
    1416:	0f 92       	push	r0
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	0f 92       	push	r0
    141c:	11 24       	eor	r1, r1
    141e:	2f 93       	push	r18
    1420:	3f 93       	push	r19
    1422:	4f 93       	push	r20
    1424:	5f 93       	push	r21
    1426:	6f 93       	push	r22
    1428:	7f 93       	push	r23
    142a:	8f 93       	push	r24
    142c:	9f 93       	push	r25
    142e:	af 93       	push	r26
    1430:	bf 93       	push	r27
    1432:	ef 93       	push	r30
    1434:	ff 93       	push	r31
    1436:	df 93       	push	r29
    1438:	cf 93       	push	r28
    143a:	cd b7       	in	r28, 0x3d	; 61
    143c:	de b7       	in	r29, 0x3e	; 62
	Ext_Int_CallBack[EXT_INT0]();
    143e:	e0 91 70 00 	lds	r30, 0x0070
    1442:	f0 91 71 00 	lds	r31, 0x0071
    1446:	09 95       	icall

}
    1448:	cf 91       	pop	r28
    144a:	df 91       	pop	r29
    144c:	ff 91       	pop	r31
    144e:	ef 91       	pop	r30
    1450:	bf 91       	pop	r27
    1452:	af 91       	pop	r26
    1454:	9f 91       	pop	r25
    1456:	8f 91       	pop	r24
    1458:	7f 91       	pop	r23
    145a:	6f 91       	pop	r22
    145c:	5f 91       	pop	r21
    145e:	4f 91       	pop	r20
    1460:	3f 91       	pop	r19
    1462:	2f 91       	pop	r18
    1464:	0f 90       	pop	r0
    1466:	0f be       	out	0x3f, r0	; 63
    1468:	0f 90       	pop	r0
    146a:	1f 90       	pop	r1
    146c:	18 95       	reti

0000146e <__vector_2>:

ISR(INT1_VECT)
{
    146e:	1f 92       	push	r1
    1470:	0f 92       	push	r0
    1472:	0f b6       	in	r0, 0x3f	; 63
    1474:	0f 92       	push	r0
    1476:	11 24       	eor	r1, r1
    1478:	2f 93       	push	r18
    147a:	3f 93       	push	r19
    147c:	4f 93       	push	r20
    147e:	5f 93       	push	r21
    1480:	6f 93       	push	r22
    1482:	7f 93       	push	r23
    1484:	8f 93       	push	r24
    1486:	9f 93       	push	r25
    1488:	af 93       	push	r26
    148a:	bf 93       	push	r27
    148c:	ef 93       	push	r30
    148e:	ff 93       	push	r31
    1490:	df 93       	push	r29
    1492:	cf 93       	push	r28
    1494:	cd b7       	in	r28, 0x3d	; 61
    1496:	de b7       	in	r29, 0x3e	; 62
	Ext_Int_CallBack[EXT_INT1]();
    1498:	e0 91 72 00 	lds	r30, 0x0072
    149c:	f0 91 73 00 	lds	r31, 0x0073
    14a0:	09 95       	icall
}
    14a2:	cf 91       	pop	r28
    14a4:	df 91       	pop	r29
    14a6:	ff 91       	pop	r31
    14a8:	ef 91       	pop	r30
    14aa:	bf 91       	pop	r27
    14ac:	af 91       	pop	r26
    14ae:	9f 91       	pop	r25
    14b0:	8f 91       	pop	r24
    14b2:	7f 91       	pop	r23
    14b4:	6f 91       	pop	r22
    14b6:	5f 91       	pop	r21
    14b8:	4f 91       	pop	r20
    14ba:	3f 91       	pop	r19
    14bc:	2f 91       	pop	r18
    14be:	0f 90       	pop	r0
    14c0:	0f be       	out	0x3f, r0	; 63
    14c2:	0f 90       	pop	r0
    14c4:	1f 90       	pop	r1
    14c6:	18 95       	reti

000014c8 <__vector_3>:

ISR(INT2_VECT)
{
    14c8:	1f 92       	push	r1
    14ca:	0f 92       	push	r0
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	0f 92       	push	r0
    14d0:	11 24       	eor	r1, r1
    14d2:	2f 93       	push	r18
    14d4:	3f 93       	push	r19
    14d6:	4f 93       	push	r20
    14d8:	5f 93       	push	r21
    14da:	6f 93       	push	r22
    14dc:	7f 93       	push	r23
    14de:	8f 93       	push	r24
    14e0:	9f 93       	push	r25
    14e2:	af 93       	push	r26
    14e4:	bf 93       	push	r27
    14e6:	ef 93       	push	r30
    14e8:	ff 93       	push	r31
    14ea:	df 93       	push	r29
    14ec:	cf 93       	push	r28
    14ee:	cd b7       	in	r28, 0x3d	; 61
    14f0:	de b7       	in	r29, 0x3e	; 62
	Ext_Int_CallBack[EXT_INT2]();
    14f2:	e0 91 74 00 	lds	r30, 0x0074
    14f6:	f0 91 75 00 	lds	r31, 0x0075
    14fa:	09 95       	icall
}
    14fc:	cf 91       	pop	r28
    14fe:	df 91       	pop	r29
    1500:	ff 91       	pop	r31
    1502:	ef 91       	pop	r30
    1504:	bf 91       	pop	r27
    1506:	af 91       	pop	r26
    1508:	9f 91       	pop	r25
    150a:	8f 91       	pop	r24
    150c:	7f 91       	pop	r23
    150e:	6f 91       	pop	r22
    1510:	5f 91       	pop	r21
    1512:	4f 91       	pop	r20
    1514:	3f 91       	pop	r19
    1516:	2f 91       	pop	r18
    1518:	0f 90       	pop	r0
    151a:	0f be       	out	0x3f, r0	; 63
    151c:	0f 90       	pop	r0
    151e:	1f 90       	pop	r1
    1520:	18 95       	reti

00001522 <EEPROM_Init>:
 */

#include "EEPROM.h"

void EEPROM_Init()
{
    1522:	df 93       	push	r29
    1524:	cf 93       	push	r28
    1526:	cd b7       	in	r28, 0x3d	; 61
    1528:	de b7       	in	r29, 0x3e	; 62
	I2C_Init();
    152a:	0e 94 93 08 	call	0x1126	; 0x1126 <I2C_Init>
}
    152e:	cf 91       	pop	r28
    1530:	df 91       	pop	r29
    1532:	08 95       	ret

00001534 <EEPROM_WriteByte>:

uint8 EEPROM_WriteByte(uint16 Addr,uint8 data)
{
    1534:	df 93       	push	r29
    1536:	cf 93       	push	r28
    1538:	00 d0       	rcall	.+0      	; 0x153a <EEPROM_WriteByte+0x6>
    153a:	00 d0       	rcall	.+0      	; 0x153c <EEPROM_WriteByte+0x8>
    153c:	cd b7       	in	r28, 0x3d	; 61
    153e:	de b7       	in	r29, 0x3e	; 62
    1540:	9a 83       	std	Y+2, r25	; 0x02
    1542:	89 83       	std	Y+1, r24	; 0x01
    1544:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Start();
    1546:	0e 94 a9 08 	call	0x1152	; 0x1152 <I2C_Start>
	if(I2C_Status() != I2C_START)
    154a:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    154e:	88 30       	cpi	r24, 0x08	; 8
    1550:	11 f0       	breq	.+4      	; 0x1556 <EEPROM_WriteByte+0x22>
		return ERROR;
    1552:	1c 82       	std	Y+4, r1	; 0x04
    1554:	28 c0       	rjmp	.+80     	; 0x15a6 <EEPROM_WriteByte+0x72>
	I2C_Write((uint8)(0xA0 | ((Addr & 0x0700) >> 7)));
    1556:	89 81       	ldd	r24, Y+1	; 0x01
    1558:	9a 81       	ldd	r25, Y+2	; 0x02
    155a:	80 70       	andi	r24, 0x00	; 0
    155c:	97 70       	andi	r25, 0x07	; 7
    155e:	88 0f       	add	r24, r24
    1560:	89 2f       	mov	r24, r25
    1562:	88 1f       	adc	r24, r24
    1564:	99 0b       	sbc	r25, r25
    1566:	91 95       	neg	r25
    1568:	80 6a       	ori	r24, 0xA0	; 160
    156a:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
    156e:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    1572:	88 31       	cpi	r24, 0x18	; 24
    1574:	11 f0       	breq	.+4      	; 0x157a <EEPROM_WriteByte+0x46>
		return ERROR;
    1576:	1c 82       	std	Y+4, r1	; 0x04
    1578:	16 c0       	rjmp	.+44     	; 0x15a6 <EEPROM_WriteByte+0x72>
	I2C_Write((uint8)Addr);
    157a:	89 81       	ldd	r24, Y+1	; 0x01
    157c:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
    1580:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    1584:	88 32       	cpi	r24, 0x28	; 40
    1586:	11 f0       	breq	.+4      	; 0x158c <EEPROM_WriteByte+0x58>
		return ERROR;
    1588:	1c 82       	std	Y+4, r1	; 0x04
    158a:	0d c0       	rjmp	.+26     	; 0x15a6 <EEPROM_WriteByte+0x72>
	I2C_Write(data);
    158c:	8b 81       	ldd	r24, Y+3	; 0x03
    158e:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
    1592:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    1596:	88 32       	cpi	r24, 0x28	; 40
    1598:	11 f0       	breq	.+4      	; 0x159e <EEPROM_WriteByte+0x6a>
		return ERROR;
    159a:	1c 82       	std	Y+4, r1	; 0x04
    159c:	04 c0       	rjmp	.+8      	; 0x15a6 <EEPROM_WriteByte+0x72>
	I2C_Stop();
    159e:	0e 94 bd 08 	call	0x117a	; 0x117a <I2C_Stop>

	return SUCCESS;
    15a2:	81 e0       	ldi	r24, 0x01	; 1
    15a4:	8c 83       	std	Y+4, r24	; 0x04
    15a6:	8c 81       	ldd	r24, Y+4	; 0x04
}
    15a8:	0f 90       	pop	r0
    15aa:	0f 90       	pop	r0
    15ac:	0f 90       	pop	r0
    15ae:	0f 90       	pop	r0
    15b0:	cf 91       	pop	r28
    15b2:	df 91       	pop	r29
    15b4:	08 95       	ret

000015b6 <EEPROM_ReadByte>:

uint8 EEPROM_ReadByte(uint16 Addr,uint8 *data)
{
    15b6:	df 93       	push	r29
    15b8:	cf 93       	push	r28
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <EEPROM_ReadByte+0x6>
    15bc:	00 d0       	rcall	.+0      	; 0x15be <EEPROM_ReadByte+0x8>
    15be:	0f 92       	push	r0
    15c0:	cd b7       	in	r28, 0x3d	; 61
    15c2:	de b7       	in	r29, 0x3e	; 62
    15c4:	9a 83       	std	Y+2, r25	; 0x02
    15c6:	89 83       	std	Y+1, r24	; 0x01
    15c8:	7c 83       	std	Y+4, r23	; 0x04
    15ca:	6b 83       	std	Y+3, r22	; 0x03
	I2C_Start();
    15cc:	0e 94 a9 08 	call	0x1152	; 0x1152 <I2C_Start>
	if(I2C_Status() != I2C_START)
    15d0:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    15d4:	88 30       	cpi	r24, 0x08	; 8
    15d6:	11 f0       	breq	.+4      	; 0x15dc <EEPROM_ReadByte+0x26>
		return ERROR;
    15d8:	1d 82       	std	Y+5, r1	; 0x05
    15da:	44 c0       	rjmp	.+136    	; 0x1664 <EEPROM_ReadByte+0xae>
	I2C_Write((uint8)(0xA0 | ((Addr & 0x0700) >> 7)));
    15dc:	89 81       	ldd	r24, Y+1	; 0x01
    15de:	9a 81       	ldd	r25, Y+2	; 0x02
    15e0:	80 70       	andi	r24, 0x00	; 0
    15e2:	97 70       	andi	r25, 0x07	; 7
    15e4:	88 0f       	add	r24, r24
    15e6:	89 2f       	mov	r24, r25
    15e8:	88 1f       	adc	r24, r24
    15ea:	99 0b       	sbc	r25, r25
    15ec:	91 95       	neg	r25
    15ee:	80 6a       	ori	r24, 0xA0	; 160
    15f0:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_W_ACK)
    15f4:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    15f8:	88 31       	cpi	r24, 0x18	; 24
    15fa:	11 f0       	breq	.+4      	; 0x1600 <EEPROM_ReadByte+0x4a>
		return ERROR;
    15fc:	1d 82       	std	Y+5, r1	; 0x05
    15fe:	32 c0       	rjmp	.+100    	; 0x1664 <EEPROM_ReadByte+0xae>
	I2C_Write((uint8)Addr);
    1600:	89 81       	ldd	r24, Y+1	; 0x01
    1602:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_DATA_ACK)
    1606:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    160a:	88 32       	cpi	r24, 0x28	; 40
    160c:	11 f0       	breq	.+4      	; 0x1612 <EEPROM_ReadByte+0x5c>
		return ERROR;
    160e:	1d 82       	std	Y+5, r1	; 0x05
    1610:	29 c0       	rjmp	.+82     	; 0x1664 <EEPROM_ReadByte+0xae>
	I2C_Start();
    1612:	0e 94 a9 08 	call	0x1152	; 0x1152 <I2C_Start>
	if(I2C_Status() != I2C_REP_START)
    1616:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    161a:	80 31       	cpi	r24, 0x10	; 16
    161c:	11 f0       	breq	.+4      	; 0x1622 <EEPROM_ReadByte+0x6c>
		return ERROR;
    161e:	1d 82       	std	Y+5, r1	; 0x05
    1620:	21 c0       	rjmp	.+66     	; 0x1664 <EEPROM_ReadByte+0xae>
	I2C_Write((uint8)(0xA0 | ((Addr & 0x0700) >> 7) | 1));
    1622:	89 81       	ldd	r24, Y+1	; 0x01
    1624:	9a 81       	ldd	r25, Y+2	; 0x02
    1626:	80 70       	andi	r24, 0x00	; 0
    1628:	97 70       	andi	r25, 0x07	; 7
    162a:	88 0f       	add	r24, r24
    162c:	89 2f       	mov	r24, r25
    162e:	88 1f       	adc	r24, r24
    1630:	99 0b       	sbc	r25, r25
    1632:	91 95       	neg	r25
    1634:	81 6a       	ori	r24, 0xA1	; 161
    1636:	0e 94 c8 08 	call	0x1190	; 0x1190 <I2C_Write>
	if(I2C_Status() != I2C_MT_SLA_R_ACK)
    163a:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    163e:	80 34       	cpi	r24, 0x40	; 64
    1640:	11 f0       	breq	.+4      	; 0x1646 <EEPROM_ReadByte+0x90>
		return ERROR;
    1642:	1d 82       	std	Y+5, r1	; 0x05
    1644:	0f c0       	rjmp	.+30     	; 0x1664 <EEPROM_ReadByte+0xae>
	*data = I2C_Read_NO_ACK();
    1646:	0e 94 fa 08 	call	0x11f4	; 0x11f4 <I2C_Read_NO_ACK>
    164a:	eb 81       	ldd	r30, Y+3	; 0x03
    164c:	fc 81       	ldd	r31, Y+4	; 0x04
    164e:	80 83       	st	Z, r24
	if(I2C_Status() != I2C_MR_DATA_NACK)
    1650:	0e 94 11 09 	call	0x1222	; 0x1222 <I2C_Status>
    1654:	88 35       	cpi	r24, 0x58	; 88
    1656:	11 f0       	breq	.+4      	; 0x165c <EEPROM_ReadByte+0xa6>
		return ERROR;
    1658:	1d 82       	std	Y+5, r1	; 0x05
    165a:	04 c0       	rjmp	.+8      	; 0x1664 <EEPROM_ReadByte+0xae>
	I2C_Stop();
    165c:	0e 94 bd 08 	call	0x117a	; 0x117a <I2C_Stop>

	return SUCCESS;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	8d 83       	std	Y+5, r24	; 0x05
    1664:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1666:	0f 90       	pop	r0
    1668:	0f 90       	pop	r0
    166a:	0f 90       	pop	r0
    166c:	0f 90       	pop	r0
    166e:	0f 90       	pop	r0
    1670:	cf 91       	pop	r28
    1672:	df 91       	pop	r29
    1674:	08 95       	ret

00001676 <Dio_SetPinDirection>:
#include "ATmega32_RegisterMap.h"
#include "DIO_Interface.h"
#include "Bit_Math.h"

void Dio_SetPinDirection(Dio_PortType port, Dio_PinType pin, Dio_PinDirType mode)
{
    1676:	df 93       	push	r29
    1678:	cf 93       	push	r28
    167a:	cd b7       	in	r28, 0x3d	; 61
    167c:	de b7       	in	r29, 0x3e	; 62
    167e:	27 97       	sbiw	r28, 0x07	; 7
    1680:	0f b6       	in	r0, 0x3f	; 63
    1682:	f8 94       	cli
    1684:	de bf       	out	0x3e, r29	; 62
    1686:	0f be       	out	0x3f, r0	; 63
    1688:	cd bf       	out	0x3d, r28	; 61
    168a:	89 83       	std	Y+1, r24	; 0x01
    168c:	6a 83       	std	Y+2, r22	; 0x02
    168e:	4b 83       	std	Y+3, r20	; 0x03
	if (mode == OUTPUT)
    1690:	8b 81       	ldd	r24, Y+3	; 0x03
    1692:	81 30       	cpi	r24, 0x01	; 1
    1694:	09 f0       	breq	.+2      	; 0x1698 <Dio_SetPinDirection+0x22>
    1696:	6f c0       	rjmp	.+222    	; 0x1776 <Dio_SetPinDirection+0x100>
	{
		switch (port)
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	28 2f       	mov	r18, r24
    169c:	30 e0       	ldi	r19, 0x00	; 0
    169e:	3f 83       	std	Y+7, r19	; 0x07
    16a0:	2e 83       	std	Y+6, r18	; 0x06
    16a2:	8e 81       	ldd	r24, Y+6	; 0x06
    16a4:	9f 81       	ldd	r25, Y+7	; 0x07
    16a6:	81 30       	cpi	r24, 0x01	; 1
    16a8:	91 05       	cpc	r25, r1
    16aa:	49 f1       	breq	.+82     	; 0x16fe <Dio_SetPinDirection+0x88>
    16ac:	2e 81       	ldd	r18, Y+6	; 0x06
    16ae:	3f 81       	ldd	r19, Y+7	; 0x07
    16b0:	22 30       	cpi	r18, 0x02	; 2
    16b2:	31 05       	cpc	r19, r1
    16b4:	2c f4       	brge	.+10     	; 0x16c0 <Dio_SetPinDirection+0x4a>
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	9f 81       	ldd	r25, Y+7	; 0x07
    16ba:	00 97       	sbiw	r24, 0x00	; 0
    16bc:	61 f0       	breq	.+24     	; 0x16d6 <Dio_SetPinDirection+0x60>
    16be:	ce c0       	rjmp	.+412    	; 0x185c <Dio_SetPinDirection+0x1e6>
    16c0:	2e 81       	ldd	r18, Y+6	; 0x06
    16c2:	3f 81       	ldd	r19, Y+7	; 0x07
    16c4:	22 30       	cpi	r18, 0x02	; 2
    16c6:	31 05       	cpc	r19, r1
    16c8:	71 f1       	breq	.+92     	; 0x1726 <Dio_SetPinDirection+0xb0>
    16ca:	8e 81       	ldd	r24, Y+6	; 0x06
    16cc:	9f 81       	ldd	r25, Y+7	; 0x07
    16ce:	83 30       	cpi	r24, 0x03	; 3
    16d0:	91 05       	cpc	r25, r1
    16d2:	e9 f1       	breq	.+122    	; 0x174e <Dio_SetPinDirection+0xd8>
    16d4:	c3 c0       	rjmp	.+390    	; 0x185c <Dio_SetPinDirection+0x1e6>
		{
			case DIO_PORTA:
				SET_BIT(DDRA, pin);
    16d6:	aa e3       	ldi	r26, 0x3A	; 58
    16d8:	b0 e0       	ldi	r27, 0x00	; 0
    16da:	ea e3       	ldi	r30, 0x3A	; 58
    16dc:	f0 e0       	ldi	r31, 0x00	; 0
    16de:	80 81       	ld	r24, Z
    16e0:	48 2f       	mov	r20, r24
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	81 e0       	ldi	r24, 0x01	; 1
    16ea:	90 e0       	ldi	r25, 0x00	; 0
    16ec:	02 2e       	mov	r0, r18
    16ee:	02 c0       	rjmp	.+4      	; 0x16f4 <Dio_SetPinDirection+0x7e>
    16f0:	88 0f       	add	r24, r24
    16f2:	99 1f       	adc	r25, r25
    16f4:	0a 94       	dec	r0
    16f6:	e2 f7       	brpl	.-8      	; 0x16f0 <Dio_SetPinDirection+0x7a>
    16f8:	84 2b       	or	r24, r20
    16fa:	8c 93       	st	X, r24
    16fc:	af c0       	rjmp	.+350    	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTB:
				SET_BIT(DDRB, pin);
    16fe:	a7 e3       	ldi	r26, 0x37	; 55
    1700:	b0 e0       	ldi	r27, 0x00	; 0
    1702:	e7 e3       	ldi	r30, 0x37	; 55
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	48 2f       	mov	r20, r24
    170a:	8a 81       	ldd	r24, Y+2	; 0x02
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	81 e0       	ldi	r24, 0x01	; 1
    1712:	90 e0       	ldi	r25, 0x00	; 0
    1714:	02 2e       	mov	r0, r18
    1716:	02 c0       	rjmp	.+4      	; 0x171c <Dio_SetPinDirection+0xa6>
    1718:	88 0f       	add	r24, r24
    171a:	99 1f       	adc	r25, r25
    171c:	0a 94       	dec	r0
    171e:	e2 f7       	brpl	.-8      	; 0x1718 <Dio_SetPinDirection+0xa2>
    1720:	84 2b       	or	r24, r20
    1722:	8c 93       	st	X, r24
    1724:	9b c0       	rjmp	.+310    	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTC:
				SET_BIT(DDRC, pin);
    1726:	a4 e3       	ldi	r26, 0x34	; 52
    1728:	b0 e0       	ldi	r27, 0x00	; 0
    172a:	e4 e3       	ldi	r30, 0x34	; 52
    172c:	f0 e0       	ldi	r31, 0x00	; 0
    172e:	80 81       	ld	r24, Z
    1730:	48 2f       	mov	r20, r24
    1732:	8a 81       	ldd	r24, Y+2	; 0x02
    1734:	28 2f       	mov	r18, r24
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e0       	ldi	r24, 0x01	; 1
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	02 2e       	mov	r0, r18
    173e:	02 c0       	rjmp	.+4      	; 0x1744 <Dio_SetPinDirection+0xce>
    1740:	88 0f       	add	r24, r24
    1742:	99 1f       	adc	r25, r25
    1744:	0a 94       	dec	r0
    1746:	e2 f7       	brpl	.-8      	; 0x1740 <Dio_SetPinDirection+0xca>
    1748:	84 2b       	or	r24, r20
    174a:	8c 93       	st	X, r24
    174c:	87 c0       	rjmp	.+270    	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTD:
				SET_BIT(DDRD, pin);
    174e:	a1 e3       	ldi	r26, 0x31	; 49
    1750:	b0 e0       	ldi	r27, 0x00	; 0
    1752:	e1 e3       	ldi	r30, 0x31	; 49
    1754:	f0 e0       	ldi	r31, 0x00	; 0
    1756:	80 81       	ld	r24, Z
    1758:	48 2f       	mov	r20, r24
    175a:	8a 81       	ldd	r24, Y+2	; 0x02
    175c:	28 2f       	mov	r18, r24
    175e:	30 e0       	ldi	r19, 0x00	; 0
    1760:	81 e0       	ldi	r24, 0x01	; 1
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	02 2e       	mov	r0, r18
    1766:	02 c0       	rjmp	.+4      	; 0x176c <Dio_SetPinDirection+0xf6>
    1768:	88 0f       	add	r24, r24
    176a:	99 1f       	adc	r25, r25
    176c:	0a 94       	dec	r0
    176e:	e2 f7       	brpl	.-8      	; 0x1768 <Dio_SetPinDirection+0xf2>
    1770:	84 2b       	or	r24, r20
    1772:	8c 93       	st	X, r24
    1774:	73 c0       	rjmp	.+230    	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
		}
	}
	else
	{
		switch (port)
    1776:	89 81       	ldd	r24, Y+1	; 0x01
    1778:	28 2f       	mov	r18, r24
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	3d 83       	std	Y+5, r19	; 0x05
    177e:	2c 83       	std	Y+4, r18	; 0x04
    1780:	8c 81       	ldd	r24, Y+4	; 0x04
    1782:	9d 81       	ldd	r25, Y+5	; 0x05
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	91 05       	cpc	r25, r1
    1788:	59 f1       	breq	.+86     	; 0x17e0 <Dio_SetPinDirection+0x16a>
    178a:	2c 81       	ldd	r18, Y+4	; 0x04
    178c:	3d 81       	ldd	r19, Y+5	; 0x05
    178e:	22 30       	cpi	r18, 0x02	; 2
    1790:	31 05       	cpc	r19, r1
    1792:	2c f4       	brge	.+10     	; 0x179e <Dio_SetPinDirection+0x128>
    1794:	8c 81       	ldd	r24, Y+4	; 0x04
    1796:	9d 81       	ldd	r25, Y+5	; 0x05
    1798:	00 97       	sbiw	r24, 0x00	; 0
    179a:	69 f0       	breq	.+26     	; 0x17b6 <Dio_SetPinDirection+0x140>
    179c:	5f c0       	rjmp	.+190    	; 0x185c <Dio_SetPinDirection+0x1e6>
    179e:	2c 81       	ldd	r18, Y+4	; 0x04
    17a0:	3d 81       	ldd	r19, Y+5	; 0x05
    17a2:	22 30       	cpi	r18, 0x02	; 2
    17a4:	31 05       	cpc	r19, r1
    17a6:	89 f1       	breq	.+98     	; 0x180a <Dio_SetPinDirection+0x194>
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	9d 81       	ldd	r25, Y+5	; 0x05
    17ac:	83 30       	cpi	r24, 0x03	; 3
    17ae:	91 05       	cpc	r25, r1
    17b0:	09 f4       	brne	.+2      	; 0x17b4 <Dio_SetPinDirection+0x13e>
    17b2:	40 c0       	rjmp	.+128    	; 0x1834 <Dio_SetPinDirection+0x1be>
    17b4:	53 c0       	rjmp	.+166    	; 0x185c <Dio_SetPinDirection+0x1e6>
		{
			case DIO_PORTA:
				CLEAR_BIT(DDRA, pin);
    17b6:	aa e3       	ldi	r26, 0x3A	; 58
    17b8:	b0 e0       	ldi	r27, 0x00	; 0
    17ba:	ea e3       	ldi	r30, 0x3A	; 58
    17bc:	f0 e0       	ldi	r31, 0x00	; 0
    17be:	80 81       	ld	r24, Z
    17c0:	48 2f       	mov	r20, r24
    17c2:	8a 81       	ldd	r24, Y+2	; 0x02
    17c4:	28 2f       	mov	r18, r24
    17c6:	30 e0       	ldi	r19, 0x00	; 0
    17c8:	81 e0       	ldi	r24, 0x01	; 1
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	02 2e       	mov	r0, r18
    17ce:	02 c0       	rjmp	.+4      	; 0x17d4 <Dio_SetPinDirection+0x15e>
    17d0:	88 0f       	add	r24, r24
    17d2:	99 1f       	adc	r25, r25
    17d4:	0a 94       	dec	r0
    17d6:	e2 f7       	brpl	.-8      	; 0x17d0 <Dio_SetPinDirection+0x15a>
    17d8:	80 95       	com	r24
    17da:	84 23       	and	r24, r20
    17dc:	8c 93       	st	X, r24
    17de:	3e c0       	rjmp	.+124    	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTB:
				CLEAR_BIT(DDRB, pin);
    17e0:	a7 e3       	ldi	r26, 0x37	; 55
    17e2:	b0 e0       	ldi	r27, 0x00	; 0
    17e4:	e7 e3       	ldi	r30, 0x37	; 55
    17e6:	f0 e0       	ldi	r31, 0x00	; 0
    17e8:	80 81       	ld	r24, Z
    17ea:	48 2f       	mov	r20, r24
    17ec:	8a 81       	ldd	r24, Y+2	; 0x02
    17ee:	28 2f       	mov	r18, r24
    17f0:	30 e0       	ldi	r19, 0x00	; 0
    17f2:	81 e0       	ldi	r24, 0x01	; 1
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	02 2e       	mov	r0, r18
    17f8:	02 c0       	rjmp	.+4      	; 0x17fe <Dio_SetPinDirection+0x188>
    17fa:	88 0f       	add	r24, r24
    17fc:	99 1f       	adc	r25, r25
    17fe:	0a 94       	dec	r0
    1800:	e2 f7       	brpl	.-8      	; 0x17fa <Dio_SetPinDirection+0x184>
    1802:	80 95       	com	r24
    1804:	84 23       	and	r24, r20
    1806:	8c 93       	st	X, r24
    1808:	29 c0       	rjmp	.+82     	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTC:
				CLEAR_BIT(DDRC, pin);
    180a:	a4 e3       	ldi	r26, 0x34	; 52
    180c:	b0 e0       	ldi	r27, 0x00	; 0
    180e:	e4 e3       	ldi	r30, 0x34	; 52
    1810:	f0 e0       	ldi	r31, 0x00	; 0
    1812:	80 81       	ld	r24, Z
    1814:	48 2f       	mov	r20, r24
    1816:	8a 81       	ldd	r24, Y+2	; 0x02
    1818:	28 2f       	mov	r18, r24
    181a:	30 e0       	ldi	r19, 0x00	; 0
    181c:	81 e0       	ldi	r24, 0x01	; 1
    181e:	90 e0       	ldi	r25, 0x00	; 0
    1820:	02 2e       	mov	r0, r18
    1822:	02 c0       	rjmp	.+4      	; 0x1828 <Dio_SetPinDirection+0x1b2>
    1824:	88 0f       	add	r24, r24
    1826:	99 1f       	adc	r25, r25
    1828:	0a 94       	dec	r0
    182a:	e2 f7       	brpl	.-8      	; 0x1824 <Dio_SetPinDirection+0x1ae>
    182c:	80 95       	com	r24
    182e:	84 23       	and	r24, r20
    1830:	8c 93       	st	X, r24
    1832:	14 c0       	rjmp	.+40     	; 0x185c <Dio_SetPinDirection+0x1e6>
				break;
			case DIO_PORTD:
				CLEAR_BIT(DDRD, pin);
    1834:	a1 e3       	ldi	r26, 0x31	; 49
    1836:	b0 e0       	ldi	r27, 0x00	; 0
    1838:	e1 e3       	ldi	r30, 0x31	; 49
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	48 2f       	mov	r20, r24
    1840:	8a 81       	ldd	r24, Y+2	; 0x02
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	81 e0       	ldi	r24, 0x01	; 1
    1848:	90 e0       	ldi	r25, 0x00	; 0
    184a:	02 2e       	mov	r0, r18
    184c:	02 c0       	rjmp	.+4      	; 0x1852 <Dio_SetPinDirection+0x1dc>
    184e:	88 0f       	add	r24, r24
    1850:	99 1f       	adc	r25, r25
    1852:	0a 94       	dec	r0
    1854:	e2 f7       	brpl	.-8      	; 0x184e <Dio_SetPinDirection+0x1d8>
    1856:	80 95       	com	r24
    1858:	84 23       	and	r24, r20
    185a:	8c 93       	st	X, r24
			default:
				break;
		}
	}

}
    185c:	27 96       	adiw	r28, 0x07	; 7
    185e:	0f b6       	in	r0, 0x3f	; 63
    1860:	f8 94       	cli
    1862:	de bf       	out	0x3e, r29	; 62
    1864:	0f be       	out	0x3f, r0	; 63
    1866:	cd bf       	out	0x3d, r28	; 61
    1868:	cf 91       	pop	r28
    186a:	df 91       	pop	r29
    186c:	08 95       	ret

0000186e <Dio_SetPortDirection>:

void Dio_SetPortDirection(Dio_PortType port, uint8 mode)
{
    186e:	df 93       	push	r29
    1870:	cf 93       	push	r28
    1872:	00 d0       	rcall	.+0      	; 0x1874 <Dio_SetPortDirection+0x6>
    1874:	00 d0       	rcall	.+0      	; 0x1876 <Dio_SetPortDirection+0x8>
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	89 83       	std	Y+1, r24	; 0x01
    187c:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	28 2f       	mov	r18, r24
    1882:	30 e0       	ldi	r19, 0x00	; 0
    1884:	3c 83       	std	Y+4, r19	; 0x04
    1886:	2b 83       	std	Y+3, r18	; 0x03
    1888:	8b 81       	ldd	r24, Y+3	; 0x03
    188a:	9c 81       	ldd	r25, Y+4	; 0x04
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	91 05       	cpc	r25, r1
    1890:	d1 f0       	breq	.+52     	; 0x18c6 <Dio_SetPortDirection+0x58>
    1892:	2b 81       	ldd	r18, Y+3	; 0x03
    1894:	3c 81       	ldd	r19, Y+4	; 0x04
    1896:	22 30       	cpi	r18, 0x02	; 2
    1898:	31 05       	cpc	r19, r1
    189a:	2c f4       	brge	.+10     	; 0x18a6 <Dio_SetPortDirection+0x38>
    189c:	8b 81       	ldd	r24, Y+3	; 0x03
    189e:	9c 81       	ldd	r25, Y+4	; 0x04
    18a0:	00 97       	sbiw	r24, 0x00	; 0
    18a2:	61 f0       	breq	.+24     	; 0x18bc <Dio_SetPortDirection+0x4e>
    18a4:	1e c0       	rjmp	.+60     	; 0x18e2 <Dio_SetPortDirection+0x74>
    18a6:	2b 81       	ldd	r18, Y+3	; 0x03
    18a8:	3c 81       	ldd	r19, Y+4	; 0x04
    18aa:	22 30       	cpi	r18, 0x02	; 2
    18ac:	31 05       	cpc	r19, r1
    18ae:	81 f0       	breq	.+32     	; 0x18d0 <Dio_SetPortDirection+0x62>
    18b0:	8b 81       	ldd	r24, Y+3	; 0x03
    18b2:	9c 81       	ldd	r25, Y+4	; 0x04
    18b4:	83 30       	cpi	r24, 0x03	; 3
    18b6:	91 05       	cpc	r25, r1
    18b8:	81 f0       	breq	.+32     	; 0x18da <Dio_SetPortDirection+0x6c>
    18ba:	13 c0       	rjmp	.+38     	; 0x18e2 <Dio_SetPortDirection+0x74>
	{
		case DIO_PORTA:
			DDRA = mode;
    18bc:	ea e3       	ldi	r30, 0x3A	; 58
    18be:	f0 e0       	ldi	r31, 0x00	; 0
    18c0:	8a 81       	ldd	r24, Y+2	; 0x02
    18c2:	80 83       	st	Z, r24
    18c4:	0e c0       	rjmp	.+28     	; 0x18e2 <Dio_SetPortDirection+0x74>
			break;
		case DIO_PORTB:
			DDRB = mode;
    18c6:	e7 e3       	ldi	r30, 0x37	; 55
    18c8:	f0 e0       	ldi	r31, 0x00	; 0
    18ca:	8a 81       	ldd	r24, Y+2	; 0x02
    18cc:	80 83       	st	Z, r24
    18ce:	09 c0       	rjmp	.+18     	; 0x18e2 <Dio_SetPortDirection+0x74>
			break;
		case DIO_PORTC:
			DDRC = mode;
    18d0:	e4 e3       	ldi	r30, 0x34	; 52
    18d2:	f0 e0       	ldi	r31, 0x00	; 0
    18d4:	8a 81       	ldd	r24, Y+2	; 0x02
    18d6:	80 83       	st	Z, r24
    18d8:	04 c0       	rjmp	.+8      	; 0x18e2 <Dio_SetPortDirection+0x74>
			break;
		case DIO_PORTD:
			DDRD = mode;
    18da:	e1 e3       	ldi	r30, 0x31	; 49
    18dc:	f0 e0       	ldi	r31, 0x00	; 0
    18de:	8a 81       	ldd	r24, Y+2	; 0x02
    18e0:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    18e2:	0f 90       	pop	r0
    18e4:	0f 90       	pop	r0
    18e6:	0f 90       	pop	r0
    18e8:	0f 90       	pop	r0
    18ea:	cf 91       	pop	r28
    18ec:	df 91       	pop	r29
    18ee:	08 95       	ret

000018f0 <Dio_WritePin>:


void Dio_WritePin(Dio_PortType port, Dio_PinType pin, Dio_PinStateType state)
{
    18f0:	df 93       	push	r29
    18f2:	cf 93       	push	r28
    18f4:	cd b7       	in	r28, 0x3d	; 61
    18f6:	de b7       	in	r29, 0x3e	; 62
    18f8:	27 97       	sbiw	r28, 0x07	; 7
    18fa:	0f b6       	in	r0, 0x3f	; 63
    18fc:	f8 94       	cli
    18fe:	de bf       	out	0x3e, r29	; 62
    1900:	0f be       	out	0x3f, r0	; 63
    1902:	cd bf       	out	0x3d, r28	; 61
    1904:	89 83       	std	Y+1, r24	; 0x01
    1906:	6a 83       	std	Y+2, r22	; 0x02
    1908:	4b 83       	std	Y+3, r20	; 0x03
	if (state == HIGH)
    190a:	8b 81       	ldd	r24, Y+3	; 0x03
    190c:	81 30       	cpi	r24, 0x01	; 1
    190e:	09 f0       	breq	.+2      	; 0x1912 <Dio_WritePin+0x22>
    1910:	6f c0       	rjmp	.+222    	; 0x19f0 <Dio_WritePin+0x100>
	{
		switch (port) {
    1912:	89 81       	ldd	r24, Y+1	; 0x01
    1914:	28 2f       	mov	r18, r24
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	3f 83       	std	Y+7, r19	; 0x07
    191a:	2e 83       	std	Y+6, r18	; 0x06
    191c:	8e 81       	ldd	r24, Y+6	; 0x06
    191e:	9f 81       	ldd	r25, Y+7	; 0x07
    1920:	81 30       	cpi	r24, 0x01	; 1
    1922:	91 05       	cpc	r25, r1
    1924:	49 f1       	breq	.+82     	; 0x1978 <Dio_WritePin+0x88>
    1926:	2e 81       	ldd	r18, Y+6	; 0x06
    1928:	3f 81       	ldd	r19, Y+7	; 0x07
    192a:	22 30       	cpi	r18, 0x02	; 2
    192c:	31 05       	cpc	r19, r1
    192e:	2c f4       	brge	.+10     	; 0x193a <Dio_WritePin+0x4a>
    1930:	8e 81       	ldd	r24, Y+6	; 0x06
    1932:	9f 81       	ldd	r25, Y+7	; 0x07
    1934:	00 97       	sbiw	r24, 0x00	; 0
    1936:	61 f0       	breq	.+24     	; 0x1950 <Dio_WritePin+0x60>
    1938:	ce c0       	rjmp	.+412    	; 0x1ad6 <Dio_WritePin+0x1e6>
    193a:	2e 81       	ldd	r18, Y+6	; 0x06
    193c:	3f 81       	ldd	r19, Y+7	; 0x07
    193e:	22 30       	cpi	r18, 0x02	; 2
    1940:	31 05       	cpc	r19, r1
    1942:	71 f1       	breq	.+92     	; 0x19a0 <Dio_WritePin+0xb0>
    1944:	8e 81       	ldd	r24, Y+6	; 0x06
    1946:	9f 81       	ldd	r25, Y+7	; 0x07
    1948:	83 30       	cpi	r24, 0x03	; 3
    194a:	91 05       	cpc	r25, r1
    194c:	e9 f1       	breq	.+122    	; 0x19c8 <Dio_WritePin+0xd8>
    194e:	c3 c0       	rjmp	.+390    	; 0x1ad6 <Dio_WritePin+0x1e6>
			case DIO_PORTA:
				SET_BIT(PORTA, pin);
    1950:	ab e3       	ldi	r26, 0x3B	; 59
    1952:	b0 e0       	ldi	r27, 0x00	; 0
    1954:	eb e3       	ldi	r30, 0x3B	; 59
    1956:	f0 e0       	ldi	r31, 0x00	; 0
    1958:	80 81       	ld	r24, Z
    195a:	48 2f       	mov	r20, r24
    195c:	8a 81       	ldd	r24, Y+2	; 0x02
    195e:	28 2f       	mov	r18, r24
    1960:	30 e0       	ldi	r19, 0x00	; 0
    1962:	81 e0       	ldi	r24, 0x01	; 1
    1964:	90 e0       	ldi	r25, 0x00	; 0
    1966:	02 2e       	mov	r0, r18
    1968:	02 c0       	rjmp	.+4      	; 0x196e <Dio_WritePin+0x7e>
    196a:	88 0f       	add	r24, r24
    196c:	99 1f       	adc	r25, r25
    196e:	0a 94       	dec	r0
    1970:	e2 f7       	brpl	.-8      	; 0x196a <Dio_WritePin+0x7a>
    1972:	84 2b       	or	r24, r20
    1974:	8c 93       	st	X, r24
    1976:	af c0       	rjmp	.+350    	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTB:
				SET_BIT(PORTB, pin);
    1978:	a8 e3       	ldi	r26, 0x38	; 56
    197a:	b0 e0       	ldi	r27, 0x00	; 0
    197c:	e8 e3       	ldi	r30, 0x38	; 56
    197e:	f0 e0       	ldi	r31, 0x00	; 0
    1980:	80 81       	ld	r24, Z
    1982:	48 2f       	mov	r20, r24
    1984:	8a 81       	ldd	r24, Y+2	; 0x02
    1986:	28 2f       	mov	r18, r24
    1988:	30 e0       	ldi	r19, 0x00	; 0
    198a:	81 e0       	ldi	r24, 0x01	; 1
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	02 2e       	mov	r0, r18
    1990:	02 c0       	rjmp	.+4      	; 0x1996 <Dio_WritePin+0xa6>
    1992:	88 0f       	add	r24, r24
    1994:	99 1f       	adc	r25, r25
    1996:	0a 94       	dec	r0
    1998:	e2 f7       	brpl	.-8      	; 0x1992 <Dio_WritePin+0xa2>
    199a:	84 2b       	or	r24, r20
    199c:	8c 93       	st	X, r24
    199e:	9b c0       	rjmp	.+310    	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTC:
				SET_BIT(PORTC, pin);
    19a0:	a5 e3       	ldi	r26, 0x35	; 53
    19a2:	b0 e0       	ldi	r27, 0x00	; 0
    19a4:	e5 e3       	ldi	r30, 0x35	; 53
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	80 81       	ld	r24, Z
    19aa:	48 2f       	mov	r20, r24
    19ac:	8a 81       	ldd	r24, Y+2	; 0x02
    19ae:	28 2f       	mov	r18, r24
    19b0:	30 e0       	ldi	r19, 0x00	; 0
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	02 2e       	mov	r0, r18
    19b8:	02 c0       	rjmp	.+4      	; 0x19be <Dio_WritePin+0xce>
    19ba:	88 0f       	add	r24, r24
    19bc:	99 1f       	adc	r25, r25
    19be:	0a 94       	dec	r0
    19c0:	e2 f7       	brpl	.-8      	; 0x19ba <Dio_WritePin+0xca>
    19c2:	84 2b       	or	r24, r20
    19c4:	8c 93       	st	X, r24
    19c6:	87 c0       	rjmp	.+270    	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTD:
				SET_BIT(PORTD, pin);
    19c8:	a2 e3       	ldi	r26, 0x32	; 50
    19ca:	b0 e0       	ldi	r27, 0x00	; 0
    19cc:	e2 e3       	ldi	r30, 0x32	; 50
    19ce:	f0 e0       	ldi	r31, 0x00	; 0
    19d0:	80 81       	ld	r24, Z
    19d2:	48 2f       	mov	r20, r24
    19d4:	8a 81       	ldd	r24, Y+2	; 0x02
    19d6:	28 2f       	mov	r18, r24
    19d8:	30 e0       	ldi	r19, 0x00	; 0
    19da:	81 e0       	ldi	r24, 0x01	; 1
    19dc:	90 e0       	ldi	r25, 0x00	; 0
    19de:	02 2e       	mov	r0, r18
    19e0:	02 c0       	rjmp	.+4      	; 0x19e6 <Dio_WritePin+0xf6>
    19e2:	88 0f       	add	r24, r24
    19e4:	99 1f       	adc	r25, r25
    19e6:	0a 94       	dec	r0
    19e8:	e2 f7       	brpl	.-8      	; 0x19e2 <Dio_WritePin+0xf2>
    19ea:	84 2b       	or	r24, r20
    19ec:	8c 93       	st	X, r24
    19ee:	73 c0       	rjmp	.+230    	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
		}
	}
	else
	{
		switch (port)
    19f0:	89 81       	ldd	r24, Y+1	; 0x01
    19f2:	28 2f       	mov	r18, r24
    19f4:	30 e0       	ldi	r19, 0x00	; 0
    19f6:	3d 83       	std	Y+5, r19	; 0x05
    19f8:	2c 83       	std	Y+4, r18	; 0x04
    19fa:	8c 81       	ldd	r24, Y+4	; 0x04
    19fc:	9d 81       	ldd	r25, Y+5	; 0x05
    19fe:	81 30       	cpi	r24, 0x01	; 1
    1a00:	91 05       	cpc	r25, r1
    1a02:	59 f1       	breq	.+86     	; 0x1a5a <Dio_WritePin+0x16a>
    1a04:	2c 81       	ldd	r18, Y+4	; 0x04
    1a06:	3d 81       	ldd	r19, Y+5	; 0x05
    1a08:	22 30       	cpi	r18, 0x02	; 2
    1a0a:	31 05       	cpc	r19, r1
    1a0c:	2c f4       	brge	.+10     	; 0x1a18 <Dio_WritePin+0x128>
    1a0e:	8c 81       	ldd	r24, Y+4	; 0x04
    1a10:	9d 81       	ldd	r25, Y+5	; 0x05
    1a12:	00 97       	sbiw	r24, 0x00	; 0
    1a14:	69 f0       	breq	.+26     	; 0x1a30 <Dio_WritePin+0x140>
    1a16:	5f c0       	rjmp	.+190    	; 0x1ad6 <Dio_WritePin+0x1e6>
    1a18:	2c 81       	ldd	r18, Y+4	; 0x04
    1a1a:	3d 81       	ldd	r19, Y+5	; 0x05
    1a1c:	22 30       	cpi	r18, 0x02	; 2
    1a1e:	31 05       	cpc	r19, r1
    1a20:	89 f1       	breq	.+98     	; 0x1a84 <Dio_WritePin+0x194>
    1a22:	8c 81       	ldd	r24, Y+4	; 0x04
    1a24:	9d 81       	ldd	r25, Y+5	; 0x05
    1a26:	83 30       	cpi	r24, 0x03	; 3
    1a28:	91 05       	cpc	r25, r1
    1a2a:	09 f4       	brne	.+2      	; 0x1a2e <Dio_WritePin+0x13e>
    1a2c:	40 c0       	rjmp	.+128    	; 0x1aae <Dio_WritePin+0x1be>
    1a2e:	53 c0       	rjmp	.+166    	; 0x1ad6 <Dio_WritePin+0x1e6>
		{
			case DIO_PORTA:
				CLEAR_BIT(PORTA, pin);
    1a30:	ab e3       	ldi	r26, 0x3B	; 59
    1a32:	b0 e0       	ldi	r27, 0x00	; 0
    1a34:	eb e3       	ldi	r30, 0x3B	; 59
    1a36:	f0 e0       	ldi	r31, 0x00	; 0
    1a38:	80 81       	ld	r24, Z
    1a3a:	48 2f       	mov	r20, r24
    1a3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1a3e:	28 2f       	mov	r18, r24
    1a40:	30 e0       	ldi	r19, 0x00	; 0
    1a42:	81 e0       	ldi	r24, 0x01	; 1
    1a44:	90 e0       	ldi	r25, 0x00	; 0
    1a46:	02 2e       	mov	r0, r18
    1a48:	02 c0       	rjmp	.+4      	; 0x1a4e <Dio_WritePin+0x15e>
    1a4a:	88 0f       	add	r24, r24
    1a4c:	99 1f       	adc	r25, r25
    1a4e:	0a 94       	dec	r0
    1a50:	e2 f7       	brpl	.-8      	; 0x1a4a <Dio_WritePin+0x15a>
    1a52:	80 95       	com	r24
    1a54:	84 23       	and	r24, r20
    1a56:	8c 93       	st	X, r24
    1a58:	3e c0       	rjmp	.+124    	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTB:
				CLEAR_BIT(PORTB, pin);
    1a5a:	a8 e3       	ldi	r26, 0x38	; 56
    1a5c:	b0 e0       	ldi	r27, 0x00	; 0
    1a5e:	e8 e3       	ldi	r30, 0x38	; 56
    1a60:	f0 e0       	ldi	r31, 0x00	; 0
    1a62:	80 81       	ld	r24, Z
    1a64:	48 2f       	mov	r20, r24
    1a66:	8a 81       	ldd	r24, Y+2	; 0x02
    1a68:	28 2f       	mov	r18, r24
    1a6a:	30 e0       	ldi	r19, 0x00	; 0
    1a6c:	81 e0       	ldi	r24, 0x01	; 1
    1a6e:	90 e0       	ldi	r25, 0x00	; 0
    1a70:	02 2e       	mov	r0, r18
    1a72:	02 c0       	rjmp	.+4      	; 0x1a78 <Dio_WritePin+0x188>
    1a74:	88 0f       	add	r24, r24
    1a76:	99 1f       	adc	r25, r25
    1a78:	0a 94       	dec	r0
    1a7a:	e2 f7       	brpl	.-8      	; 0x1a74 <Dio_WritePin+0x184>
    1a7c:	80 95       	com	r24
    1a7e:	84 23       	and	r24, r20
    1a80:	8c 93       	st	X, r24
    1a82:	29 c0       	rjmp	.+82     	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTC:
				CLEAR_BIT(PORTC, pin);
    1a84:	a5 e3       	ldi	r26, 0x35	; 53
    1a86:	b0 e0       	ldi	r27, 0x00	; 0
    1a88:	e5 e3       	ldi	r30, 0x35	; 53
    1a8a:	f0 e0       	ldi	r31, 0x00	; 0
    1a8c:	80 81       	ld	r24, Z
    1a8e:	48 2f       	mov	r20, r24
    1a90:	8a 81       	ldd	r24, Y+2	; 0x02
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	02 2e       	mov	r0, r18
    1a9c:	02 c0       	rjmp	.+4      	; 0x1aa2 <Dio_WritePin+0x1b2>
    1a9e:	88 0f       	add	r24, r24
    1aa0:	99 1f       	adc	r25, r25
    1aa2:	0a 94       	dec	r0
    1aa4:	e2 f7       	brpl	.-8      	; 0x1a9e <Dio_WritePin+0x1ae>
    1aa6:	80 95       	com	r24
    1aa8:	84 23       	and	r24, r20
    1aaa:	8c 93       	st	X, r24
    1aac:	14 c0       	rjmp	.+40     	; 0x1ad6 <Dio_WritePin+0x1e6>
				break;
			case DIO_PORTD:
				CLEAR_BIT(PORTD, pin);
    1aae:	a2 e3       	ldi	r26, 0x32	; 50
    1ab0:	b0 e0       	ldi	r27, 0x00	; 0
    1ab2:	e2 e3       	ldi	r30, 0x32	; 50
    1ab4:	f0 e0       	ldi	r31, 0x00	; 0
    1ab6:	80 81       	ld	r24, Z
    1ab8:	48 2f       	mov	r20, r24
    1aba:	8a 81       	ldd	r24, Y+2	; 0x02
    1abc:	28 2f       	mov	r18, r24
    1abe:	30 e0       	ldi	r19, 0x00	; 0
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	02 2e       	mov	r0, r18
    1ac6:	02 c0       	rjmp	.+4      	; 0x1acc <Dio_WritePin+0x1dc>
    1ac8:	88 0f       	add	r24, r24
    1aca:	99 1f       	adc	r25, r25
    1acc:	0a 94       	dec	r0
    1ace:	e2 f7       	brpl	.-8      	; 0x1ac8 <Dio_WritePin+0x1d8>
    1ad0:	80 95       	com	r24
    1ad2:	84 23       	and	r24, r20
    1ad4:	8c 93       	st	X, r24
				break;
			default:
				break;
		}
	}
}
    1ad6:	27 96       	adiw	r28, 0x07	; 7
    1ad8:	0f b6       	in	r0, 0x3f	; 63
    1ada:	f8 94       	cli
    1adc:	de bf       	out	0x3e, r29	; 62
    1ade:	0f be       	out	0x3f, r0	; 63
    1ae0:	cd bf       	out	0x3d, r28	; 61
    1ae2:	cf 91       	pop	r28
    1ae4:	df 91       	pop	r29
    1ae6:	08 95       	ret

00001ae8 <Dio_WritePort>:

void Dio_WritePort(Dio_PortType port, uint8 state)
{
    1ae8:	df 93       	push	r29
    1aea:	cf 93       	push	r28
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <Dio_WritePort+0x6>
    1aee:	00 d0       	rcall	.+0      	; 0x1af0 <Dio_WritePort+0x8>
    1af0:	cd b7       	in	r28, 0x3d	; 61
    1af2:	de b7       	in	r29, 0x3e	; 62
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1af8:	89 81       	ldd	r24, Y+1	; 0x01
    1afa:	28 2f       	mov	r18, r24
    1afc:	30 e0       	ldi	r19, 0x00	; 0
    1afe:	3c 83       	std	Y+4, r19	; 0x04
    1b00:	2b 83       	std	Y+3, r18	; 0x03
    1b02:	8b 81       	ldd	r24, Y+3	; 0x03
    1b04:	9c 81       	ldd	r25, Y+4	; 0x04
    1b06:	81 30       	cpi	r24, 0x01	; 1
    1b08:	91 05       	cpc	r25, r1
    1b0a:	d1 f0       	breq	.+52     	; 0x1b40 <Dio_WritePort+0x58>
    1b0c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b0e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b10:	22 30       	cpi	r18, 0x02	; 2
    1b12:	31 05       	cpc	r19, r1
    1b14:	2c f4       	brge	.+10     	; 0x1b20 <Dio_WritePort+0x38>
    1b16:	8b 81       	ldd	r24, Y+3	; 0x03
    1b18:	9c 81       	ldd	r25, Y+4	; 0x04
    1b1a:	00 97       	sbiw	r24, 0x00	; 0
    1b1c:	61 f0       	breq	.+24     	; 0x1b36 <Dio_WritePort+0x4e>
    1b1e:	1e c0       	rjmp	.+60     	; 0x1b5c <Dio_WritePort+0x74>
    1b20:	2b 81       	ldd	r18, Y+3	; 0x03
    1b22:	3c 81       	ldd	r19, Y+4	; 0x04
    1b24:	22 30       	cpi	r18, 0x02	; 2
    1b26:	31 05       	cpc	r19, r1
    1b28:	81 f0       	breq	.+32     	; 0x1b4a <Dio_WritePort+0x62>
    1b2a:	8b 81       	ldd	r24, Y+3	; 0x03
    1b2c:	9c 81       	ldd	r25, Y+4	; 0x04
    1b2e:	83 30       	cpi	r24, 0x03	; 3
    1b30:	91 05       	cpc	r25, r1
    1b32:	81 f0       	breq	.+32     	; 0x1b54 <Dio_WritePort+0x6c>
    1b34:	13 c0       	rjmp	.+38     	; 0x1b5c <Dio_WritePort+0x74>
	{
		case DIO_PORTA:
			PORTA = state;
    1b36:	eb e3       	ldi	r30, 0x3B	; 59
    1b38:	f0 e0       	ldi	r31, 0x00	; 0
    1b3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1b3c:	80 83       	st	Z, r24
    1b3e:	0e c0       	rjmp	.+28     	; 0x1b5c <Dio_WritePort+0x74>
			break;
		case DIO_PORTB:
			PORTB = state;
    1b40:	e8 e3       	ldi	r30, 0x38	; 56
    1b42:	f0 e0       	ldi	r31, 0x00	; 0
    1b44:	8a 81       	ldd	r24, Y+2	; 0x02
    1b46:	80 83       	st	Z, r24
    1b48:	09 c0       	rjmp	.+18     	; 0x1b5c <Dio_WritePort+0x74>
			break;
		case DIO_PORTC:
			PORTC = state;
    1b4a:	e5 e3       	ldi	r30, 0x35	; 53
    1b4c:	f0 e0       	ldi	r31, 0x00	; 0
    1b4e:	8a 81       	ldd	r24, Y+2	; 0x02
    1b50:	80 83       	st	Z, r24
    1b52:	04 c0       	rjmp	.+8      	; 0x1b5c <Dio_WritePort+0x74>
			break;
		case DIO_PORTD:
			PORTD = state;
    1b54:	e2 e3       	ldi	r30, 0x32	; 50
    1b56:	f0 e0       	ldi	r31, 0x00	; 0
    1b58:	8a 81       	ldd	r24, Y+2	; 0x02
    1b5a:	80 83       	st	Z, r24
			break;
		default:
			break;
	}
}
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	0f 90       	pop	r0
    1b64:	cf 91       	pop	r28
    1b66:	df 91       	pop	r29
    1b68:	08 95       	ret

00001b6a <Dio_ReadPin>:

Dio_PinStateType Dio_ReadPin(Dio_PortType port, Dio_PinType pin)
{
    1b6a:	df 93       	push	r29
    1b6c:	cf 93       	push	r28
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <Dio_ReadPin+0x6>
    1b70:	00 d0       	rcall	.+0      	; 0x1b72 <Dio_ReadPin+0x8>
    1b72:	0f 92       	push	r0
    1b74:	cd b7       	in	r28, 0x3d	; 61
    1b76:	de b7       	in	r29, 0x3e	; 62
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	28 2f       	mov	r18, r24
    1b80:	30 e0       	ldi	r19, 0x00	; 0
    1b82:	3d 83       	std	Y+5, r19	; 0x05
    1b84:	2c 83       	std	Y+4, r18	; 0x04
    1b86:	4c 81       	ldd	r20, Y+4	; 0x04
    1b88:	5d 81       	ldd	r21, Y+5	; 0x05
    1b8a:	41 30       	cpi	r20, 0x01	; 1
    1b8c:	51 05       	cpc	r21, r1
    1b8e:	49 f1       	breq	.+82     	; 0x1be2 <Dio_ReadPin+0x78>
    1b90:	8c 81       	ldd	r24, Y+4	; 0x04
    1b92:	9d 81       	ldd	r25, Y+5	; 0x05
    1b94:	82 30       	cpi	r24, 0x02	; 2
    1b96:	91 05       	cpc	r25, r1
    1b98:	34 f4       	brge	.+12     	; 0x1ba6 <Dio_ReadPin+0x3c>
    1b9a:	2c 81       	ldd	r18, Y+4	; 0x04
    1b9c:	3d 81       	ldd	r19, Y+5	; 0x05
    1b9e:	21 15       	cp	r18, r1
    1ba0:	31 05       	cpc	r19, r1
    1ba2:	61 f0       	breq	.+24     	; 0x1bbc <Dio_ReadPin+0x52>
    1ba4:	57 c0       	rjmp	.+174    	; 0x1c54 <Dio_ReadPin+0xea>
    1ba6:	4c 81       	ldd	r20, Y+4	; 0x04
    1ba8:	5d 81       	ldd	r21, Y+5	; 0x05
    1baa:	42 30       	cpi	r20, 0x02	; 2
    1bac:	51 05       	cpc	r21, r1
    1bae:	61 f1       	breq	.+88     	; 0x1c08 <Dio_ReadPin+0x9e>
    1bb0:	8c 81       	ldd	r24, Y+4	; 0x04
    1bb2:	9d 81       	ldd	r25, Y+5	; 0x05
    1bb4:	83 30       	cpi	r24, 0x03	; 3
    1bb6:	91 05       	cpc	r25, r1
    1bb8:	d1 f1       	breq	.+116    	; 0x1c2e <Dio_ReadPin+0xc4>
    1bba:	4c c0       	rjmp	.+152    	; 0x1c54 <Dio_ReadPin+0xea>
	{
		case DIO_PORTA:
			return (Dio_PinStateType)GET_BIT(PINA,pin);
    1bbc:	e9 e3       	ldi	r30, 0x39	; 57
    1bbe:	f0 e0       	ldi	r31, 0x00	; 0
    1bc0:	80 81       	ld	r24, Z
    1bc2:	28 2f       	mov	r18, r24
    1bc4:	30 e0       	ldi	r19, 0x00	; 0
    1bc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1bc8:	88 2f       	mov	r24, r24
    1bca:	90 e0       	ldi	r25, 0x00	; 0
    1bcc:	a9 01       	movw	r20, r18
    1bce:	02 c0       	rjmp	.+4      	; 0x1bd4 <Dio_ReadPin+0x6a>
    1bd0:	55 95       	asr	r21
    1bd2:	47 95       	ror	r20
    1bd4:	8a 95       	dec	r24
    1bd6:	e2 f7       	brpl	.-8      	; 0x1bd0 <Dio_ReadPin+0x66>
    1bd8:	ca 01       	movw	r24, r20
    1bda:	58 2f       	mov	r21, r24
    1bdc:	51 70       	andi	r21, 0x01	; 1
    1bde:	5b 83       	std	Y+3, r21	; 0x03
    1be0:	3a c0       	rjmp	.+116    	; 0x1c56 <Dio_ReadPin+0xec>
		case DIO_PORTB:
			return (Dio_PinStateType)GET_BIT(PINB,pin);
    1be2:	e6 e3       	ldi	r30, 0x36	; 54
    1be4:	f0 e0       	ldi	r31, 0x00	; 0
    1be6:	80 81       	ld	r24, Z
    1be8:	28 2f       	mov	r18, r24
    1bea:	30 e0       	ldi	r19, 0x00	; 0
    1bec:	8a 81       	ldd	r24, Y+2	; 0x02
    1bee:	88 2f       	mov	r24, r24
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	a9 01       	movw	r20, r18
    1bf4:	02 c0       	rjmp	.+4      	; 0x1bfa <Dio_ReadPin+0x90>
    1bf6:	55 95       	asr	r21
    1bf8:	47 95       	ror	r20
    1bfa:	8a 95       	dec	r24
    1bfc:	e2 f7       	brpl	.-8      	; 0x1bf6 <Dio_ReadPin+0x8c>
    1bfe:	ca 01       	movw	r24, r20
    1c00:	58 2f       	mov	r21, r24
    1c02:	51 70       	andi	r21, 0x01	; 1
    1c04:	5b 83       	std	Y+3, r21	; 0x03
    1c06:	27 c0       	rjmp	.+78     	; 0x1c56 <Dio_ReadPin+0xec>
		case DIO_PORTC:
			return (Dio_PinStateType)GET_BIT(PINC,pin);
    1c08:	e3 e3       	ldi	r30, 0x33	; 51
    1c0a:	f0 e0       	ldi	r31, 0x00	; 0
    1c0c:	80 81       	ld	r24, Z
    1c0e:	28 2f       	mov	r18, r24
    1c10:	30 e0       	ldi	r19, 0x00	; 0
    1c12:	8a 81       	ldd	r24, Y+2	; 0x02
    1c14:	88 2f       	mov	r24, r24
    1c16:	90 e0       	ldi	r25, 0x00	; 0
    1c18:	a9 01       	movw	r20, r18
    1c1a:	02 c0       	rjmp	.+4      	; 0x1c20 <Dio_ReadPin+0xb6>
    1c1c:	55 95       	asr	r21
    1c1e:	47 95       	ror	r20
    1c20:	8a 95       	dec	r24
    1c22:	e2 f7       	brpl	.-8      	; 0x1c1c <Dio_ReadPin+0xb2>
    1c24:	ca 01       	movw	r24, r20
    1c26:	58 2f       	mov	r21, r24
    1c28:	51 70       	andi	r21, 0x01	; 1
    1c2a:	5b 83       	std	Y+3, r21	; 0x03
    1c2c:	14 c0       	rjmp	.+40     	; 0x1c56 <Dio_ReadPin+0xec>
		case DIO_PORTD:
			return (Dio_PinStateType)GET_BIT(PIND,pin);
    1c2e:	e0 e3       	ldi	r30, 0x30	; 48
    1c30:	f0 e0       	ldi	r31, 0x00	; 0
    1c32:	80 81       	ld	r24, Z
    1c34:	28 2f       	mov	r18, r24
    1c36:	30 e0       	ldi	r19, 0x00	; 0
    1c38:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3a:	88 2f       	mov	r24, r24
    1c3c:	90 e0       	ldi	r25, 0x00	; 0
    1c3e:	a9 01       	movw	r20, r18
    1c40:	02 c0       	rjmp	.+4      	; 0x1c46 <Dio_ReadPin+0xdc>
    1c42:	55 95       	asr	r21
    1c44:	47 95       	ror	r20
    1c46:	8a 95       	dec	r24
    1c48:	e2 f7       	brpl	.-8      	; 0x1c42 <Dio_ReadPin+0xd8>
    1c4a:	ca 01       	movw	r24, r20
    1c4c:	58 2f       	mov	r21, r24
    1c4e:	51 70       	andi	r21, 0x01	; 1
    1c50:	5b 83       	std	Y+3, r21	; 0x03
    1c52:	01 c0       	rjmp	.+2      	; 0x1c56 <Dio_ReadPin+0xec>
		default:
			return 0;
    1c54:	1b 82       	std	Y+3, r1	; 0x03
    1c56:	8b 81       	ldd	r24, Y+3	; 0x03
	}
}
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	0f 90       	pop	r0
    1c60:	0f 90       	pop	r0
    1c62:	cf 91       	pop	r28
    1c64:	df 91       	pop	r29
    1c66:	08 95       	ret

00001c68 <Dio_ReadPort>:

uint8 Dio_ReadPort(Dio_PortType port)
{
    1c68:	df 93       	push	r29
    1c6a:	cf 93       	push	r28
    1c6c:	00 d0       	rcall	.+0      	; 0x1c6e <Dio_ReadPort+0x6>
    1c6e:	00 d0       	rcall	.+0      	; 0x1c70 <Dio_ReadPort+0x8>
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	89 83       	std	Y+1, r24	; 0x01
	switch (port)
    1c76:	89 81       	ldd	r24, Y+1	; 0x01
    1c78:	28 2f       	mov	r18, r24
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	3c 83       	std	Y+4, r19	; 0x04
    1c7e:	2b 83       	std	Y+3, r18	; 0x03
    1c80:	8b 81       	ldd	r24, Y+3	; 0x03
    1c82:	9c 81       	ldd	r25, Y+4	; 0x04
    1c84:	81 30       	cpi	r24, 0x01	; 1
    1c86:	91 05       	cpc	r25, r1
    1c88:	d1 f0       	breq	.+52     	; 0x1cbe <Dio_ReadPort+0x56>
    1c8a:	2b 81       	ldd	r18, Y+3	; 0x03
    1c8c:	3c 81       	ldd	r19, Y+4	; 0x04
    1c8e:	22 30       	cpi	r18, 0x02	; 2
    1c90:	31 05       	cpc	r19, r1
    1c92:	2c f4       	brge	.+10     	; 0x1c9e <Dio_ReadPort+0x36>
    1c94:	8b 81       	ldd	r24, Y+3	; 0x03
    1c96:	9c 81       	ldd	r25, Y+4	; 0x04
    1c98:	00 97       	sbiw	r24, 0x00	; 0
    1c9a:	61 f0       	breq	.+24     	; 0x1cb4 <Dio_ReadPort+0x4c>
    1c9c:	1f c0       	rjmp	.+62     	; 0x1cdc <Dio_ReadPort+0x74>
    1c9e:	2b 81       	ldd	r18, Y+3	; 0x03
    1ca0:	3c 81       	ldd	r19, Y+4	; 0x04
    1ca2:	22 30       	cpi	r18, 0x02	; 2
    1ca4:	31 05       	cpc	r19, r1
    1ca6:	81 f0       	breq	.+32     	; 0x1cc8 <Dio_ReadPort+0x60>
    1ca8:	8b 81       	ldd	r24, Y+3	; 0x03
    1caa:	9c 81       	ldd	r25, Y+4	; 0x04
    1cac:	83 30       	cpi	r24, 0x03	; 3
    1cae:	91 05       	cpc	r25, r1
    1cb0:	81 f0       	breq	.+32     	; 0x1cd2 <Dio_ReadPort+0x6a>
    1cb2:	14 c0       	rjmp	.+40     	; 0x1cdc <Dio_ReadPort+0x74>
		{
			case DIO_PORTA:
				return PINA;
    1cb4:	e9 e3       	ldi	r30, 0x39	; 57
    1cb6:	f0 e0       	ldi	r31, 0x00	; 0
    1cb8:	90 81       	ld	r25, Z
    1cba:	9a 83       	std	Y+2, r25	; 0x02
    1cbc:	10 c0       	rjmp	.+32     	; 0x1cde <Dio_ReadPort+0x76>
			case DIO_PORTB:
				return PINB;
    1cbe:	e6 e3       	ldi	r30, 0x36	; 54
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	20 81       	ld	r18, Z
    1cc4:	2a 83       	std	Y+2, r18	; 0x02
    1cc6:	0b c0       	rjmp	.+22     	; 0x1cde <Dio_ReadPort+0x76>
			case DIO_PORTC:
				return PINC;
    1cc8:	e3 e3       	ldi	r30, 0x33	; 51
    1cca:	f0 e0       	ldi	r31, 0x00	; 0
    1ccc:	30 81       	ld	r19, Z
    1cce:	3a 83       	std	Y+2, r19	; 0x02
    1cd0:	06 c0       	rjmp	.+12     	; 0x1cde <Dio_ReadPort+0x76>
			case DIO_PORTD:
				return PIND;
    1cd2:	e0 e3       	ldi	r30, 0x30	; 48
    1cd4:	f0 e0       	ldi	r31, 0x00	; 0
    1cd6:	80 81       	ld	r24, Z
    1cd8:	8a 83       	std	Y+2, r24	; 0x02
    1cda:	01 c0       	rjmp	.+2      	; 0x1cde <Dio_ReadPort+0x76>
			default:
				return 0;
    1cdc:	1a 82       	std	Y+2, r1	; 0x02
    1cde:	8a 81       	ldd	r24, Y+2	; 0x02
		}
}
    1ce0:	0f 90       	pop	r0
    1ce2:	0f 90       	pop	r0
    1ce4:	0f 90       	pop	r0
    1ce6:	0f 90       	pop	r0
    1ce8:	cf 91       	pop	r28
    1cea:	df 91       	pop	r29
    1cec:	08 95       	ret

00001cee <Dio_TogglePin>:

void Dio_TogglePin(Dio_PortType port, Dio_PinType pin)
{
    1cee:	df 93       	push	r29
    1cf0:	cf 93       	push	r28
    1cf2:	00 d0       	rcall	.+0      	; 0x1cf4 <Dio_TogglePin+0x6>
    1cf4:	00 d0       	rcall	.+0      	; 0x1cf6 <Dio_TogglePin+0x8>
    1cf6:	cd b7       	in	r28, 0x3d	; 61
    1cf8:	de b7       	in	r29, 0x3e	; 62
    1cfa:	89 83       	std	Y+1, r24	; 0x01
    1cfc:	6a 83       	std	Y+2, r22	; 0x02
	switch (port)
    1cfe:	89 81       	ldd	r24, Y+1	; 0x01
    1d00:	28 2f       	mov	r18, r24
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	3c 83       	std	Y+4, r19	; 0x04
    1d06:	2b 83       	std	Y+3, r18	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	81 30       	cpi	r24, 0x01	; 1
    1d0e:	91 05       	cpc	r25, r1
    1d10:	49 f1       	breq	.+82     	; 0x1d64 <Dio_TogglePin+0x76>
    1d12:	2b 81       	ldd	r18, Y+3	; 0x03
    1d14:	3c 81       	ldd	r19, Y+4	; 0x04
    1d16:	22 30       	cpi	r18, 0x02	; 2
    1d18:	31 05       	cpc	r19, r1
    1d1a:	2c f4       	brge	.+10     	; 0x1d26 <Dio_TogglePin+0x38>
    1d1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1d1e:	9c 81       	ldd	r25, Y+4	; 0x04
    1d20:	00 97       	sbiw	r24, 0x00	; 0
    1d22:	61 f0       	breq	.+24     	; 0x1d3c <Dio_TogglePin+0x4e>
    1d24:	5a c0       	rjmp	.+180    	; 0x1dda <Dio_TogglePin+0xec>
    1d26:	2b 81       	ldd	r18, Y+3	; 0x03
    1d28:	3c 81       	ldd	r19, Y+4	; 0x04
    1d2a:	22 30       	cpi	r18, 0x02	; 2
    1d2c:	31 05       	cpc	r19, r1
    1d2e:	71 f1       	breq	.+92     	; 0x1d8c <Dio_TogglePin+0x9e>
    1d30:	8b 81       	ldd	r24, Y+3	; 0x03
    1d32:	9c 81       	ldd	r25, Y+4	; 0x04
    1d34:	83 30       	cpi	r24, 0x03	; 3
    1d36:	91 05       	cpc	r25, r1
    1d38:	e9 f1       	breq	.+122    	; 0x1db4 <Dio_TogglePin+0xc6>
    1d3a:	4f c0       	rjmp	.+158    	; 0x1dda <Dio_TogglePin+0xec>
	{
		case DIO_PORTA:
			TOGGLE_BIT(PORTA, pin);
    1d3c:	ab e3       	ldi	r26, 0x3B	; 59
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	eb e3       	ldi	r30, 0x3B	; 59
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	48 2f       	mov	r20, r24
    1d48:	8a 81       	ldd	r24, Y+2	; 0x02
    1d4a:	28 2f       	mov	r18, r24
    1d4c:	30 e0       	ldi	r19, 0x00	; 0
    1d4e:	81 e0       	ldi	r24, 0x01	; 1
    1d50:	90 e0       	ldi	r25, 0x00	; 0
    1d52:	02 2e       	mov	r0, r18
    1d54:	02 c0       	rjmp	.+4      	; 0x1d5a <Dio_TogglePin+0x6c>
    1d56:	88 0f       	add	r24, r24
    1d58:	99 1f       	adc	r25, r25
    1d5a:	0a 94       	dec	r0
    1d5c:	e2 f7       	brpl	.-8      	; 0x1d56 <Dio_TogglePin+0x68>
    1d5e:	84 27       	eor	r24, r20
    1d60:	8c 93       	st	X, r24
    1d62:	3b c0       	rjmp	.+118    	; 0x1dda <Dio_TogglePin+0xec>
			break;
		case DIO_PORTB:
			TOGGLE_BIT(PORTB, pin);
    1d64:	a8 e3       	ldi	r26, 0x38	; 56
    1d66:	b0 e0       	ldi	r27, 0x00	; 0
    1d68:	e8 e3       	ldi	r30, 0x38	; 56
    1d6a:	f0 e0       	ldi	r31, 0x00	; 0
    1d6c:	80 81       	ld	r24, Z
    1d6e:	48 2f       	mov	r20, r24
    1d70:	8a 81       	ldd	r24, Y+2	; 0x02
    1d72:	28 2f       	mov	r18, r24
    1d74:	30 e0       	ldi	r19, 0x00	; 0
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	02 2e       	mov	r0, r18
    1d7c:	02 c0       	rjmp	.+4      	; 0x1d82 <Dio_TogglePin+0x94>
    1d7e:	88 0f       	add	r24, r24
    1d80:	99 1f       	adc	r25, r25
    1d82:	0a 94       	dec	r0
    1d84:	e2 f7       	brpl	.-8      	; 0x1d7e <Dio_TogglePin+0x90>
    1d86:	84 27       	eor	r24, r20
    1d88:	8c 93       	st	X, r24
    1d8a:	27 c0       	rjmp	.+78     	; 0x1dda <Dio_TogglePin+0xec>
			break;
		case DIO_PORTC:
			TOGGLE_BIT(PORTC, pin);
    1d8c:	a5 e3       	ldi	r26, 0x35	; 53
    1d8e:	b0 e0       	ldi	r27, 0x00	; 0
    1d90:	e5 e3       	ldi	r30, 0x35	; 53
    1d92:	f0 e0       	ldi	r31, 0x00	; 0
    1d94:	80 81       	ld	r24, Z
    1d96:	48 2f       	mov	r20, r24
    1d98:	8a 81       	ldd	r24, Y+2	; 0x02
    1d9a:	28 2f       	mov	r18, r24
    1d9c:	30 e0       	ldi	r19, 0x00	; 0
    1d9e:	81 e0       	ldi	r24, 0x01	; 1
    1da0:	90 e0       	ldi	r25, 0x00	; 0
    1da2:	02 2e       	mov	r0, r18
    1da4:	02 c0       	rjmp	.+4      	; 0x1daa <Dio_TogglePin+0xbc>
    1da6:	88 0f       	add	r24, r24
    1da8:	99 1f       	adc	r25, r25
    1daa:	0a 94       	dec	r0
    1dac:	e2 f7       	brpl	.-8      	; 0x1da6 <Dio_TogglePin+0xb8>
    1dae:	84 27       	eor	r24, r20
    1db0:	8c 93       	st	X, r24
    1db2:	13 c0       	rjmp	.+38     	; 0x1dda <Dio_TogglePin+0xec>
			break;
		case DIO_PORTD:
			TOGGLE_BIT(PORTD, pin);
    1db4:	a2 e3       	ldi	r26, 0x32	; 50
    1db6:	b0 e0       	ldi	r27, 0x00	; 0
    1db8:	e2 e3       	ldi	r30, 0x32	; 50
    1dba:	f0 e0       	ldi	r31, 0x00	; 0
    1dbc:	80 81       	ld	r24, Z
    1dbe:	48 2f       	mov	r20, r24
    1dc0:	8a 81       	ldd	r24, Y+2	; 0x02
    1dc2:	28 2f       	mov	r18, r24
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	81 e0       	ldi	r24, 0x01	; 1
    1dc8:	90 e0       	ldi	r25, 0x00	; 0
    1dca:	02 2e       	mov	r0, r18
    1dcc:	02 c0       	rjmp	.+4      	; 0x1dd2 <Dio_TogglePin+0xe4>
    1dce:	88 0f       	add	r24, r24
    1dd0:	99 1f       	adc	r25, r25
    1dd2:	0a 94       	dec	r0
    1dd4:	e2 f7       	brpl	.-8      	; 0x1dce <Dio_TogglePin+0xe0>
    1dd6:	84 27       	eor	r24, r20
    1dd8:	8c 93       	st	X, r24
			break;
		default:
			break;
	}
}
    1dda:	0f 90       	pop	r0
    1ddc:	0f 90       	pop	r0
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	cf 91       	pop	r28
    1de4:	df 91       	pop	r29
    1de6:	08 95       	ret

00001de8 <ADC_Init>:
#include "ATmega32_RegisterMap.h"
#include "ADC_Interface.h"
#include "Bit_Math.h"

void ADC_Init(void)
{
    1de8:	df 93       	push	r29
    1dea:	cf 93       	push	r28
    1dec:	cd b7       	in	r28, 0x3d	; 61
    1dee:	de b7       	in	r29, 0x3e	; 62
	CLEAR_BIT(ADMUX,REFS1_BIT);
#elif ADC_V_REF   ==   AREF_PIN
	CLEAR_BIT(ADMUX,REFS0_BIT);
	CLEAR_BIT(ADMUX,REFS1_BIT);
#elif ADC_V_REF   ==   _2V56
	SET_BIT(ADMUX,REFS0_BIT);
    1df0:	a7 e2       	ldi	r26, 0x27	; 39
    1df2:	b0 e0       	ldi	r27, 0x00	; 0
    1df4:	e7 e2       	ldi	r30, 0x27	; 39
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	80 81       	ld	r24, Z
    1dfa:	80 64       	ori	r24, 0x40	; 64
    1dfc:	8c 93       	st	X, r24
	SET_BIT(ADMUX,REFS1_BIT);
    1dfe:	a7 e2       	ldi	r26, 0x27	; 39
    1e00:	b0 e0       	ldi	r27, 0x00	; 0
    1e02:	e7 e2       	ldi	r30, 0x27	; 39
    1e04:	f0 e0       	ldi	r31, 0x00	; 0
    1e06:	80 81       	ld	r24, Z
    1e08:	80 68       	ori	r24, 0x80	; 128
    1e0a:	8c 93       	st	X, r24

	/* To select right adjustment */
	//CLEAR_BIT(ADMUX,ADLAR_BIT);

	/* To select an ADC channel */
	ADMUX = (ADMUX & 0b11100000) | ADC_CHANNEL;
    1e0c:	a7 e2       	ldi	r26, 0x27	; 39
    1e0e:	b0 e0       	ldi	r27, 0x00	; 0
    1e10:	e7 e2       	ldi	r30, 0x27	; 39
    1e12:	f0 e0       	ldi	r31, 0x00	; 0
    1e14:	80 81       	ld	r24, Z
    1e16:	80 7e       	andi	r24, 0xE0	; 224
    1e18:	8c 93       	st	X, r24

	/* To select the ADC frequency */
	ADCSRA = (ADCSRA & 0b11111000) | ADC_PRESCALER;
    1e1a:	a6 e2       	ldi	r26, 0x26	; 38
    1e1c:	b0 e0       	ldi	r27, 0x00	; 0
    1e1e:	e6 e2       	ldi	r30, 0x26	; 38
    1e20:	f0 e0       	ldi	r31, 0x00	; 0
    1e22:	80 81       	ld	r24, Z
    1e24:	88 7f       	andi	r24, 0xF8	; 248
    1e26:	86 60       	ori	r24, 0x06	; 6
    1e28:	8c 93       	st	X, r24

	/* To enable ADC circuit */
	SET_BIT(ADCSRA,ADEN_BIT);
    1e2a:	a6 e2       	ldi	r26, 0x26	; 38
    1e2c:	b0 e0       	ldi	r27, 0x00	; 0
    1e2e:	e6 e2       	ldi	r30, 0x26	; 38
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	80 81       	ld	r24, Z
    1e34:	80 68       	ori	r24, 0x80	; 128
    1e36:	8c 93       	st	X, r24
	ADCSRA = (ADCSRA & 0b11111000) | Auto_Trigger_Source;
}*/
	//SET_BIT(ADCSRA,ADCSRA_ADPS0_Bit);//F_CPU/128
	//SET_BIT(ADCSRA,ADCSRA_ADPS1_Bit);
	//SET_BIT(ADCSRA,ADCSRA_ADPS2_Bit);
}
    1e38:	cf 91       	pop	r28
    1e3a:	df 91       	pop	r29
    1e3c:	08 95       	ret

00001e3e <ADC_Read>:

int16 ADC_Read(void) {
    1e3e:	df 93       	push	r29
    1e40:	cf 93       	push	r28
    1e42:	cd b7       	in	r28, 0x3d	; 61
    1e44:	de b7       	in	r29, 0x3e	; 62
	/* To start conversion */
		SET_BIT(ADCSRA,ADSC_BIT);
    1e46:	a6 e2       	ldi	r26, 0x26	; 38
    1e48:	b0 e0       	ldi	r27, 0x00	; 0
    1e4a:	e6 e2       	ldi	r30, 0x26	; 38
    1e4c:	f0 e0       	ldi	r31, 0x00	; 0
    1e4e:	80 81       	ld	r24, Z
    1e50:	80 64       	ori	r24, 0x40	; 64
    1e52:	8c 93       	st	X, r24
		while(IS_BIT_CLEARED(ADCSRA,ADIF_BIT));
    1e54:	e6 e2       	ldi	r30, 0x26	; 38
    1e56:	f0 e0       	ldi	r31, 0x00	; 0
    1e58:	80 81       	ld	r24, Z
    1e5a:	88 2f       	mov	r24, r24
    1e5c:	90 e0       	ldi	r25, 0x00	; 0
    1e5e:	80 71       	andi	r24, 0x10	; 16
    1e60:	90 70       	andi	r25, 0x00	; 0
    1e62:	00 97       	sbiw	r24, 0x00	; 0
    1e64:	b9 f3       	breq	.-18     	; 0x1e54 <ADC_Read+0x16>
		return ADC_VALUE;
    1e66:	e4 e2       	ldi	r30, 0x24	; 36
    1e68:	f0 e0       	ldi	r31, 0x00	; 0
    1e6a:	80 81       	ld	r24, Z
    1e6c:	91 81       	ldd	r25, Z+1	; 0x01
}
    1e6e:	cf 91       	pop	r28
    1e70:	df 91       	pop	r29
    1e72:	08 95       	ret

00001e74 <SevenSeg_Init>:
#include "SevenSeg_Interface.h"
#include "Bit_Math.h"
#include "util/delay.h"

void SevenSeg_Init(void)
{
    1e74:	df 93       	push	r29
    1e76:	cf 93       	push	r28
    1e78:	cd b7       	in	r28, 0x3d	; 61
    1e7a:	de b7       	in	r29, 0x3e	; 62
	//Dio_SetPortDirection(SEVENSEG_DISPLAY_PORT, 0xF << SEVENSEG_DISPLAY_SHIFT);
	Dio_SetPinDirection(SEVENSEG_DISPLAY_PORT, PIN7, OUTPUT);//D
    1e7c:	80 e0       	ldi	r24, 0x00	; 0
    1e7e:	67 e0       	ldi	r22, 0x07	; 7
    1e80:	41 e0       	ldi	r20, 0x01	; 1
    1e82:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_SetPinDirection(SEVENSEG_DISPLAY_PORT, PIN6, OUTPUT);//C
    1e86:	80 e0       	ldi	r24, 0x00	; 0
    1e88:	66 e0       	ldi	r22, 0x06	; 6
    1e8a:	41 e0       	ldi	r20, 0x01	; 1
    1e8c:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_SetPinDirection(SEVENSEG_DISPLAY_PORT, PIN5, OUTPUT);//B
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	65 e0       	ldi	r22, 0x05	; 5
    1e94:	41 e0       	ldi	r20, 0x01	; 1
    1e96:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_SetPinDirection(SEVENSEG_DISPLAY_PORT, PIN4, OUTPUT);//A
    1e9a:	80 e0       	ldi	r24, 0x00	; 0
    1e9c:	64 e0       	ldi	r22, 0x04	; 4
    1e9e:	41 e0       	ldi	r20, 0x01	; 1
    1ea0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>

	Dio_SetPinDirection(SEVENSEG2_EN_PORT, SEVENSEG1_EN_PIN, OUTPUT);
    1ea4:	81 e0       	ldi	r24, 0x01	; 1
    1ea6:	60 e0       	ldi	r22, 0x00	; 0
    1ea8:	41 e0       	ldi	r20, 0x01	; 1
    1eaa:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>

	Dio_SetPinDirection(SEVENSEG2_EN_PORT, SEVENSEG2_EN_PIN, OUTPUT);
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	61 e0       	ldi	r22, 0x01	; 1
    1eb2:	41 e0       	ldi	r20, 0x01	; 1
    1eb4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>

}
    1eb8:	cf 91       	pop	r28
    1eba:	df 91       	pop	r29
    1ebc:	08 95       	ret

00001ebe <SevenSeg_EN_1>:

void SevenSeg_EN_1(void){
    1ebe:	df 93       	push	r29
    1ec0:	cf 93       	push	r28
    1ec2:	cd b7       	in	r28, 0x3d	; 61
    1ec4:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(SEVENSEG1_EN_PORT, SEVENSEG1_EN_PIN, HIGH);
    1ec6:	81 e0       	ldi	r24, 0x01	; 1
    1ec8:	60 e0       	ldi	r22, 0x00	; 0
    1eca:	41 e0       	ldi	r20, 0x01	; 1
    1ecc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    1ed0:	cf 91       	pop	r28
    1ed2:	df 91       	pop	r29
    1ed4:	08 95       	ret

00001ed6 <SevenSeg_EN_2>:

void SevenSeg_EN_2(void){
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(SEVENSEG2_EN_PORT, SEVENSEG2_EN_PIN, HIGH);
    1ede:	81 e0       	ldi	r24, 0x01	; 1
    1ee0:	61 e0       	ldi	r22, 0x01	; 1
    1ee2:	41 e0       	ldi	r20, 0x01	; 1
    1ee4:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    1ee8:	cf 91       	pop	r28
    1eea:	df 91       	pop	r29
    1eec:	08 95       	ret

00001eee <SevenSeg_Dis_1>:

void SevenSeg_Dis_1(void){
    1eee:	df 93       	push	r29
    1ef0:	cf 93       	push	r28
    1ef2:	cd b7       	in	r28, 0x3d	; 61
    1ef4:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(SEVENSEG1_EN_PORT, SEVENSEG1_EN_PIN, LOW);
    1ef6:	81 e0       	ldi	r24, 0x01	; 1
    1ef8:	60 e0       	ldi	r22, 0x00	; 0
    1efa:	40 e0       	ldi	r20, 0x00	; 0
    1efc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	}
    1f00:	cf 91       	pop	r28
    1f02:	df 91       	pop	r29
    1f04:	08 95       	ret

00001f06 <SevenSeg_Dis_2>:

void SevenSeg_Dis_2(void){
    1f06:	df 93       	push	r29
    1f08:	cf 93       	push	r28
    1f0a:	cd b7       	in	r28, 0x3d	; 61
    1f0c:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(SEVENSEG2_EN_PORT, SEVENSEG2_EN_PIN, LOW);
    1f0e:	81 e0       	ldi	r24, 0x01	; 1
    1f10:	61 e0       	ldi	r22, 0x01	; 1
    1f12:	40 e0       	ldi	r20, 0x00	; 0
    1f14:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	08 95       	ret

00001f1e <SevenSeg_Display>:


void SevenSeg_Display(uint8 num)
{
    1f1e:	df 93       	push	r29
    1f20:	cf 93       	push	r28
    1f22:	0f 92       	push	r0
    1f24:	cd b7       	in	r28, 0x3d	; 61
    1f26:	de b7       	in	r29, 0x3e	; 62
    1f28:	89 83       	std	Y+1, r24	; 0x01

	if (num<100)
    1f2a:	89 81       	ldd	r24, Y+1	; 0x01
    1f2c:	84 36       	cpi	r24, 0x64	; 100
    1f2e:	30 f5       	brcc	.+76     	; 0x1f7c <SevenSeg_Display+0x5e>
	{
	Dio_WritePin(SEVENSEG_DISPLAY_PORT,PIN7,GET_BIT(num,3)); //D
    1f30:	89 81       	ldd	r24, Y+1	; 0x01
    1f32:	86 95       	lsr	r24
    1f34:	86 95       	lsr	r24
    1f36:	86 95       	lsr	r24
    1f38:	98 2f       	mov	r25, r24
    1f3a:	91 70       	andi	r25, 0x01	; 1
    1f3c:	80 e0       	ldi	r24, 0x00	; 0
    1f3e:	67 e0       	ldi	r22, 0x07	; 7
    1f40:	49 2f       	mov	r20, r25
    1f42:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	Dio_WritePin(SEVENSEG_DISPLAY_PORT,PIN6,GET_BIT(num,2)); //C
    1f46:	89 81       	ldd	r24, Y+1	; 0x01
    1f48:	86 95       	lsr	r24
    1f4a:	86 95       	lsr	r24
    1f4c:	98 2f       	mov	r25, r24
    1f4e:	91 70       	andi	r25, 0x01	; 1
    1f50:	80 e0       	ldi	r24, 0x00	; 0
    1f52:	66 e0       	ldi	r22, 0x06	; 6
    1f54:	49 2f       	mov	r20, r25
    1f56:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	Dio_WritePin(SEVENSEG_DISPLAY_PORT,PIN5,GET_BIT(num,1)); //B
    1f5a:	89 81       	ldd	r24, Y+1	; 0x01
    1f5c:	86 95       	lsr	r24
    1f5e:	98 2f       	mov	r25, r24
    1f60:	91 70       	andi	r25, 0x01	; 1
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	65 e0       	ldi	r22, 0x05	; 5
    1f66:	49 2f       	mov	r20, r25
    1f68:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	Dio_WritePin(SEVENSEG_DISPLAY_PORT,PIN4,GET_BIT(num,0)); //A
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	98 2f       	mov	r25, r24
    1f70:	91 70       	andi	r25, 0x01	; 1
    1f72:	80 e0       	ldi	r24, 0x00	; 0
    1f74:	64 e0       	ldi	r22, 0x04	; 4
    1f76:	49 2f       	mov	r20, r25
    1f78:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	}
}
    1f7c:	0f 90       	pop	r0
    1f7e:	cf 91       	pop	r28
    1f80:	df 91       	pop	r29
    1f82:	08 95       	ret

00001f84 <SevenSeg>:

void SevenSeg(uint8 num)
{
    1f84:	df 93       	push	r29
    1f86:	cf 93       	push	r28
    1f88:	cd b7       	in	r28, 0x3d	; 61
    1f8a:	de b7       	in	r29, 0x3e	; 62
    1f8c:	a1 97       	sbiw	r28, 0x21	; 33
    1f8e:	0f b6       	in	r0, 0x3f	; 63
    1f90:	f8 94       	cli
    1f92:	de bf       	out	0x3e, r29	; 62
    1f94:	0f be       	out	0x3f, r0	; 63
    1f96:	cd bf       	out	0x3d, r28	; 61
    1f98:	89 a3       	std	Y+33, r24	; 0x21
	uint8 units = num % 10;
    1f9a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f9c:	9a e0       	ldi	r25, 0x0A	; 10
    1f9e:	69 2f       	mov	r22, r25
    1fa0:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__udivmodqi4>
    1fa4:	89 2f       	mov	r24, r25
    1fa6:	88 a3       	std	Y+32, r24	; 0x20
	uint8 tens = num / 10;
    1fa8:	89 a1       	ldd	r24, Y+33	; 0x21
    1faa:	9a e0       	ldi	r25, 0x0A	; 10
    1fac:	69 2f       	mov	r22, r25
    1fae:	0e 94 7f 1a 	call	0x34fe	; 0x34fe <__udivmodqi4>
    1fb2:	8f 8f       	std	Y+31, r24	; 0x1f
	uint16 counter;
	SevenSeg_Dis_1();
    1fb4:	0e 94 77 0f 	call	0x1eee	; 0x1eee <SevenSeg_Dis_1>
	SevenSeg_Dis_2();
    1fb8:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <SevenSeg_Dis_2>

	for(counter =0; counter<20; counter++)
    1fbc:	1e 8e       	std	Y+30, r1	; 0x1e
    1fbe:	1d 8e       	std	Y+29, r1	; 0x1d
    1fc0:	f7 c0       	rjmp	.+494    	; 0x21b0 <SevenSeg+0x22c>
	{
		//Dio_WritePort(SEVENSEG_DISPLAY_PORT, units << SEVENSEG_DISPLAY_SHIFT);

		SevenSeg_EN_1();
    1fc2:	0e 94 5f 0f 	call	0x1ebe	; 0x1ebe <SevenSeg_EN_1>
		SevenSeg_Display(tens);
    1fc6:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1fc8:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <SevenSeg_Display>
    1fcc:	80 e0       	ldi	r24, 0x00	; 0
    1fce:	90 e0       	ldi	r25, 0x00	; 0
    1fd0:	a0 e8       	ldi	r26, 0x80	; 128
    1fd2:	bf e3       	ldi	r27, 0x3F	; 63
    1fd4:	89 8f       	std	Y+25, r24	; 0x19
    1fd6:	9a 8f       	std	Y+26, r25	; 0x1a
    1fd8:	ab 8f       	std	Y+27, r26	; 0x1b
    1fda:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fdc:	69 8d       	ldd	r22, Y+25	; 0x19
    1fde:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1fe0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fe2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fe4:	20 e0       	ldi	r18, 0x00	; 0
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	4a e7       	ldi	r20, 0x7A	; 122
    1fea:	55 e4       	ldi	r21, 0x45	; 69
    1fec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ff0:	dc 01       	movw	r26, r24
    1ff2:	cb 01       	movw	r24, r22
    1ff4:	8d 8b       	std	Y+21, r24	; 0x15
    1ff6:	9e 8b       	std	Y+22, r25	; 0x16
    1ff8:	af 8b       	std	Y+23, r26	; 0x17
    1ffa:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ffc:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffe:	7e 89       	ldd	r23, Y+22	; 0x16
    2000:	8f 89       	ldd	r24, Y+23	; 0x17
    2002:	98 8d       	ldd	r25, Y+24	; 0x18
    2004:	20 e0       	ldi	r18, 0x00	; 0
    2006:	30 e0       	ldi	r19, 0x00	; 0
    2008:	40 e8       	ldi	r20, 0x80	; 128
    200a:	5f e3       	ldi	r21, 0x3F	; 63
    200c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2010:	88 23       	and	r24, r24
    2012:	2c f4       	brge	.+10     	; 0x201e <SevenSeg+0x9a>
		__ticks = 1;
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	90 e0       	ldi	r25, 0x00	; 0
    2018:	9c 8b       	std	Y+20, r25	; 0x14
    201a:	8b 8b       	std	Y+19, r24	; 0x13
    201c:	3f c0       	rjmp	.+126    	; 0x209c <SevenSeg+0x118>
	else if (__tmp > 65535)
    201e:	6d 89       	ldd	r22, Y+21	; 0x15
    2020:	7e 89       	ldd	r23, Y+22	; 0x16
    2022:	8f 89       	ldd	r24, Y+23	; 0x17
    2024:	98 8d       	ldd	r25, Y+24	; 0x18
    2026:	20 e0       	ldi	r18, 0x00	; 0
    2028:	3f ef       	ldi	r19, 0xFF	; 255
    202a:	4f e7       	ldi	r20, 0x7F	; 127
    202c:	57 e4       	ldi	r21, 0x47	; 71
    202e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2032:	18 16       	cp	r1, r24
    2034:	4c f5       	brge	.+82     	; 0x2088 <SevenSeg+0x104>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2036:	69 8d       	ldd	r22, Y+25	; 0x19
    2038:	7a 8d       	ldd	r23, Y+26	; 0x1a
    203a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    203c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    203e:	20 e0       	ldi	r18, 0x00	; 0
    2040:	30 e0       	ldi	r19, 0x00	; 0
    2042:	40 e2       	ldi	r20, 0x20	; 32
    2044:	51 e4       	ldi	r21, 0x41	; 65
    2046:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    204a:	dc 01       	movw	r26, r24
    204c:	cb 01       	movw	r24, r22
    204e:	bc 01       	movw	r22, r24
    2050:	cd 01       	movw	r24, r26
    2052:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	9c 8b       	std	Y+20, r25	; 0x14
    205c:	8b 8b       	std	Y+19, r24	; 0x13
    205e:	0f c0       	rjmp	.+30     	; 0x207e <SevenSeg+0xfa>
    2060:	80 e9       	ldi	r24, 0x90	; 144
    2062:	91 e0       	ldi	r25, 0x01	; 1
    2064:	9a 8b       	std	Y+18, r25	; 0x12
    2066:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2068:	89 89       	ldd	r24, Y+17	; 0x11
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	01 97       	sbiw	r24, 0x01	; 1
    206e:	f1 f7       	brne	.-4      	; 0x206c <SevenSeg+0xe8>
    2070:	9a 8b       	std	Y+18, r25	; 0x12
    2072:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2074:	8b 89       	ldd	r24, Y+19	; 0x13
    2076:	9c 89       	ldd	r25, Y+20	; 0x14
    2078:	01 97       	sbiw	r24, 0x01	; 1
    207a:	9c 8b       	std	Y+20, r25	; 0x14
    207c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    207e:	8b 89       	ldd	r24, Y+19	; 0x13
    2080:	9c 89       	ldd	r25, Y+20	; 0x14
    2082:	00 97       	sbiw	r24, 0x00	; 0
    2084:	69 f7       	brne	.-38     	; 0x2060 <SevenSeg+0xdc>
    2086:	14 c0       	rjmp	.+40     	; 0x20b0 <SevenSeg+0x12c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2088:	6d 89       	ldd	r22, Y+21	; 0x15
    208a:	7e 89       	ldd	r23, Y+22	; 0x16
    208c:	8f 89       	ldd	r24, Y+23	; 0x17
    208e:	98 8d       	ldd	r25, Y+24	; 0x18
    2090:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2094:	dc 01       	movw	r26, r24
    2096:	cb 01       	movw	r24, r22
    2098:	9c 8b       	std	Y+20, r25	; 0x14
    209a:	8b 8b       	std	Y+19, r24	; 0x13
    209c:	8b 89       	ldd	r24, Y+19	; 0x13
    209e:	9c 89       	ldd	r25, Y+20	; 0x14
    20a0:	98 8b       	std	Y+16, r25	; 0x10
    20a2:	8f 87       	std	Y+15, r24	; 0x0f
    20a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    20a6:	98 89       	ldd	r25, Y+16	; 0x10
    20a8:	01 97       	sbiw	r24, 0x01	; 1
    20aa:	f1 f7       	brne	.-4      	; 0x20a8 <SevenSeg+0x124>
    20ac:	98 8b       	std	Y+16, r25	; 0x10
    20ae:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(1);
		SevenSeg_Dis_1();
    20b0:	0e 94 77 0f 	call	0x1eee	; 0x1eee <SevenSeg_Dis_1>

		//Dio_WritePort(SEVENSEG_DISPLAY_PORT, tens << SEVENSEG_DISPLAY_SHIFT);
		SevenSeg_EN_2();
    20b4:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <SevenSeg_EN_2>
		SevenSeg_Display(units);
    20b8:	88 a1       	ldd	r24, Y+32	; 0x20
    20ba:	0e 94 8f 0f 	call	0x1f1e	; 0x1f1e <SevenSeg_Display>
    20be:	80 e0       	ldi	r24, 0x00	; 0
    20c0:	90 e0       	ldi	r25, 0x00	; 0
    20c2:	a0 e8       	ldi	r26, 0x80	; 128
    20c4:	bf e3       	ldi	r27, 0x3F	; 63
    20c6:	8b 87       	std	Y+11, r24	; 0x0b
    20c8:	9c 87       	std	Y+12, r25	; 0x0c
    20ca:	ad 87       	std	Y+13, r26	; 0x0d
    20cc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20ce:	6b 85       	ldd	r22, Y+11	; 0x0b
    20d0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20d2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20d4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20d6:	20 e0       	ldi	r18, 0x00	; 0
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	4a e7       	ldi	r20, 0x7A	; 122
    20dc:	55 e4       	ldi	r21, 0x45	; 69
    20de:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20e2:	dc 01       	movw	r26, r24
    20e4:	cb 01       	movw	r24, r22
    20e6:	8f 83       	std	Y+7, r24	; 0x07
    20e8:	98 87       	std	Y+8, r25	; 0x08
    20ea:	a9 87       	std	Y+9, r26	; 0x09
    20ec:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20ee:	6f 81       	ldd	r22, Y+7	; 0x07
    20f0:	78 85       	ldd	r23, Y+8	; 0x08
    20f2:	89 85       	ldd	r24, Y+9	; 0x09
    20f4:	9a 85       	ldd	r25, Y+10	; 0x0a
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e8       	ldi	r20, 0x80	; 128
    20fc:	5f e3       	ldi	r21, 0x3F	; 63
    20fe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2102:	88 23       	and	r24, r24
    2104:	2c f4       	brge	.+10     	; 0x2110 <SevenSeg+0x18c>
		__ticks = 1;
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	9e 83       	std	Y+6, r25	; 0x06
    210c:	8d 83       	std	Y+5, r24	; 0x05
    210e:	3f c0       	rjmp	.+126    	; 0x218e <SevenSeg+0x20a>
	else if (__tmp > 65535)
    2110:	6f 81       	ldd	r22, Y+7	; 0x07
    2112:	78 85       	ldd	r23, Y+8	; 0x08
    2114:	89 85       	ldd	r24, Y+9	; 0x09
    2116:	9a 85       	ldd	r25, Y+10	; 0x0a
    2118:	20 e0       	ldi	r18, 0x00	; 0
    211a:	3f ef       	ldi	r19, 0xFF	; 255
    211c:	4f e7       	ldi	r20, 0x7F	; 127
    211e:	57 e4       	ldi	r21, 0x47	; 71
    2120:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2124:	18 16       	cp	r1, r24
    2126:	4c f5       	brge	.+82     	; 0x217a <SevenSeg+0x1f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2128:	6b 85       	ldd	r22, Y+11	; 0x0b
    212a:	7c 85       	ldd	r23, Y+12	; 0x0c
    212c:	8d 85       	ldd	r24, Y+13	; 0x0d
    212e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2130:	20 e0       	ldi	r18, 0x00	; 0
    2132:	30 e0       	ldi	r19, 0x00	; 0
    2134:	40 e2       	ldi	r20, 0x20	; 32
    2136:	51 e4       	ldi	r21, 0x41	; 65
    2138:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    213c:	dc 01       	movw	r26, r24
    213e:	cb 01       	movw	r24, r22
    2140:	bc 01       	movw	r22, r24
    2142:	cd 01       	movw	r24, r26
    2144:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2148:	dc 01       	movw	r26, r24
    214a:	cb 01       	movw	r24, r22
    214c:	9e 83       	std	Y+6, r25	; 0x06
    214e:	8d 83       	std	Y+5, r24	; 0x05
    2150:	0f c0       	rjmp	.+30     	; 0x2170 <SevenSeg+0x1ec>
    2152:	80 e9       	ldi	r24, 0x90	; 144
    2154:	91 e0       	ldi	r25, 0x01	; 1
    2156:	9c 83       	std	Y+4, r25	; 0x04
    2158:	8b 83       	std	Y+3, r24	; 0x03
    215a:	8b 81       	ldd	r24, Y+3	; 0x03
    215c:	9c 81       	ldd	r25, Y+4	; 0x04
    215e:	01 97       	sbiw	r24, 0x01	; 1
    2160:	f1 f7       	brne	.-4      	; 0x215e <SevenSeg+0x1da>
    2162:	9c 83       	std	Y+4, r25	; 0x04
    2164:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2166:	8d 81       	ldd	r24, Y+5	; 0x05
    2168:	9e 81       	ldd	r25, Y+6	; 0x06
    216a:	01 97       	sbiw	r24, 0x01	; 1
    216c:	9e 83       	std	Y+6, r25	; 0x06
    216e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2170:	8d 81       	ldd	r24, Y+5	; 0x05
    2172:	9e 81       	ldd	r25, Y+6	; 0x06
    2174:	00 97       	sbiw	r24, 0x00	; 0
    2176:	69 f7       	brne	.-38     	; 0x2152 <SevenSeg+0x1ce>
    2178:	14 c0       	rjmp	.+40     	; 0x21a2 <SevenSeg+0x21e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    217a:	6f 81       	ldd	r22, Y+7	; 0x07
    217c:	78 85       	ldd	r23, Y+8	; 0x08
    217e:	89 85       	ldd	r24, Y+9	; 0x09
    2180:	9a 85       	ldd	r25, Y+10	; 0x0a
    2182:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2186:	dc 01       	movw	r26, r24
    2188:	cb 01       	movw	r24, r22
    218a:	9e 83       	std	Y+6, r25	; 0x06
    218c:	8d 83       	std	Y+5, r24	; 0x05
    218e:	8d 81       	ldd	r24, Y+5	; 0x05
    2190:	9e 81       	ldd	r25, Y+6	; 0x06
    2192:	9a 83       	std	Y+2, r25	; 0x02
    2194:	89 83       	std	Y+1, r24	; 0x01
    2196:	89 81       	ldd	r24, Y+1	; 0x01
    2198:	9a 81       	ldd	r25, Y+2	; 0x02
    219a:	01 97       	sbiw	r24, 0x01	; 1
    219c:	f1 f7       	brne	.-4      	; 0x219a <SevenSeg+0x216>
    219e:	9a 83       	std	Y+2, r25	; 0x02
    21a0:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1);
		SevenSeg_Dis_2();
    21a2:	0e 94 83 0f 	call	0x1f06	; 0x1f06 <SevenSeg_Dis_2>
	uint8 tens = num / 10;
	uint16 counter;
	SevenSeg_Dis_1();
	SevenSeg_Dis_2();

	for(counter =0; counter<20; counter++)
    21a6:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21a8:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21aa:	01 96       	adiw	r24, 0x01	; 1
    21ac:	9e 8f       	std	Y+30, r25	; 0x1e
    21ae:	8d 8f       	std	Y+29, r24	; 0x1d
    21b0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    21b2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    21b4:	84 31       	cpi	r24, 0x14	; 20
    21b6:	91 05       	cpc	r25, r1
    21b8:	08 f4       	brcc	.+2      	; 0x21bc <SevenSeg+0x238>
    21ba:	03 cf       	rjmp	.-506    	; 0x1fc2 <SevenSeg+0x3e>
		_delay_ms(1);
		SevenSeg_Dis_2();


	}
}
    21bc:	a1 96       	adiw	r28, 0x21	; 33
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	de bf       	out	0x3e, r29	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	cd bf       	out	0x3d, r28	; 61
    21c8:	cf 91       	pop	r28
    21ca:	df 91       	pop	r29
    21cc:	08 95       	ret

000021ce <Relay_Init>:
#include "DIO_Interface.h"
#include "Relay_Interface.h"


void Relay_Init(void)
{
    21ce:	df 93       	push	r29
    21d0:	cf 93       	push	r28
    21d2:	cd b7       	in	r28, 0x3d	; 61
    21d4:	de b7       	in	r29, 0x3e	; 62
	//RELAY1
	Dio_SetPinDirection(DIO_PORTA,PIN2,OUTPUT);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_WritePin(DIO_PORTA,PIN2,LOW);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	62 e0       	ldi	r22, 0x02	; 2
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	//RELAY2
	Dio_SetPinDirection(DIO_PORTC,PIN3,OUTPUT);
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	63 e0       	ldi	r22, 0x03	; 3
    21ee:	41 e0       	ldi	r20, 0x01	; 1
    21f0:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_WritePin(DIO_PORTC,PIN3,LOW);
    21f4:	82 e0       	ldi	r24, 0x02	; 2
    21f6:	63 e0       	ldi	r22, 0x03	; 3
    21f8:	40 e0       	ldi	r20, 0x00	; 0
    21fa:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    21fe:	cf 91       	pop	r28
    2200:	df 91       	pop	r29
    2202:	08 95       	ret

00002204 <Relay1_switchON>:

void Relay1_switchON()
{
    2204:	df 93       	push	r29
    2206:	cf 93       	push	r28
    2208:	cd b7       	in	r28, 0x3d	; 61
    220a:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(DIO_PORTA,PIN2,HIGH);
    220c:	80 e0       	ldi	r24, 0x00	; 0
    220e:	62 e0       	ldi	r22, 0x02	; 2
    2210:	41 e0       	ldi	r20, 0x01	; 1
    2212:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    2216:	cf 91       	pop	r28
    2218:	df 91       	pop	r29
    221a:	08 95       	ret

0000221c <Relay1_switchOFF>:
void Relay1_switchOFF()
{
    221c:	df 93       	push	r29
    221e:	cf 93       	push	r28
    2220:	cd b7       	in	r28, 0x3d	; 61
    2222:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(DIO_PORTA,PIN2,LOW);
    2224:	80 e0       	ldi	r24, 0x00	; 0
    2226:	62 e0       	ldi	r22, 0x02	; 2
    2228:	40 e0       	ldi	r20, 0x00	; 0
    222a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    222e:	cf 91       	pop	r28
    2230:	df 91       	pop	r29
    2232:	08 95       	ret

00002234 <Relay2_switchON>:
void Relay2_switchON()
{
    2234:	df 93       	push	r29
    2236:	cf 93       	push	r28
    2238:	cd b7       	in	r28, 0x3d	; 61
    223a:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(DIO_PORTC,PIN3,HIGH);
    223c:	82 e0       	ldi	r24, 0x02	; 2
    223e:	63 e0       	ldi	r22, 0x03	; 3
    2240:	41 e0       	ldi	r20, 0x01	; 1
    2242:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    2246:	cf 91       	pop	r28
    2248:	df 91       	pop	r29
    224a:	08 95       	ret

0000224c <Relay2_switchOFF>:
void Relay2_switchOFF()
{
    224c:	df 93       	push	r29
    224e:	cf 93       	push	r28
    2250:	cd b7       	in	r28, 0x3d	; 61
    2252:	de b7       	in	r29, 0x3e	; 62
	Dio_WritePin(DIO_PORTC,PIN3,LOW);
    2254:	82 e0       	ldi	r24, 0x02	; 2
    2256:	63 e0       	ldi	r22, 0x03	; 3
    2258:	40 e0       	ldi	r20, 0x00	; 0
    225a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
}
    225e:	cf 91       	pop	r28
    2260:	df 91       	pop	r29
    2262:	08 95       	ret

00002264 <Peltier_Init>:

#include "Peltier_Interface.h"
#include "Relay_Interface.h"

void Peltier_Init(void)
{
    2264:	df 93       	push	r29
    2266:	cf 93       	push	r28
    2268:	cd b7       	in	r28, 0x3d	; 61
    226a:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(DIO_PORTC,PIN3,OUTPUT); //same as RELAY_2
    226c:	82 e0       	ldi	r24, 0x02	; 2
    226e:	63 e0       	ldi	r22, 0x03	; 3
    2270:	41 e0       	ldi	r20, 0x01	; 1
    2272:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Peltier_SetMode(PELTIER_UNDEFINED_MODE);
    2276:	82 e0       	ldi	r24, 0x02	; 2
    2278:	0e 94 41 11 	call	0x2282	; 0x2282 <Peltier_SetMode>
}
    227c:	cf 91       	pop	r28
    227e:	df 91       	pop	r29
    2280:	08 95       	ret

00002282 <Peltier_SetMode>:

void Peltier_SetMode(Peltier_ModeType PeltierMode)
{
    2282:	df 93       	push	r29
    2284:	cf 93       	push	r28
    2286:	00 d0       	rcall	.+0      	; 0x2288 <Peltier_SetMode+0x6>
    2288:	0f 92       	push	r0
    228a:	cd b7       	in	r28, 0x3d	; 61
    228c:	de b7       	in	r29, 0x3e	; 62
    228e:	89 83       	std	Y+1, r24	; 0x01
	switch(PeltierMode)
    2290:	89 81       	ldd	r24, Y+1	; 0x01
    2292:	28 2f       	mov	r18, r24
    2294:	30 e0       	ldi	r19, 0x00	; 0
    2296:	3b 83       	std	Y+3, r19	; 0x03
    2298:	2a 83       	std	Y+2, r18	; 0x02
    229a:	8a 81       	ldd	r24, Y+2	; 0x02
    229c:	9b 81       	ldd	r25, Y+3	; 0x03
    229e:	00 97       	sbiw	r24, 0x00	; 0
    22a0:	41 f0       	breq	.+16     	; 0x22b2 <Peltier_SetMode+0x30>
    22a2:	2a 81       	ldd	r18, Y+2	; 0x02
    22a4:	3b 81       	ldd	r19, Y+3	; 0x03
    22a6:	21 30       	cpi	r18, 0x01	; 1
    22a8:	31 05       	cpc	r19, r1
    22aa:	29 f4       	brne	.+10     	; 0x22b6 <Peltier_SetMode+0x34>
	{
		case (PELTIER_ON_MODE):
		{
			Relay2_switchON();
    22ac:	0e 94 1a 11 	call	0x2234	; 0x2234 <Relay2_switchON>
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <Peltier_SetMode+0x34>
			break;
		}
		case (PELTIER_OFF_MODE):
		{
			Relay2_switchOFF();
    22b2:	0e 94 26 11 	call	0x224c	; 0x224c <Relay2_switchOFF>
			break;
		}
		default: {}
	}

}
    22b6:	0f 90       	pop	r0
    22b8:	0f 90       	pop	r0
    22ba:	0f 90       	pop	r0
    22bc:	cf 91       	pop	r28
    22be:	df 91       	pop	r29
    22c0:	08 95       	ret

000022c2 <Led_Init>:
#include "Led_Interface.h"
#include "DIO_Interface.h"

void Led_Init(LedType led)
{
    22c2:	df 93       	push	r29
    22c4:	cf 93       	push	r28
    22c6:	00 d0       	rcall	.+0      	; 0x22c8 <Led_Init+0x6>
    22c8:	0f 92       	push	r0
    22ca:	cd b7       	in	r28, 0x3d	; 61
    22cc:	de b7       	in	r29, 0x3e	; 62
    22ce:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
    22d2:	28 2f       	mov	r18, r24
    22d4:	30 e0       	ldi	r19, 0x00	; 0
    22d6:	3b 83       	std	Y+3, r19	; 0x03
    22d8:	2a 83       	std	Y+2, r18	; 0x02
    22da:	8a 81       	ldd	r24, Y+2	; 0x02
    22dc:	9b 81       	ldd	r25, Y+3	; 0x03
    22de:	81 30       	cpi	r24, 0x01	; 1
    22e0:	91 05       	cpc	r25, r1
    22e2:	79 f0       	breq	.+30     	; 0x2302 <Led_Init+0x40>
    22e4:	2a 81       	ldd	r18, Y+2	; 0x02
    22e6:	3b 81       	ldd	r19, Y+3	; 0x03
    22e8:	22 30       	cpi	r18, 0x02	; 2
    22ea:	31 05       	cpc	r19, r1
    22ec:	81 f0       	breq	.+32     	; 0x230e <Led_Init+0x4c>
    22ee:	8a 81       	ldd	r24, Y+2	; 0x02
    22f0:	9b 81       	ldd	r25, Y+3	; 0x03
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	89 f4       	brne	.+34     	; 0x2318 <Led_Init+0x56>
	{
		case LED0:
			Dio_SetPinDirection(LED0_PORT, LED0_PIN, OUTPUT);
    22f6:	82 e0       	ldi	r24, 0x02	; 2
    22f8:	62 e0       	ldi	r22, 0x02	; 2
    22fa:	41 e0       	ldi	r20, 0x01	; 1
    22fc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
    2300:	0b c0       	rjmp	.+22     	; 0x2318 <Led_Init+0x56>
			break;
		case LED1:
			Dio_SetPinDirection(LED1_PORT, LED1_PIN, OUTPUT);
    2302:	82 e0       	ldi	r24, 0x02	; 2
    2304:	67 e0       	ldi	r22, 0x07	; 7
    2306:	41 e0       	ldi	r20, 0x01	; 1
    2308:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
    230c:	05 c0       	rjmp	.+10     	; 0x2318 <Led_Init+0x56>
			break;
		case LED2:
			Dio_SetPinDirection(LED2_PORT, LED2_PIN, OUTPUT);
    230e:	83 e0       	ldi	r24, 0x03	; 3
    2310:	66 e0       	ldi	r22, 0x06	; 6
    2312:	41 e0       	ldi	r20, 0x01	; 1
    2314:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
			break;
	}
}
    2318:	0f 90       	pop	r0
    231a:	0f 90       	pop	r0
    231c:	0f 90       	pop	r0
    231e:	cf 91       	pop	r28
    2320:	df 91       	pop	r29
    2322:	08 95       	ret

00002324 <Led_On>:

void Led_On(LedType led)
{
    2324:	df 93       	push	r29
    2326:	cf 93       	push	r28
    2328:	00 d0       	rcall	.+0      	; 0x232a <Led_On+0x6>
    232a:	0f 92       	push	r0
    232c:	cd b7       	in	r28, 0x3d	; 61
    232e:	de b7       	in	r29, 0x3e	; 62
    2330:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    2332:	89 81       	ldd	r24, Y+1	; 0x01
    2334:	28 2f       	mov	r18, r24
    2336:	30 e0       	ldi	r19, 0x00	; 0
    2338:	3b 83       	std	Y+3, r19	; 0x03
    233a:	2a 83       	std	Y+2, r18	; 0x02
    233c:	8a 81       	ldd	r24, Y+2	; 0x02
    233e:	9b 81       	ldd	r25, Y+3	; 0x03
    2340:	81 30       	cpi	r24, 0x01	; 1
    2342:	91 05       	cpc	r25, r1
    2344:	79 f0       	breq	.+30     	; 0x2364 <Led_On+0x40>
    2346:	2a 81       	ldd	r18, Y+2	; 0x02
    2348:	3b 81       	ldd	r19, Y+3	; 0x03
    234a:	22 30       	cpi	r18, 0x02	; 2
    234c:	31 05       	cpc	r19, r1
    234e:	81 f0       	breq	.+32     	; 0x2370 <Led_On+0x4c>
    2350:	8a 81       	ldd	r24, Y+2	; 0x02
    2352:	9b 81       	ldd	r25, Y+3	; 0x03
    2354:	00 97       	sbiw	r24, 0x00	; 0
    2356:	89 f4       	brne	.+34     	; 0x237a <Led_On+0x56>
	{
		case LED0:
			Dio_WritePin(LED0_PORT, LED0_PIN, HIGH);
    2358:	82 e0       	ldi	r24, 0x02	; 2
    235a:	62 e0       	ldi	r22, 0x02	; 2
    235c:	41 e0       	ldi	r20, 0x01	; 1
    235e:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    2362:	0b c0       	rjmp	.+22     	; 0x237a <Led_On+0x56>
			break;
		case LED1:
			Dio_WritePin(LED1_PORT, LED1_PIN, HIGH);
    2364:	82 e0       	ldi	r24, 0x02	; 2
    2366:	67 e0       	ldi	r22, 0x07	; 7
    2368:	41 e0       	ldi	r20, 0x01	; 1
    236a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    236e:	05 c0       	rjmp	.+10     	; 0x237a <Led_On+0x56>
			break;
		case LED2:
			Dio_WritePin(LED2_PORT, LED2_PIN, HIGH);
    2370:	83 e0       	ldi	r24, 0x03	; 3
    2372:	66 e0       	ldi	r22, 0x06	; 6
    2374:	41 e0       	ldi	r20, 0x01	; 1
    2376:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
			break;
		default:
			break;
	}
}
    237a:	0f 90       	pop	r0
    237c:	0f 90       	pop	r0
    237e:	0f 90       	pop	r0
    2380:	cf 91       	pop	r28
    2382:	df 91       	pop	r29
    2384:	08 95       	ret

00002386 <Led_Off>:

void Led_Off(LedType led)
{
    2386:	df 93       	push	r29
    2388:	cf 93       	push	r28
    238a:	00 d0       	rcall	.+0      	; 0x238c <Led_Off+0x6>
    238c:	0f 92       	push	r0
    238e:	cd b7       	in	r28, 0x3d	; 61
    2390:	de b7       	in	r29, 0x3e	; 62
    2392:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    2394:	89 81       	ldd	r24, Y+1	; 0x01
    2396:	28 2f       	mov	r18, r24
    2398:	30 e0       	ldi	r19, 0x00	; 0
    239a:	3b 83       	std	Y+3, r19	; 0x03
    239c:	2a 83       	std	Y+2, r18	; 0x02
    239e:	8a 81       	ldd	r24, Y+2	; 0x02
    23a0:	9b 81       	ldd	r25, Y+3	; 0x03
    23a2:	81 30       	cpi	r24, 0x01	; 1
    23a4:	91 05       	cpc	r25, r1
    23a6:	79 f0       	breq	.+30     	; 0x23c6 <Led_Off+0x40>
    23a8:	2a 81       	ldd	r18, Y+2	; 0x02
    23aa:	3b 81       	ldd	r19, Y+3	; 0x03
    23ac:	22 30       	cpi	r18, 0x02	; 2
    23ae:	31 05       	cpc	r19, r1
    23b0:	81 f0       	breq	.+32     	; 0x23d2 <Led_Off+0x4c>
    23b2:	8a 81       	ldd	r24, Y+2	; 0x02
    23b4:	9b 81       	ldd	r25, Y+3	; 0x03
    23b6:	00 97       	sbiw	r24, 0x00	; 0
    23b8:	89 f4       	brne	.+34     	; 0x23dc <Led_Off+0x56>
	{
		case LED0:
			Dio_WritePin(LED0_PORT, LED0_PIN, LOW);
    23ba:	82 e0       	ldi	r24, 0x02	; 2
    23bc:	62 e0       	ldi	r22, 0x02	; 2
    23be:	40 e0       	ldi	r20, 0x00	; 0
    23c0:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    23c4:	0b c0       	rjmp	.+22     	; 0x23dc <Led_Off+0x56>
			break;
		case LED1:
			Dio_WritePin(LED1_PORT, LED1_PIN, LOW);
    23c6:	82 e0       	ldi	r24, 0x02	; 2
    23c8:	67 e0       	ldi	r22, 0x07	; 7
    23ca:	40 e0       	ldi	r20, 0x00	; 0
    23cc:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    23d0:	05 c0       	rjmp	.+10     	; 0x23dc <Led_Off+0x56>
			break;
		case LED2:
			Dio_WritePin(LED2_PORT, LED2_PIN, LOW);
    23d2:	83 e0       	ldi	r24, 0x03	; 3
    23d4:	66 e0       	ldi	r22, 0x06	; 6
    23d6:	40 e0       	ldi	r20, 0x00	; 0
    23d8:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
			break;
		default:
			break;
	}
}
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0f 90       	pop	r0
    23e2:	cf 91       	pop	r28
    23e4:	df 91       	pop	r29
    23e6:	08 95       	ret

000023e8 <Led_Toggle>:

void Led_Toggle(LedType led)
{
    23e8:	df 93       	push	r29
    23ea:	cf 93       	push	r28
    23ec:	00 d0       	rcall	.+0      	; 0x23ee <Led_Toggle+0x6>
    23ee:	0f 92       	push	r0
    23f0:	cd b7       	in	r28, 0x3d	; 61
    23f2:	de b7       	in	r29, 0x3e	; 62
    23f4:	89 83       	std	Y+1, r24	; 0x01
	switch(led)
    23f6:	89 81       	ldd	r24, Y+1	; 0x01
    23f8:	28 2f       	mov	r18, r24
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	3b 83       	std	Y+3, r19	; 0x03
    23fe:	2a 83       	std	Y+2, r18	; 0x02
    2400:	8a 81       	ldd	r24, Y+2	; 0x02
    2402:	9b 81       	ldd	r25, Y+3	; 0x03
    2404:	81 30       	cpi	r24, 0x01	; 1
    2406:	91 05       	cpc	r25, r1
    2408:	71 f0       	breq	.+28     	; 0x2426 <Led_Toggle+0x3e>
    240a:	2a 81       	ldd	r18, Y+2	; 0x02
    240c:	3b 81       	ldd	r19, Y+3	; 0x03
    240e:	22 30       	cpi	r18, 0x02	; 2
    2410:	31 05       	cpc	r19, r1
    2412:	71 f0       	breq	.+28     	; 0x2430 <Led_Toggle+0x48>
    2414:	8a 81       	ldd	r24, Y+2	; 0x02
    2416:	9b 81       	ldd	r25, Y+3	; 0x03
    2418:	00 97       	sbiw	r24, 0x00	; 0
    241a:	71 f4       	brne	.+28     	; 0x2438 <Led_Toggle+0x50>
	{
		case LED0:
			Dio_TogglePin(LED0_PORT, LED0_PIN);
    241c:	82 e0       	ldi	r24, 0x02	; 2
    241e:	62 e0       	ldi	r22, 0x02	; 2
    2420:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Dio_TogglePin>
    2424:	09 c0       	rjmp	.+18     	; 0x2438 <Led_Toggle+0x50>
			break;
		case LED1:
			Dio_TogglePin(LED1_PORT, LED1_PIN);
    2426:	82 e0       	ldi	r24, 0x02	; 2
    2428:	67 e0       	ldi	r22, 0x07	; 7
    242a:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Dio_TogglePin>
    242e:	04 c0       	rjmp	.+8      	; 0x2438 <Led_Toggle+0x50>
			break;
		case LED2:
			Dio_TogglePin(LED2_PORT, LED2_PIN);
    2430:	83 e0       	ldi	r24, 0x03	; 3
    2432:	66 e0       	ldi	r22, 0x06	; 6
    2434:	0e 94 77 0e 	call	0x1cee	; 0x1cee <Dio_TogglePin>
			break;
		default:
			break;
	}
}
    2438:	0f 90       	pop	r0
    243a:	0f 90       	pop	r0
    243c:	0f 90       	pop	r0
    243e:	cf 91       	pop	r28
    2440:	df 91       	pop	r29
    2442:	08 95       	ret

00002444 <Led_Blink>:

void Led_Blink()
	{
    2444:	df 93       	push	r29
    2446:	cf 93       	push	r28
    2448:	cd b7       	in	r28, 0x3d	; 61
    244a:	de b7       	in	r29, 0x3e	; 62
    244c:	6c 97       	sbiw	r28, 0x1c	; 28
    244e:	0f b6       	in	r0, 0x3f	; 63
    2450:	f8 94       	cli
    2452:	de bf       	out	0x3e, r29	; 62
    2454:	0f be       	out	0x3f, r0	; 63
    2456:	cd bf       	out	0x3d, r28	; 61
		while(1)
			{
				Led_On(LED1);
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	0e 94 92 11 	call	0x2324	; 0x2324 <Led_On>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	aa e7       	ldi	r26, 0x7A	; 122
    2464:	b4 e4       	ldi	r27, 0x44	; 68
    2466:	89 8f       	std	Y+25, r24	; 0x19
    2468:	9a 8f       	std	Y+26, r25	; 0x1a
    246a:	ab 8f       	std	Y+27, r26	; 0x1b
    246c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246e:	69 8d       	ldd	r22, Y+25	; 0x19
    2470:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2472:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2474:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2476:	20 e0       	ldi	r18, 0x00	; 0
    2478:	30 e0       	ldi	r19, 0x00	; 0
    247a:	4a e7       	ldi	r20, 0x7A	; 122
    247c:	55 e4       	ldi	r21, 0x45	; 69
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8d 8b       	std	Y+21, r24	; 0x15
    2488:	9e 8b       	std	Y+22, r25	; 0x16
    248a:	af 8b       	std	Y+23, r26	; 0x17
    248c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    248e:	6d 89       	ldd	r22, Y+21	; 0x15
    2490:	7e 89       	ldd	r23, Y+22	; 0x16
    2492:	8f 89       	ldd	r24, Y+23	; 0x17
    2494:	98 8d       	ldd	r25, Y+24	; 0x18
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	2c f4       	brge	.+10     	; 0x24b0 <Led_Blink+0x6c>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	90 e0       	ldi	r25, 0x00	; 0
    24aa:	9c 8b       	std	Y+20, r25	; 0x14
    24ac:	8b 8b       	std	Y+19, r24	; 0x13
    24ae:	3f c0       	rjmp	.+126    	; 0x252e <Led_Blink+0xea>
	else if (__tmp > 65535)
    24b0:	6d 89       	ldd	r22, Y+21	; 0x15
    24b2:	7e 89       	ldd	r23, Y+22	; 0x16
    24b4:	8f 89       	ldd	r24, Y+23	; 0x17
    24b6:	98 8d       	ldd	r25, Y+24	; 0x18
    24b8:	20 e0       	ldi	r18, 0x00	; 0
    24ba:	3f ef       	ldi	r19, 0xFF	; 255
    24bc:	4f e7       	ldi	r20, 0x7F	; 127
    24be:	57 e4       	ldi	r21, 0x47	; 71
    24c0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c4:	18 16       	cp	r1, r24
    24c6:	4c f5       	brge	.+82     	; 0x251a <Led_Blink+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c8:	69 8d       	ldd	r22, Y+25	; 0x19
    24ca:	7a 8d       	ldd	r23, Y+26	; 0x1a
    24cc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    24ce:	9c 8d       	ldd	r25, Y+28	; 0x1c
    24d0:	20 e0       	ldi	r18, 0x00	; 0
    24d2:	30 e0       	ldi	r19, 0x00	; 0
    24d4:	40 e2       	ldi	r20, 0x20	; 32
    24d6:	51 e4       	ldi	r21, 0x41	; 65
    24d8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24dc:	dc 01       	movw	r26, r24
    24de:	cb 01       	movw	r24, r22
    24e0:	bc 01       	movw	r22, r24
    24e2:	cd 01       	movw	r24, r26
    24e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24e8:	dc 01       	movw	r26, r24
    24ea:	cb 01       	movw	r24, r22
    24ec:	9c 8b       	std	Y+20, r25	; 0x14
    24ee:	8b 8b       	std	Y+19, r24	; 0x13
    24f0:	0f c0       	rjmp	.+30     	; 0x2510 <Led_Blink+0xcc>
    24f2:	80 e9       	ldi	r24, 0x90	; 144
    24f4:	91 e0       	ldi	r25, 0x01	; 1
    24f6:	9a 8b       	std	Y+18, r25	; 0x12
    24f8:	89 8b       	std	Y+17, r24	; 0x11
    24fa:	89 89       	ldd	r24, Y+17	; 0x11
    24fc:	9a 89       	ldd	r25, Y+18	; 0x12
    24fe:	01 97       	sbiw	r24, 0x01	; 1
    2500:	f1 f7       	brne	.-4      	; 0x24fe <Led_Blink+0xba>
    2502:	9a 8b       	std	Y+18, r25	; 0x12
    2504:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2506:	8b 89       	ldd	r24, Y+19	; 0x13
    2508:	9c 89       	ldd	r25, Y+20	; 0x14
    250a:	01 97       	sbiw	r24, 0x01	; 1
    250c:	9c 8b       	std	Y+20, r25	; 0x14
    250e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2510:	8b 89       	ldd	r24, Y+19	; 0x13
    2512:	9c 89       	ldd	r25, Y+20	; 0x14
    2514:	00 97       	sbiw	r24, 0x00	; 0
    2516:	69 f7       	brne	.-38     	; 0x24f2 <Led_Blink+0xae>
    2518:	14 c0       	rjmp	.+40     	; 0x2542 <Led_Blink+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251a:	6d 89       	ldd	r22, Y+21	; 0x15
    251c:	7e 89       	ldd	r23, Y+22	; 0x16
    251e:	8f 89       	ldd	r24, Y+23	; 0x17
    2520:	98 8d       	ldd	r25, Y+24	; 0x18
    2522:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2526:	dc 01       	movw	r26, r24
    2528:	cb 01       	movw	r24, r22
    252a:	9c 8b       	std	Y+20, r25	; 0x14
    252c:	8b 8b       	std	Y+19, r24	; 0x13
    252e:	8b 89       	ldd	r24, Y+19	; 0x13
    2530:	9c 89       	ldd	r25, Y+20	; 0x14
    2532:	98 8b       	std	Y+16, r25	; 0x10
    2534:	8f 87       	std	Y+15, r24	; 0x0f
    2536:	8f 85       	ldd	r24, Y+15	; 0x0f
    2538:	98 89       	ldd	r25, Y+16	; 0x10
    253a:	01 97       	sbiw	r24, 0x01	; 1
    253c:	f1 f7       	brne	.-4      	; 0x253a <Led_Blink+0xf6>
    253e:	98 8b       	std	Y+16, r25	; 0x10
    2540:	8f 87       	std	Y+15, r24	; 0x0f
				_delay_ms(1000);
				Led_Off(LED1);
    2542:	81 e0       	ldi	r24, 0x01	; 1
    2544:	0e 94 c3 11 	call	0x2386	; 0x2386 <Led_Off>
    2548:	80 e0       	ldi	r24, 0x00	; 0
    254a:	90 e0       	ldi	r25, 0x00	; 0
    254c:	aa e7       	ldi	r26, 0x7A	; 122
    254e:	b4 e4       	ldi	r27, 0x44	; 68
    2550:	8b 87       	std	Y+11, r24	; 0x0b
    2552:	9c 87       	std	Y+12, r25	; 0x0c
    2554:	ad 87       	std	Y+13, r26	; 0x0d
    2556:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2558:	6b 85       	ldd	r22, Y+11	; 0x0b
    255a:	7c 85       	ldd	r23, Y+12	; 0x0c
    255c:	8d 85       	ldd	r24, Y+13	; 0x0d
    255e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2560:	20 e0       	ldi	r18, 0x00	; 0
    2562:	30 e0       	ldi	r19, 0x00	; 0
    2564:	4a e7       	ldi	r20, 0x7A	; 122
    2566:	55 e4       	ldi	r21, 0x45	; 69
    2568:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256c:	dc 01       	movw	r26, r24
    256e:	cb 01       	movw	r24, r22
    2570:	8f 83       	std	Y+7, r24	; 0x07
    2572:	98 87       	std	Y+8, r25	; 0x08
    2574:	a9 87       	std	Y+9, r26	; 0x09
    2576:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2578:	6f 81       	ldd	r22, Y+7	; 0x07
    257a:	78 85       	ldd	r23, Y+8	; 0x08
    257c:	89 85       	ldd	r24, Y+9	; 0x09
    257e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2580:	20 e0       	ldi	r18, 0x00	; 0
    2582:	30 e0       	ldi	r19, 0x00	; 0
    2584:	40 e8       	ldi	r20, 0x80	; 128
    2586:	5f e3       	ldi	r21, 0x3F	; 63
    2588:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    258c:	88 23       	and	r24, r24
    258e:	2c f4       	brge	.+10     	; 0x259a <Led_Blink+0x156>
		__ticks = 1;
    2590:	81 e0       	ldi	r24, 0x01	; 1
    2592:	90 e0       	ldi	r25, 0x00	; 0
    2594:	9e 83       	std	Y+6, r25	; 0x06
    2596:	8d 83       	std	Y+5, r24	; 0x05
    2598:	3f c0       	rjmp	.+126    	; 0x2618 <Led_Blink+0x1d4>
	else if (__tmp > 65535)
    259a:	6f 81       	ldd	r22, Y+7	; 0x07
    259c:	78 85       	ldd	r23, Y+8	; 0x08
    259e:	89 85       	ldd	r24, Y+9	; 0x09
    25a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a2:	20 e0       	ldi	r18, 0x00	; 0
    25a4:	3f ef       	ldi	r19, 0xFF	; 255
    25a6:	4f e7       	ldi	r20, 0x7F	; 127
    25a8:	57 e4       	ldi	r21, 0x47	; 71
    25aa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    25ae:	18 16       	cp	r1, r24
    25b0:	4c f5       	brge	.+82     	; 0x2604 <Led_Blink+0x1c0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    25b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    25b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    25b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e2       	ldi	r20, 0x20	; 32
    25c0:	51 e4       	ldi	r21, 0x41	; 65
    25c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25c6:	dc 01       	movw	r26, r24
    25c8:	cb 01       	movw	r24, r22
    25ca:	bc 01       	movw	r22, r24
    25cc:	cd 01       	movw	r24, r26
    25ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25d2:	dc 01       	movw	r26, r24
    25d4:	cb 01       	movw	r24, r22
    25d6:	9e 83       	std	Y+6, r25	; 0x06
    25d8:	8d 83       	std	Y+5, r24	; 0x05
    25da:	0f c0       	rjmp	.+30     	; 0x25fa <Led_Blink+0x1b6>
    25dc:	80 e9       	ldi	r24, 0x90	; 144
    25de:	91 e0       	ldi	r25, 0x01	; 1
    25e0:	9c 83       	std	Y+4, r25	; 0x04
    25e2:	8b 83       	std	Y+3, r24	; 0x03
    25e4:	8b 81       	ldd	r24, Y+3	; 0x03
    25e6:	9c 81       	ldd	r25, Y+4	; 0x04
    25e8:	01 97       	sbiw	r24, 0x01	; 1
    25ea:	f1 f7       	brne	.-4      	; 0x25e8 <Led_Blink+0x1a4>
    25ec:	9c 83       	std	Y+4, r25	; 0x04
    25ee:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    25f0:	8d 81       	ldd	r24, Y+5	; 0x05
    25f2:	9e 81       	ldd	r25, Y+6	; 0x06
    25f4:	01 97       	sbiw	r24, 0x01	; 1
    25f6:	9e 83       	std	Y+6, r25	; 0x06
    25f8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    25fa:	8d 81       	ldd	r24, Y+5	; 0x05
    25fc:	9e 81       	ldd	r25, Y+6	; 0x06
    25fe:	00 97       	sbiw	r24, 0x00	; 0
    2600:	69 f7       	brne	.-38     	; 0x25dc <Led_Blink+0x198>
    2602:	2a cf       	rjmp	.-428    	; 0x2458 <Led_Blink+0x14>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2604:	6f 81       	ldd	r22, Y+7	; 0x07
    2606:	78 85       	ldd	r23, Y+8	; 0x08
    2608:	89 85       	ldd	r24, Y+9	; 0x09
    260a:	9a 85       	ldd	r25, Y+10	; 0x0a
    260c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2610:	dc 01       	movw	r26, r24
    2612:	cb 01       	movw	r24, r22
    2614:	9e 83       	std	Y+6, r25	; 0x06
    2616:	8d 83       	std	Y+5, r24	; 0x05
    2618:	8d 81       	ldd	r24, Y+5	; 0x05
    261a:	9e 81       	ldd	r25, Y+6	; 0x06
    261c:	9a 83       	std	Y+2, r25	; 0x02
    261e:	89 83       	std	Y+1, r24	; 0x01
    2620:	89 81       	ldd	r24, Y+1	; 0x01
    2622:	9a 81       	ldd	r25, Y+2	; 0x02
    2624:	01 97       	sbiw	r24, 0x01	; 1
    2626:	f1 f7       	brne	.-4      	; 0x2624 <Led_Blink+0x1e0>
    2628:	9a 83       	std	Y+2, r25	; 0x02
    262a:	89 83       	std	Y+1, r24	; 0x01
    262c:	15 cf       	rjmp	.-470    	; 0x2458 <Led_Blink+0x14>

0000262e <Lcd_SendCommand>:
#include "ATmega32_RegisterMap.h"
#include "DIO_Interface.h"
#include "util/delay.h"

static void Lcd_SendCommand(uint8 command)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	cd b7       	in	r28, 0x3d	; 61
    2634:	de b7       	in	r29, 0x3e	; 62
    2636:	6d 97       	sbiw	r28, 0x1d	; 29
    2638:	0f b6       	in	r0, 0x3f	; 63
    263a:	f8 94       	cli
    263c:	de bf       	out	0x3e, r29	; 62
    263e:	0f be       	out	0x3f, r0	; 63
    2640:	cd bf       	out	0x3d, r28	; 61
    2642:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_WritePin(LCD_RS_PORT, LCD_RS_PIN, LOW);
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	61 e0       	ldi	r22, 0x01	; 1
    2648:	40 e0       	ldi	r20, 0x00	; 0
    264a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	Dio_WritePort(LCD_DISPLAY_PORT, command);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
#else
	Dio_WritePort(LCD_DISPLAY_PORT, command & 0xF0);
    264e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2650:	98 2f       	mov	r25, r24
    2652:	90 7f       	andi	r25, 0xF0	; 240
    2654:	80 e0       	ldi	r24, 0x00	; 0
    2656:	69 2f       	mov	r22, r25
    2658:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Dio_WritePort>
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    265c:	81 e0       	ldi	r24, 0x01	; 1
    265e:	63 e0       	ldi	r22, 0x03	; 3
    2660:	41 e0       	ldi	r20, 0x01	; 1
    2662:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    2666:	80 e0       	ldi	r24, 0x00	; 0
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	a0 ea       	ldi	r26, 0xA0	; 160
    266c:	b0 e4       	ldi	r27, 0x40	; 64
    266e:	89 8f       	std	Y+25, r24	; 0x19
    2670:	9a 8f       	std	Y+26, r25	; 0x1a
    2672:	ab 8f       	std	Y+27, r26	; 0x1b
    2674:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2676:	69 8d       	ldd	r22, Y+25	; 0x19
    2678:	7a 8d       	ldd	r23, Y+26	; 0x1a
    267a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    267c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e0       	ldi	r19, 0x00	; 0
    2682:	4a e7       	ldi	r20, 0x7A	; 122
    2684:	55 e4       	ldi	r21, 0x45	; 69
    2686:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268a:	dc 01       	movw	r26, r24
    268c:	cb 01       	movw	r24, r22
    268e:	8d 8b       	std	Y+21, r24	; 0x15
    2690:	9e 8b       	std	Y+22, r25	; 0x16
    2692:	af 8b       	std	Y+23, r26	; 0x17
    2694:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2696:	6d 89       	ldd	r22, Y+21	; 0x15
    2698:	7e 89       	ldd	r23, Y+22	; 0x16
    269a:	8f 89       	ldd	r24, Y+23	; 0x17
    269c:	98 8d       	ldd	r25, Y+24	; 0x18
    269e:	20 e0       	ldi	r18, 0x00	; 0
    26a0:	30 e0       	ldi	r19, 0x00	; 0
    26a2:	40 e8       	ldi	r20, 0x80	; 128
    26a4:	5f e3       	ldi	r21, 0x3F	; 63
    26a6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26aa:	88 23       	and	r24, r24
    26ac:	2c f4       	brge	.+10     	; 0x26b8 <Lcd_SendCommand+0x8a>
		__ticks = 1;
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	90 e0       	ldi	r25, 0x00	; 0
    26b2:	9c 8b       	std	Y+20, r25	; 0x14
    26b4:	8b 8b       	std	Y+19, r24	; 0x13
    26b6:	3f c0       	rjmp	.+126    	; 0x2736 <Lcd_SendCommand+0x108>
	else if (__tmp > 65535)
    26b8:	6d 89       	ldd	r22, Y+21	; 0x15
    26ba:	7e 89       	ldd	r23, Y+22	; 0x16
    26bc:	8f 89       	ldd	r24, Y+23	; 0x17
    26be:	98 8d       	ldd	r25, Y+24	; 0x18
    26c0:	20 e0       	ldi	r18, 0x00	; 0
    26c2:	3f ef       	ldi	r19, 0xFF	; 255
    26c4:	4f e7       	ldi	r20, 0x7F	; 127
    26c6:	57 e4       	ldi	r21, 0x47	; 71
    26c8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    26cc:	18 16       	cp	r1, r24
    26ce:	4c f5       	brge	.+82     	; 0x2722 <Lcd_SendCommand+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d0:	69 8d       	ldd	r22, Y+25	; 0x19
    26d2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    26d4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    26d6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e2       	ldi	r20, 0x20	; 32
    26de:	51 e4       	ldi	r21, 0x41	; 65
    26e0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e4:	dc 01       	movw	r26, r24
    26e6:	cb 01       	movw	r24, r22
    26e8:	bc 01       	movw	r22, r24
    26ea:	cd 01       	movw	r24, r26
    26ec:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f0:	dc 01       	movw	r26, r24
    26f2:	cb 01       	movw	r24, r22
    26f4:	9c 8b       	std	Y+20, r25	; 0x14
    26f6:	8b 8b       	std	Y+19, r24	; 0x13
    26f8:	0f c0       	rjmp	.+30     	; 0x2718 <Lcd_SendCommand+0xea>
    26fa:	80 e9       	ldi	r24, 0x90	; 144
    26fc:	91 e0       	ldi	r25, 0x01	; 1
    26fe:	9a 8b       	std	Y+18, r25	; 0x12
    2700:	89 8b       	std	Y+17, r24	; 0x11
    2702:	89 89       	ldd	r24, Y+17	; 0x11
    2704:	9a 89       	ldd	r25, Y+18	; 0x12
    2706:	01 97       	sbiw	r24, 0x01	; 1
    2708:	f1 f7       	brne	.-4      	; 0x2706 <Lcd_SendCommand+0xd8>
    270a:	9a 8b       	std	Y+18, r25	; 0x12
    270c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    270e:	8b 89       	ldd	r24, Y+19	; 0x13
    2710:	9c 89       	ldd	r25, Y+20	; 0x14
    2712:	01 97       	sbiw	r24, 0x01	; 1
    2714:	9c 8b       	std	Y+20, r25	; 0x14
    2716:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2718:	8b 89       	ldd	r24, Y+19	; 0x13
    271a:	9c 89       	ldd	r25, Y+20	; 0x14
    271c:	00 97       	sbiw	r24, 0x00	; 0
    271e:	69 f7       	brne	.-38     	; 0x26fa <Lcd_SendCommand+0xcc>
    2720:	14 c0       	rjmp	.+40     	; 0x274a <Lcd_SendCommand+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2722:	6d 89       	ldd	r22, Y+21	; 0x15
    2724:	7e 89       	ldd	r23, Y+22	; 0x16
    2726:	8f 89       	ldd	r24, Y+23	; 0x17
    2728:	98 8d       	ldd	r25, Y+24	; 0x18
    272a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    272e:	dc 01       	movw	r26, r24
    2730:	cb 01       	movw	r24, r22
    2732:	9c 8b       	std	Y+20, r25	; 0x14
    2734:	8b 8b       	std	Y+19, r24	; 0x13
    2736:	8b 89       	ldd	r24, Y+19	; 0x13
    2738:	9c 89       	ldd	r25, Y+20	; 0x14
    273a:	98 8b       	std	Y+16, r25	; 0x10
    273c:	8f 87       	std	Y+15, r24	; 0x0f
    273e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2740:	98 89       	ldd	r25, Y+16	; 0x10
    2742:	01 97       	sbiw	r24, 0x01	; 1
    2744:	f1 f7       	brne	.-4      	; 0x2742 <Lcd_SendCommand+0x114>
    2746:	98 8b       	std	Y+16, r25	; 0x10
    2748:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    274a:	81 e0       	ldi	r24, 0x01	; 1
    274c:	63 e0       	ldi	r22, 0x03	; 3
    274e:	40 e0       	ldi	r20, 0x00	; 0
    2750:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>

	Dio_WritePort(LCD_DISPLAY_PORT, command << LCD_DISPLAY_SHIFT);
    2754:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2756:	98 2f       	mov	r25, r24
    2758:	92 95       	swap	r25
    275a:	90 7f       	andi	r25, 0xF0	; 240
    275c:	80 e0       	ldi	r24, 0x00	; 0
    275e:	69 2f       	mov	r22, r25
    2760:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Dio_WritePort>
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	63 e0       	ldi	r22, 0x03	; 3
    2768:	41 e0       	ldi	r20, 0x01	; 1
    276a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    276e:	80 e0       	ldi	r24, 0x00	; 0
    2770:	90 e0       	ldi	r25, 0x00	; 0
    2772:	a0 ea       	ldi	r26, 0xA0	; 160
    2774:	b0 e4       	ldi	r27, 0x40	; 64
    2776:	8b 87       	std	Y+11, r24	; 0x0b
    2778:	9c 87       	std	Y+12, r25	; 0x0c
    277a:	ad 87       	std	Y+13, r26	; 0x0d
    277c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    277e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2780:	7c 85       	ldd	r23, Y+12	; 0x0c
    2782:	8d 85       	ldd	r24, Y+13	; 0x0d
    2784:	9e 85       	ldd	r25, Y+14	; 0x0e
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	4a e7       	ldi	r20, 0x7A	; 122
    278c:	55 e4       	ldi	r21, 0x45	; 69
    278e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2792:	dc 01       	movw	r26, r24
    2794:	cb 01       	movw	r24, r22
    2796:	8f 83       	std	Y+7, r24	; 0x07
    2798:	98 87       	std	Y+8, r25	; 0x08
    279a:	a9 87       	std	Y+9, r26	; 0x09
    279c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    279e:	6f 81       	ldd	r22, Y+7	; 0x07
    27a0:	78 85       	ldd	r23, Y+8	; 0x08
    27a2:	89 85       	ldd	r24, Y+9	; 0x09
    27a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    27a6:	20 e0       	ldi	r18, 0x00	; 0
    27a8:	30 e0       	ldi	r19, 0x00	; 0
    27aa:	40 e8       	ldi	r20, 0x80	; 128
    27ac:	5f e3       	ldi	r21, 0x3F	; 63
    27ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    27b2:	88 23       	and	r24, r24
    27b4:	2c f4       	brge	.+10     	; 0x27c0 <Lcd_SendCommand+0x192>
		__ticks = 1;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	90 e0       	ldi	r25, 0x00	; 0
    27ba:	9e 83       	std	Y+6, r25	; 0x06
    27bc:	8d 83       	std	Y+5, r24	; 0x05
    27be:	3f c0       	rjmp	.+126    	; 0x283e <Lcd_SendCommand+0x210>
	else if (__tmp > 65535)
    27c0:	6f 81       	ldd	r22, Y+7	; 0x07
    27c2:	78 85       	ldd	r23, Y+8	; 0x08
    27c4:	89 85       	ldd	r24, Y+9	; 0x09
    27c6:	9a 85       	ldd	r25, Y+10	; 0x0a
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	3f ef       	ldi	r19, 0xFF	; 255
    27cc:	4f e7       	ldi	r20, 0x7F	; 127
    27ce:	57 e4       	ldi	r21, 0x47	; 71
    27d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    27d4:	18 16       	cp	r1, r24
    27d6:	4c f5       	brge	.+82     	; 0x282a <Lcd_SendCommand+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27d8:	6b 85       	ldd	r22, Y+11	; 0x0b
    27da:	7c 85       	ldd	r23, Y+12	; 0x0c
    27dc:	8d 85       	ldd	r24, Y+13	; 0x0d
    27de:	9e 85       	ldd	r25, Y+14	; 0x0e
    27e0:	20 e0       	ldi	r18, 0x00	; 0
    27e2:	30 e0       	ldi	r19, 0x00	; 0
    27e4:	40 e2       	ldi	r20, 0x20	; 32
    27e6:	51 e4       	ldi	r21, 0x41	; 65
    27e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	bc 01       	movw	r22, r24
    27f2:	cd 01       	movw	r24, r26
    27f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27f8:	dc 01       	movw	r26, r24
    27fa:	cb 01       	movw	r24, r22
    27fc:	9e 83       	std	Y+6, r25	; 0x06
    27fe:	8d 83       	std	Y+5, r24	; 0x05
    2800:	0f c0       	rjmp	.+30     	; 0x2820 <Lcd_SendCommand+0x1f2>
    2802:	80 e9       	ldi	r24, 0x90	; 144
    2804:	91 e0       	ldi	r25, 0x01	; 1
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
    280a:	8b 81       	ldd	r24, Y+3	; 0x03
    280c:	9c 81       	ldd	r25, Y+4	; 0x04
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	f1 f7       	brne	.-4      	; 0x280e <Lcd_SendCommand+0x1e0>
    2812:	9c 83       	std	Y+4, r25	; 0x04
    2814:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2816:	8d 81       	ldd	r24, Y+5	; 0x05
    2818:	9e 81       	ldd	r25, Y+6	; 0x06
    281a:	01 97       	sbiw	r24, 0x01	; 1
    281c:	9e 83       	std	Y+6, r25	; 0x06
    281e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2820:	8d 81       	ldd	r24, Y+5	; 0x05
    2822:	9e 81       	ldd	r25, Y+6	; 0x06
    2824:	00 97       	sbiw	r24, 0x00	; 0
    2826:	69 f7       	brne	.-38     	; 0x2802 <Lcd_SendCommand+0x1d4>
    2828:	14 c0       	rjmp	.+40     	; 0x2852 <Lcd_SendCommand+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    282a:	6f 81       	ldd	r22, Y+7	; 0x07
    282c:	78 85       	ldd	r23, Y+8	; 0x08
    282e:	89 85       	ldd	r24, Y+9	; 0x09
    2830:	9a 85       	ldd	r25, Y+10	; 0x0a
    2832:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2836:	dc 01       	movw	r26, r24
    2838:	cb 01       	movw	r24, r22
    283a:	9e 83       	std	Y+6, r25	; 0x06
    283c:	8d 83       	std	Y+5, r24	; 0x05
    283e:	8d 81       	ldd	r24, Y+5	; 0x05
    2840:	9e 81       	ldd	r25, Y+6	; 0x06
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    2846:	89 81       	ldd	r24, Y+1	; 0x01
    2848:	9a 81       	ldd	r25, Y+2	; 0x02
    284a:	01 97       	sbiw	r24, 0x01	; 1
    284c:	f1 f7       	brne	.-4      	; 0x284a <Lcd_SendCommand+0x21c>
    284e:	9a 83       	std	Y+2, r25	; 0x02
    2850:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2852:	81 e0       	ldi	r24, 0x01	; 1
    2854:	63 e0       	ldi	r22, 0x03	; 3
    2856:	40 e0       	ldi	r20, 0x00	; 0
    2858:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
#endif
}
    285c:	6d 96       	adiw	r28, 0x1d	; 29
    285e:	0f b6       	in	r0, 0x3f	; 63
    2860:	f8 94       	cli
    2862:	de bf       	out	0x3e, r29	; 62
    2864:	0f be       	out	0x3f, r0	; 63
    2866:	cd bf       	out	0x3d, r28	; 61
    2868:	cf 91       	pop	r28
    286a:	df 91       	pop	r29
    286c:	08 95       	ret

0000286e <Lcd_SendCharacter>:

static void Lcd_SendCharacter(uint8 data)
{
    286e:	df 93       	push	r29
    2870:	cf 93       	push	r28
    2872:	cd b7       	in	r28, 0x3d	; 61
    2874:	de b7       	in	r29, 0x3e	; 62
    2876:	6d 97       	sbiw	r28, 0x1d	; 29
    2878:	0f b6       	in	r0, 0x3f	; 63
    287a:	f8 94       	cli
    287c:	de bf       	out	0x3e, r29	; 62
    287e:	0f be       	out	0x3f, r0	; 63
    2880:	cd bf       	out	0x3d, r28	; 61
    2882:	8d 8f       	std	Y+29, r24	; 0x1d
	Dio_WritePin(LCD_RS_PORT, LCD_RS_PIN, HIGH);
    2884:	81 e0       	ldi	r24, 0x01	; 1
    2886:	61 e0       	ldi	r22, 0x01	; 1
    2888:	41 e0       	ldi	r20, 0x01	; 1
    288a:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
	Dio_WritePort(LCD_DISPLAY_PORT, data);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
#else
	Dio_WritePort(LCD_DISPLAY_PORT, data & 0xF0);
    288e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2890:	98 2f       	mov	r25, r24
    2892:	90 7f       	andi	r25, 0xF0	; 240
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	69 2f       	mov	r22, r25
    2898:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Dio_WritePort>
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    289c:	81 e0       	ldi	r24, 0x01	; 1
    289e:	63 e0       	ldi	r22, 0x03	; 3
    28a0:	41 e0       	ldi	r20, 0x01	; 1
    28a2:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    28a6:	80 e0       	ldi	r24, 0x00	; 0
    28a8:	90 e0       	ldi	r25, 0x00	; 0
    28aa:	a0 ea       	ldi	r26, 0xA0	; 160
    28ac:	b0 e4       	ldi	r27, 0x40	; 64
    28ae:	89 8f       	std	Y+25, r24	; 0x19
    28b0:	9a 8f       	std	Y+26, r25	; 0x1a
    28b2:	ab 8f       	std	Y+27, r26	; 0x1b
    28b4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28b6:	69 8d       	ldd	r22, Y+25	; 0x19
    28b8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    28ba:	8b 8d       	ldd	r24, Y+27	; 0x1b
    28bc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    28be:	20 e0       	ldi	r18, 0x00	; 0
    28c0:	30 e0       	ldi	r19, 0x00	; 0
    28c2:	4a e7       	ldi	r20, 0x7A	; 122
    28c4:	55 e4       	ldi	r21, 0x45	; 69
    28c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	8d 8b       	std	Y+21, r24	; 0x15
    28d0:	9e 8b       	std	Y+22, r25	; 0x16
    28d2:	af 8b       	std	Y+23, r26	; 0x17
    28d4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    28d6:	6d 89       	ldd	r22, Y+21	; 0x15
    28d8:	7e 89       	ldd	r23, Y+22	; 0x16
    28da:	8f 89       	ldd	r24, Y+23	; 0x17
    28dc:	98 8d       	ldd	r25, Y+24	; 0x18
    28de:	20 e0       	ldi	r18, 0x00	; 0
    28e0:	30 e0       	ldi	r19, 0x00	; 0
    28e2:	40 e8       	ldi	r20, 0x80	; 128
    28e4:	5f e3       	ldi	r21, 0x3F	; 63
    28e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    28ea:	88 23       	and	r24, r24
    28ec:	2c f4       	brge	.+10     	; 0x28f8 <Lcd_SendCharacter+0x8a>
		__ticks = 1;
    28ee:	81 e0       	ldi	r24, 0x01	; 1
    28f0:	90 e0       	ldi	r25, 0x00	; 0
    28f2:	9c 8b       	std	Y+20, r25	; 0x14
    28f4:	8b 8b       	std	Y+19, r24	; 0x13
    28f6:	3f c0       	rjmp	.+126    	; 0x2976 <Lcd_SendCharacter+0x108>
	else if (__tmp > 65535)
    28f8:	6d 89       	ldd	r22, Y+21	; 0x15
    28fa:	7e 89       	ldd	r23, Y+22	; 0x16
    28fc:	8f 89       	ldd	r24, Y+23	; 0x17
    28fe:	98 8d       	ldd	r25, Y+24	; 0x18
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	3f ef       	ldi	r19, 0xFF	; 255
    2904:	4f e7       	ldi	r20, 0x7F	; 127
    2906:	57 e4       	ldi	r21, 0x47	; 71
    2908:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    290c:	18 16       	cp	r1, r24
    290e:	4c f5       	brge	.+82     	; 0x2962 <Lcd_SendCharacter+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2910:	69 8d       	ldd	r22, Y+25	; 0x19
    2912:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2914:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2916:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2918:	20 e0       	ldi	r18, 0x00	; 0
    291a:	30 e0       	ldi	r19, 0x00	; 0
    291c:	40 e2       	ldi	r20, 0x20	; 32
    291e:	51 e4       	ldi	r21, 0x41	; 65
    2920:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2924:	dc 01       	movw	r26, r24
    2926:	cb 01       	movw	r24, r22
    2928:	bc 01       	movw	r22, r24
    292a:	cd 01       	movw	r24, r26
    292c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2930:	dc 01       	movw	r26, r24
    2932:	cb 01       	movw	r24, r22
    2934:	9c 8b       	std	Y+20, r25	; 0x14
    2936:	8b 8b       	std	Y+19, r24	; 0x13
    2938:	0f c0       	rjmp	.+30     	; 0x2958 <Lcd_SendCharacter+0xea>
    293a:	80 e9       	ldi	r24, 0x90	; 144
    293c:	91 e0       	ldi	r25, 0x01	; 1
    293e:	9a 8b       	std	Y+18, r25	; 0x12
    2940:	89 8b       	std	Y+17, r24	; 0x11
    2942:	89 89       	ldd	r24, Y+17	; 0x11
    2944:	9a 89       	ldd	r25, Y+18	; 0x12
    2946:	01 97       	sbiw	r24, 0x01	; 1
    2948:	f1 f7       	brne	.-4      	; 0x2946 <Lcd_SendCharacter+0xd8>
    294a:	9a 8b       	std	Y+18, r25	; 0x12
    294c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    294e:	8b 89       	ldd	r24, Y+19	; 0x13
    2950:	9c 89       	ldd	r25, Y+20	; 0x14
    2952:	01 97       	sbiw	r24, 0x01	; 1
    2954:	9c 8b       	std	Y+20, r25	; 0x14
    2956:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2958:	8b 89       	ldd	r24, Y+19	; 0x13
    295a:	9c 89       	ldd	r25, Y+20	; 0x14
    295c:	00 97       	sbiw	r24, 0x00	; 0
    295e:	69 f7       	brne	.-38     	; 0x293a <Lcd_SendCharacter+0xcc>
    2960:	14 c0       	rjmp	.+40     	; 0x298a <Lcd_SendCharacter+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2962:	6d 89       	ldd	r22, Y+21	; 0x15
    2964:	7e 89       	ldd	r23, Y+22	; 0x16
    2966:	8f 89       	ldd	r24, Y+23	; 0x17
    2968:	98 8d       	ldd	r25, Y+24	; 0x18
    296a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    296e:	dc 01       	movw	r26, r24
    2970:	cb 01       	movw	r24, r22
    2972:	9c 8b       	std	Y+20, r25	; 0x14
    2974:	8b 8b       	std	Y+19, r24	; 0x13
    2976:	8b 89       	ldd	r24, Y+19	; 0x13
    2978:	9c 89       	ldd	r25, Y+20	; 0x14
    297a:	98 8b       	std	Y+16, r25	; 0x10
    297c:	8f 87       	std	Y+15, r24	; 0x0f
    297e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2980:	98 89       	ldd	r25, Y+16	; 0x10
    2982:	01 97       	sbiw	r24, 0x01	; 1
    2984:	f1 f7       	brne	.-4      	; 0x2982 <Lcd_SendCharacter+0x114>
    2986:	98 8b       	std	Y+16, r25	; 0x10
    2988:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    298a:	81 e0       	ldi	r24, 0x01	; 1
    298c:	63 e0       	ldi	r22, 0x03	; 3
    298e:	40 e0       	ldi	r20, 0x00	; 0
    2990:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>

	Dio_WritePort(LCD_DISPLAY_PORT, data << LCD_DISPLAY_SHIFT);
    2994:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2996:	98 2f       	mov	r25, r24
    2998:	92 95       	swap	r25
    299a:	90 7f       	andi	r25, 0xF0	; 240
    299c:	80 e0       	ldi	r24, 0x00	; 0
    299e:	69 2f       	mov	r22, r25
    29a0:	0e 94 74 0d 	call	0x1ae8	; 0x1ae8 <Dio_WritePort>
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, HIGH);
    29a4:	81 e0       	ldi	r24, 0x01	; 1
    29a6:	63 e0       	ldi	r22, 0x03	; 3
    29a8:	41 e0       	ldi	r20, 0x01	; 1
    29aa:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
    29ae:	80 e0       	ldi	r24, 0x00	; 0
    29b0:	90 e0       	ldi	r25, 0x00	; 0
    29b2:	a0 ea       	ldi	r26, 0xA0	; 160
    29b4:	b0 e4       	ldi	r27, 0x40	; 64
    29b6:	8b 87       	std	Y+11, r24	; 0x0b
    29b8:	9c 87       	std	Y+12, r25	; 0x0c
    29ba:	ad 87       	std	Y+13, r26	; 0x0d
    29bc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29be:	6b 85       	ldd	r22, Y+11	; 0x0b
    29c0:	7c 85       	ldd	r23, Y+12	; 0x0c
    29c2:	8d 85       	ldd	r24, Y+13	; 0x0d
    29c4:	9e 85       	ldd	r25, Y+14	; 0x0e
    29c6:	20 e0       	ldi	r18, 0x00	; 0
    29c8:	30 e0       	ldi	r19, 0x00	; 0
    29ca:	4a e7       	ldi	r20, 0x7A	; 122
    29cc:	55 e4       	ldi	r21, 0x45	; 69
    29ce:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d2:	dc 01       	movw	r26, r24
    29d4:	cb 01       	movw	r24, r22
    29d6:	8f 83       	std	Y+7, r24	; 0x07
    29d8:	98 87       	std	Y+8, r25	; 0x08
    29da:	a9 87       	std	Y+9, r26	; 0x09
    29dc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    29de:	6f 81       	ldd	r22, Y+7	; 0x07
    29e0:	78 85       	ldd	r23, Y+8	; 0x08
    29e2:	89 85       	ldd	r24, Y+9	; 0x09
    29e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    29e6:	20 e0       	ldi	r18, 0x00	; 0
    29e8:	30 e0       	ldi	r19, 0x00	; 0
    29ea:	40 e8       	ldi	r20, 0x80	; 128
    29ec:	5f e3       	ldi	r21, 0x3F	; 63
    29ee:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f2:	88 23       	and	r24, r24
    29f4:	2c f4       	brge	.+10     	; 0x2a00 <Lcd_SendCharacter+0x192>
		__ticks = 1;
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	9e 83       	std	Y+6, r25	; 0x06
    29fc:	8d 83       	std	Y+5, r24	; 0x05
    29fe:	3f c0       	rjmp	.+126    	; 0x2a7e <Lcd_SendCharacter+0x210>
	else if (__tmp > 65535)
    2a00:	6f 81       	ldd	r22, Y+7	; 0x07
    2a02:	78 85       	ldd	r23, Y+8	; 0x08
    2a04:	89 85       	ldd	r24, Y+9	; 0x09
    2a06:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a08:	20 e0       	ldi	r18, 0x00	; 0
    2a0a:	3f ef       	ldi	r19, 0xFF	; 255
    2a0c:	4f e7       	ldi	r20, 0x7F	; 127
    2a0e:	57 e4       	ldi	r21, 0x47	; 71
    2a10:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a14:	18 16       	cp	r1, r24
    2a16:	4c f5       	brge	.+82     	; 0x2a6a <Lcd_SendCharacter+0x1fc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a18:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a1c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a1e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a20:	20 e0       	ldi	r18, 0x00	; 0
    2a22:	30 e0       	ldi	r19, 0x00	; 0
    2a24:	40 e2       	ldi	r20, 0x20	; 32
    2a26:	51 e4       	ldi	r21, 0x41	; 65
    2a28:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a2c:	dc 01       	movw	r26, r24
    2a2e:	cb 01       	movw	r24, r22
    2a30:	bc 01       	movw	r22, r24
    2a32:	cd 01       	movw	r24, r26
    2a34:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a38:	dc 01       	movw	r26, r24
    2a3a:	cb 01       	movw	r24, r22
    2a3c:	9e 83       	std	Y+6, r25	; 0x06
    2a3e:	8d 83       	std	Y+5, r24	; 0x05
    2a40:	0f c0       	rjmp	.+30     	; 0x2a60 <Lcd_SendCharacter+0x1f2>
    2a42:	80 e9       	ldi	r24, 0x90	; 144
    2a44:	91 e0       	ldi	r25, 0x01	; 1
    2a46:	9c 83       	std	Y+4, r25	; 0x04
    2a48:	8b 83       	std	Y+3, r24	; 0x03
    2a4a:	8b 81       	ldd	r24, Y+3	; 0x03
    2a4c:	9c 81       	ldd	r25, Y+4	; 0x04
    2a4e:	01 97       	sbiw	r24, 0x01	; 1
    2a50:	f1 f7       	brne	.-4      	; 0x2a4e <Lcd_SendCharacter+0x1e0>
    2a52:	9c 83       	std	Y+4, r25	; 0x04
    2a54:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a56:	8d 81       	ldd	r24, Y+5	; 0x05
    2a58:	9e 81       	ldd	r25, Y+6	; 0x06
    2a5a:	01 97       	sbiw	r24, 0x01	; 1
    2a5c:	9e 83       	std	Y+6, r25	; 0x06
    2a5e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a60:	8d 81       	ldd	r24, Y+5	; 0x05
    2a62:	9e 81       	ldd	r25, Y+6	; 0x06
    2a64:	00 97       	sbiw	r24, 0x00	; 0
    2a66:	69 f7       	brne	.-38     	; 0x2a42 <Lcd_SendCharacter+0x1d4>
    2a68:	14 c0       	rjmp	.+40     	; 0x2a92 <Lcd_SendCharacter+0x224>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a6a:	6f 81       	ldd	r22, Y+7	; 0x07
    2a6c:	78 85       	ldd	r23, Y+8	; 0x08
    2a6e:	89 85       	ldd	r24, Y+9	; 0x09
    2a70:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a76:	dc 01       	movw	r26, r24
    2a78:	cb 01       	movw	r24, r22
    2a7a:	9e 83       	std	Y+6, r25	; 0x06
    2a7c:	8d 83       	std	Y+5, r24	; 0x05
    2a7e:	8d 81       	ldd	r24, Y+5	; 0x05
    2a80:	9e 81       	ldd	r25, Y+6	; 0x06
    2a82:	9a 83       	std	Y+2, r25	; 0x02
    2a84:	89 83       	std	Y+1, r24	; 0x01
    2a86:	89 81       	ldd	r24, Y+1	; 0x01
    2a88:	9a 81       	ldd	r25, Y+2	; 0x02
    2a8a:	01 97       	sbiw	r24, 0x01	; 1
    2a8c:	f1 f7       	brne	.-4      	; 0x2a8a <Lcd_SendCharacter+0x21c>
    2a8e:	9a 83       	std	Y+2, r25	; 0x02
    2a90:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(5);
	Dio_WritePin(LCD_EN_PORT, LCD_EN_PIN, LOW);
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	63 e0       	ldi	r22, 0x03	; 3
    2a96:	40 e0       	ldi	r20, 0x00	; 0
    2a98:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
#endif

}
    2a9c:	6d 96       	adiw	r28, 0x1d	; 29
    2a9e:	0f b6       	in	r0, 0x3f	; 63
    2aa0:	f8 94       	cli
    2aa2:	de bf       	out	0x3e, r29	; 62
    2aa4:	0f be       	out	0x3f, r0	; 63
    2aa6:	cd bf       	out	0x3d, r28	; 61
    2aa8:	cf 91       	pop	r28
    2aaa:	df 91       	pop	r29
    2aac:	08 95       	ret

00002aae <Lcd_Init>:

void Lcd_Init(void)
{
    2aae:	df 93       	push	r29
    2ab0:	cf 93       	push	r28
    2ab2:	cd b7       	in	r28, 0x3d	; 61
    2ab4:	de b7       	in	r29, 0x3e	; 62
    2ab6:	2e 97       	sbiw	r28, 0x0e	; 14
    2ab8:	0f b6       	in	r0, 0x3f	; 63
    2aba:	f8 94       	cli
    2abc:	de bf       	out	0x3e, r29	; 62
    2abe:	0f be       	out	0x3f, r0	; 63
    2ac0:	cd bf       	out	0x3d, r28	; 61
	Dio_SetPinDirection(LCD_RS_PORT, LCD_RS_PIN, OUTPUT);
    2ac2:	81 e0       	ldi	r24, 0x01	; 1
    2ac4:	61 e0       	ldi	r22, 0x01	; 1
    2ac6:	41 e0       	ldi	r20, 0x01	; 1
    2ac8:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_RW_PORT, LCD_RW_PIN, OUTPUT);
    2acc:	81 e0       	ldi	r24, 0x01	; 1
    2ace:	62 e0       	ldi	r22, 0x02	; 2
    2ad0:	41 e0       	ldi	r20, 0x01	; 1
    2ad2:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_SetPinDirection(LCD_EN_PORT, LCD_EN_PIN, OUTPUT);
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	63 e0       	ldi	r22, 0x03	; 3
    2ada:	41 e0       	ldi	r20, 0x01	; 1
    2adc:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Dio_WritePin(LCD_RW_PORT, LCD_RW_PIN, LOW);
    2ae0:	81 e0       	ldi	r24, 0x01	; 1
    2ae2:	62 e0       	ldi	r22, 0x02	; 2
    2ae4:	40 e0       	ldi	r20, 0x00	; 0
    2ae6:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <Dio_WritePin>
#if LCD_MODE == MODE_8_BIT
	Dio_SetPortDirection(LCD_DISPLAY_PORT, 0xFF);
	_delay_ms(1000);
	Lcd_SendCommand(LCD_8_BIT_MODE_COMMAND);
#else
	Dio_SetPortDirection(LCD_DISPLAY_PORT, 0xF << LCD_DISPLAY_SHIFT);
    2aea:	80 e0       	ldi	r24, 0x00	; 0
    2aec:	60 ef       	ldi	r22, 0xF0	; 240
    2aee:	0e 94 37 0c 	call	0x186e	; 0x186e <Dio_SetPortDirection>
    2af2:	80 e0       	ldi	r24, 0x00	; 0
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	aa e7       	ldi	r26, 0x7A	; 122
    2af8:	b4 e4       	ldi	r27, 0x44	; 68
    2afa:	8b 87       	std	Y+11, r24	; 0x0b
    2afc:	9c 87       	std	Y+12, r25	; 0x0c
    2afe:	ad 87       	std	Y+13, r26	; 0x0d
    2b00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b02:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b04:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b06:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b08:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b0a:	20 e0       	ldi	r18, 0x00	; 0
    2b0c:	30 e0       	ldi	r19, 0x00	; 0
    2b0e:	4a e7       	ldi	r20, 0x7A	; 122
    2b10:	55 e4       	ldi	r21, 0x45	; 69
    2b12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b16:	dc 01       	movw	r26, r24
    2b18:	cb 01       	movw	r24, r22
    2b1a:	8f 83       	std	Y+7, r24	; 0x07
    2b1c:	98 87       	std	Y+8, r25	; 0x08
    2b1e:	a9 87       	std	Y+9, r26	; 0x09
    2b20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2b22:	6f 81       	ldd	r22, Y+7	; 0x07
    2b24:	78 85       	ldd	r23, Y+8	; 0x08
    2b26:	89 85       	ldd	r24, Y+9	; 0x09
    2b28:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b2a:	20 e0       	ldi	r18, 0x00	; 0
    2b2c:	30 e0       	ldi	r19, 0x00	; 0
    2b2e:	40 e8       	ldi	r20, 0x80	; 128
    2b30:	5f e3       	ldi	r21, 0x3F	; 63
    2b32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b36:	88 23       	and	r24, r24
    2b38:	2c f4       	brge	.+10     	; 0x2b44 <Lcd_Init+0x96>
		__ticks = 1;
    2b3a:	81 e0       	ldi	r24, 0x01	; 1
    2b3c:	90 e0       	ldi	r25, 0x00	; 0
    2b3e:	9e 83       	std	Y+6, r25	; 0x06
    2b40:	8d 83       	std	Y+5, r24	; 0x05
    2b42:	3f c0       	rjmp	.+126    	; 0x2bc2 <Lcd_Init+0x114>
	else if (__tmp > 65535)
    2b44:	6f 81       	ldd	r22, Y+7	; 0x07
    2b46:	78 85       	ldd	r23, Y+8	; 0x08
    2b48:	89 85       	ldd	r24, Y+9	; 0x09
    2b4a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b4c:	20 e0       	ldi	r18, 0x00	; 0
    2b4e:	3f ef       	ldi	r19, 0xFF	; 255
    2b50:	4f e7       	ldi	r20, 0x7F	; 127
    2b52:	57 e4       	ldi	r21, 0x47	; 71
    2b54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b58:	18 16       	cp	r1, r24
    2b5a:	4c f5       	brge	.+82     	; 0x2bae <Lcd_Init+0x100>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b5c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b5e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b60:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b62:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b64:	20 e0       	ldi	r18, 0x00	; 0
    2b66:	30 e0       	ldi	r19, 0x00	; 0
    2b68:	40 e2       	ldi	r20, 0x20	; 32
    2b6a:	51 e4       	ldi	r21, 0x41	; 65
    2b6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b70:	dc 01       	movw	r26, r24
    2b72:	cb 01       	movw	r24, r22
    2b74:	bc 01       	movw	r22, r24
    2b76:	cd 01       	movw	r24, r26
    2b78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b7c:	dc 01       	movw	r26, r24
    2b7e:	cb 01       	movw	r24, r22
    2b80:	9e 83       	std	Y+6, r25	; 0x06
    2b82:	8d 83       	std	Y+5, r24	; 0x05
    2b84:	0f c0       	rjmp	.+30     	; 0x2ba4 <Lcd_Init+0xf6>
    2b86:	80 e9       	ldi	r24, 0x90	; 144
    2b88:	91 e0       	ldi	r25, 0x01	; 1
    2b8a:	9c 83       	std	Y+4, r25	; 0x04
    2b8c:	8b 83       	std	Y+3, r24	; 0x03
    2b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b90:	9c 81       	ldd	r25, Y+4	; 0x04
    2b92:	01 97       	sbiw	r24, 0x01	; 1
    2b94:	f1 f7       	brne	.-4      	; 0x2b92 <Lcd_Init+0xe4>
    2b96:	9c 83       	std	Y+4, r25	; 0x04
    2b98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b9a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b9c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b9e:	01 97       	sbiw	r24, 0x01	; 1
    2ba0:	9e 83       	std	Y+6, r25	; 0x06
    2ba2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ba4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ba6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ba8:	00 97       	sbiw	r24, 0x00	; 0
    2baa:	69 f7       	brne	.-38     	; 0x2b86 <Lcd_Init+0xd8>
    2bac:	14 c0       	rjmp	.+40     	; 0x2bd6 <Lcd_Init+0x128>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bae:	6f 81       	ldd	r22, Y+7	; 0x07
    2bb0:	78 85       	ldd	r23, Y+8	; 0x08
    2bb2:	89 85       	ldd	r24, Y+9	; 0x09
    2bb4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2bb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bba:	dc 01       	movw	r26, r24
    2bbc:	cb 01       	movw	r24, r22
    2bbe:	9e 83       	std	Y+6, r25	; 0x06
    2bc0:	8d 83       	std	Y+5, r24	; 0x05
    2bc2:	8d 81       	ldd	r24, Y+5	; 0x05
    2bc4:	9e 81       	ldd	r25, Y+6	; 0x06
    2bc6:	9a 83       	std	Y+2, r25	; 0x02
    2bc8:	89 83       	std	Y+1, r24	; 0x01
    2bca:	89 81       	ldd	r24, Y+1	; 0x01
    2bcc:	9a 81       	ldd	r25, Y+2	; 0x02
    2bce:	01 97       	sbiw	r24, 0x01	; 1
    2bd0:	f1 f7       	brne	.-4      	; 0x2bce <Lcd_Init+0x120>
    2bd2:	9a 83       	std	Y+2, r25	; 0x02
    2bd4:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	Lcd_SendCommand(LCD_4_BIT_MODE_COMMAND_1);
    2bd6:	83 e3       	ldi	r24, 0x33	; 51
    2bd8:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
	Lcd_SendCommand(LCD_4_BIT_MODE_COMMAND_2);
    2bdc:	82 e3       	ldi	r24, 0x32	; 50
    2bde:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
	Lcd_SendCommand(LCD_4_BIT_MODE_COMMAND_3);
    2be2:	88 e2       	ldi	r24, 0x28	; 40
    2be4:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
#endif
	Lcd_SendCommand(LCD_CLEAR_COMMAND);
    2be8:	81 e0       	ldi	r24, 0x01	; 1
    2bea:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
	Lcd_SendCommand(LCD_DISPLAY_ON_COMMAND);
    2bee:	8c e0       	ldi	r24, 0x0C	; 12
    2bf0:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}
    2bf4:	2e 96       	adiw	r28, 0x0e	; 14
    2bf6:	0f b6       	in	r0, 0x3f	; 63
    2bf8:	f8 94       	cli
    2bfa:	de bf       	out	0x3e, r29	; 62
    2bfc:	0f be       	out	0x3f, r0	; 63
    2bfe:	cd bf       	out	0x3d, r28	; 61
    2c00:	cf 91       	pop	r28
    2c02:	df 91       	pop	r29
    2c04:	08 95       	ret

00002c06 <Lcd_DisplayString>:
void Lcd_DisplayString(uint8* string)
{
    2c06:	df 93       	push	r29
    2c08:	cf 93       	push	r28
    2c0a:	00 d0       	rcall	.+0      	; 0x2c0c <Lcd_DisplayString+0x6>
    2c0c:	0f 92       	push	r0
    2c0e:	cd b7       	in	r28, 0x3d	; 61
    2c10:	de b7       	in	r29, 0x3e	; 62
    2c12:	9b 83       	std	Y+3, r25	; 0x03
    2c14:	8a 83       	std	Y+2, r24	; 0x02
	uint8 counter=0;
    2c16:	19 82       	std	Y+1, r1	; 0x01
    2c18:	0e c0       	rjmp	.+28     	; 0x2c36 <Lcd_DisplayString+0x30>
	while(string[counter]!='\0')
	{
		Lcd_SendCharacter(string[counter]);
    2c1a:	89 81       	ldd	r24, Y+1	; 0x01
    2c1c:	28 2f       	mov	r18, r24
    2c1e:	30 e0       	ldi	r19, 0x00	; 0
    2c20:	8a 81       	ldd	r24, Y+2	; 0x02
    2c22:	9b 81       	ldd	r25, Y+3	; 0x03
    2c24:	fc 01       	movw	r30, r24
    2c26:	e2 0f       	add	r30, r18
    2c28:	f3 1f       	adc	r31, r19
    2c2a:	80 81       	ld	r24, Z
    2c2c:	0e 94 37 14 	call	0x286e	; 0x286e <Lcd_SendCharacter>
		counter++;
    2c30:	89 81       	ldd	r24, Y+1	; 0x01
    2c32:	8f 5f       	subi	r24, 0xFF	; 255
    2c34:	89 83       	std	Y+1, r24	; 0x01
	Lcd_SendCommand(LCD_DISPLAY_ON_COMMAND);
}
void Lcd_DisplayString(uint8* string)
{
	uint8 counter=0;
	while(string[counter]!='\0')
    2c36:	89 81       	ldd	r24, Y+1	; 0x01
    2c38:	28 2f       	mov	r18, r24
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2c3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2c40:	fc 01       	movw	r30, r24
    2c42:	e2 0f       	add	r30, r18
    2c44:	f3 1f       	adc	r31, r19
    2c46:	80 81       	ld	r24, Z
    2c48:	88 23       	and	r24, r24
    2c4a:	39 f7       	brne	.-50     	; 0x2c1a <Lcd_DisplayString+0x14>
	{
		Lcd_SendCharacter(string[counter]);
		counter++;
	}
}
    2c4c:	0f 90       	pop	r0
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
    2c52:	cf 91       	pop	r28
    2c54:	df 91       	pop	r29
    2c56:	08 95       	ret

00002c58 <Lcd_Clear>:

void Lcd_Clear(void)
{
    2c58:	df 93       	push	r29
    2c5a:	cf 93       	push	r28
    2c5c:	cd b7       	in	r28, 0x3d	; 61
    2c5e:	de b7       	in	r29, 0x3e	; 62
	Lcd_SendCommand(LCD_CLEAR_COMMAND);
    2c60:	81 e0       	ldi	r24, 0x01	; 1
    2c62:	0e 94 17 13 	call	0x262e	; 0x262e <Lcd_SendCommand>
}
    2c66:	cf 91       	pop	r28
    2c68:	df 91       	pop	r29
    2c6a:	08 95       	ret

00002c6c <LM35_Init>:
#include "SevenSeg_Interface.h"
#include <util/delay.h>


void LM35_Init(void)
{
    2c6c:	df 93       	push	r29
    2c6e:	cf 93       	push	r28
    2c70:	cd b7       	in	r28, 0x3d	; 61
    2c72:	de b7       	in	r29, 0x3e	; 62
	//ADC_Init();
	//Dio_SetPinDirection(DIO_PORTA, PIN0, INPUT);
}
    2c74:	cf 91       	pop	r28
    2c76:	df 91       	pop	r29
    2c78:	08 95       	ret

00002c7a <LM35_Read>:


int16 LM35_Read(void)
{
    2c7a:	df 93       	push	r29
    2c7c:	cf 93       	push	r28
    2c7e:	00 d0       	rcall	.+0      	; 0x2c80 <LM35_Read+0x6>
    2c80:	00 d0       	rcall	.+0      	; 0x2c82 <LM35_Read+0x8>
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
	int16 temp = 0;
    2c86:	1a 82       	std	Y+2, r1	; 0x02
    2c88:	19 82       	std	Y+1, r1	; 0x01
		temp = (ADC_Read()/4);
    2c8a:	0e 94 1f 0f 	call	0x1e3e	; 0x1e3e <ADC_Read>
    2c8e:	9c 83       	std	Y+4, r25	; 0x04
    2c90:	8b 83       	std	Y+3, r24	; 0x03
    2c92:	8b 81       	ldd	r24, Y+3	; 0x03
    2c94:	9c 81       	ldd	r25, Y+4	; 0x04
    2c96:	99 23       	and	r25, r25
    2c98:	2c f4       	brge	.+10     	; 0x2ca4 <LM35_Read+0x2a>
    2c9a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c9c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c9e:	03 96       	adiw	r24, 0x03	; 3
    2ca0:	9c 83       	std	Y+4, r25	; 0x04
    2ca2:	8b 83       	std	Y+3, r24	; 0x03
    2ca4:	8b 81       	ldd	r24, Y+3	; 0x03
    2ca6:	9c 81       	ldd	r25, Y+4	; 0x04
    2ca8:	95 95       	asr	r25
    2caa:	87 95       	ror	r24
    2cac:	95 95       	asr	r25
    2cae:	87 95       	ror	r24
    2cb0:	9a 83       	std	Y+2, r25	; 0x02
    2cb2:	89 83       	std	Y+1, r24	; 0x01

		return temp;
    2cb4:	89 81       	ldd	r24, Y+1	; 0x01
    2cb6:	9a 81       	ldd	r25, Y+2	; 0x02
}
    2cb8:	0f 90       	pop	r0
    2cba:	0f 90       	pop	r0
    2cbc:	0f 90       	pop	r0
    2cbe:	0f 90       	pop	r0
    2cc0:	cf 91       	pop	r28
    2cc2:	df 91       	pop	r29
    2cc4:	08 95       	ret

00002cc6 <Ceramic_Heater_Init>:

#include "CeramicHeater_Interface.h"
#include "Relay_Interface.h"

void Ceramic_Heater_Init(void)
{
    2cc6:	df 93       	push	r29
    2cc8:	cf 93       	push	r28
    2cca:	cd b7       	in	r28, 0x3d	; 61
    2ccc:	de b7       	in	r29, 0x3e	; 62
	Dio_SetPinDirection(DIO_PORTA,PIN2,OUTPUT); 	// //same as RELAY_2
    2cce:	80 e0       	ldi	r24, 0x00	; 0
    2cd0:	62 e0       	ldi	r22, 0x02	; 2
    2cd2:	41 e0       	ldi	r20, 0x01	; 1
    2cd4:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
	Ceramic_Heater_SetMode(HEATER_UNDEFINED_MODE);
    2cd8:	82 e0       	ldi	r24, 0x02	; 2
    2cda:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <Ceramic_Heater_SetMode>
}
    2cde:	cf 91       	pop	r28
    2ce0:	df 91       	pop	r29
    2ce2:	08 95       	ret

00002ce4 <Ceramic_Heater_SetMode>:

void Ceramic_Heater_SetMode(Heater_ModeType HeaterMode)
{
    2ce4:	df 93       	push	r29
    2ce6:	cf 93       	push	r28
    2ce8:	00 d0       	rcall	.+0      	; 0x2cea <Ceramic_Heater_SetMode+0x6>
    2cea:	0f 92       	push	r0
    2cec:	cd b7       	in	r28, 0x3d	; 61
    2cee:	de b7       	in	r29, 0x3e	; 62
    2cf0:	89 83       	std	Y+1, r24	; 0x01
	switch(HeaterMode)
    2cf2:	89 81       	ldd	r24, Y+1	; 0x01
    2cf4:	28 2f       	mov	r18, r24
    2cf6:	30 e0       	ldi	r19, 0x00	; 0
    2cf8:	3b 83       	std	Y+3, r19	; 0x03
    2cfa:	2a 83       	std	Y+2, r18	; 0x02
    2cfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cfe:	9b 81       	ldd	r25, Y+3	; 0x03
    2d00:	00 97       	sbiw	r24, 0x00	; 0
    2d02:	41 f0       	breq	.+16     	; 0x2d14 <Ceramic_Heater_SetMode+0x30>
    2d04:	2a 81       	ldd	r18, Y+2	; 0x02
    2d06:	3b 81       	ldd	r19, Y+3	; 0x03
    2d08:	21 30       	cpi	r18, 0x01	; 1
    2d0a:	31 05       	cpc	r19, r1
    2d0c:	29 f4       	brne	.+10     	; 0x2d18 <Ceramic_Heater_SetMode+0x34>
	{
		case (HEATER_ON_MODE):
		{
			Relay1_switchON();
    2d0e:	0e 94 02 11 	call	0x2204	; 0x2204 <Relay1_switchON>
    2d12:	02 c0       	rjmp	.+4      	; 0x2d18 <Ceramic_Heater_SetMode+0x34>
			break;
		}
		case (HEATER_OFF_MODE):
		{
			Relay1_switchOFF();
    2d14:	0e 94 0e 11 	call	0x221c	; 0x221c <Relay1_switchOFF>
			break;
		}
		default: {}
	}

}
    2d18:	0f 90       	pop	r0
    2d1a:	0f 90       	pop	r0
    2d1c:	0f 90       	pop	r0
    2d1e:	cf 91       	pop	r28
    2d20:	df 91       	pop	r29
    2d22:	08 95       	ret

00002d24 <Button_Init>:
#include "Button_Interface.h"
#include <util/delay.h>

void Button_Init(uint8 btn)
{
    2d24:	df 93       	push	r29
    2d26:	cf 93       	push	r28
    2d28:	00 d0       	rcall	.+0      	; 0x2d2a <Button_Init+0x6>
    2d2a:	0f 92       	push	r0
    2d2c:	cd b7       	in	r28, 0x3d	; 61
    2d2e:	de b7       	in	r29, 0x3e	; 62
    2d30:	89 83       	std	Y+1, r24	; 0x01
	switch (btn)
    2d32:	89 81       	ldd	r24, Y+1	; 0x01
    2d34:	28 2f       	mov	r18, r24
    2d36:	30 e0       	ldi	r19, 0x00	; 0
    2d38:	3b 83       	std	Y+3, r19	; 0x03
    2d3a:	2a 83       	std	Y+2, r18	; 0x02
    2d3c:	8a 81       	ldd	r24, Y+2	; 0x02
    2d3e:	9b 81       	ldd	r25, Y+3	; 0x03
    2d40:	81 30       	cpi	r24, 0x01	; 1
    2d42:	91 05       	cpc	r25, r1
    2d44:	79 f0       	breq	.+30     	; 0x2d64 <Button_Init+0x40>
    2d46:	2a 81       	ldd	r18, Y+2	; 0x02
    2d48:	3b 81       	ldd	r19, Y+3	; 0x03
    2d4a:	22 30       	cpi	r18, 0x02	; 2
    2d4c:	31 05       	cpc	r19, r1
    2d4e:	81 f0       	breq	.+32     	; 0x2d70 <Button_Init+0x4c>
    2d50:	8a 81       	ldd	r24, Y+2	; 0x02
    2d52:	9b 81       	ldd	r25, Y+3	; 0x03
    2d54:	00 97       	sbiw	r24, 0x00	; 0
    2d56:	89 f4       	brne	.+34     	; 0x2d7a <Button_Init+0x56>
	{
		case BTN0:
			Dio_SetPinDirection(BTN0_PORT, BTN0_PIN, INPUT);
    2d58:	83 e0       	ldi	r24, 0x03	; 3
    2d5a:	62 e0       	ldi	r22, 0x02	; 2
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
    2d62:	0b c0       	rjmp	.+22     	; 0x2d7a <Button_Init+0x56>
			break;
		case BTN1:
			Dio_SetPinDirection(BTN1_PORT, BTN1_PIN, INPUT);
    2d64:	83 e0       	ldi	r24, 0x03	; 3
    2d66:	63 e0       	ldi	r22, 0x03	; 3
    2d68:	40 e0       	ldi	r20, 0x00	; 0
    2d6a:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
    2d6e:	05 c0       	rjmp	.+10     	; 0x2d7a <Button_Init+0x56>
			break;
		case BTN2:
			Dio_SetPinDirection(BTN2_PORT, BTN2_PIN, INPUT);
    2d70:	81 e0       	ldi	r24, 0x01	; 1
    2d72:	62 e0       	ldi	r22, 0x02	; 2
    2d74:	40 e0       	ldi	r20, 0x00	; 0
    2d76:	0e 94 3b 0b 	call	0x1676	; 0x1676 <Dio_SetPinDirection>
			break;
	}
}
    2d7a:	0f 90       	pop	r0
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	cf 91       	pop	r28
    2d82:	df 91       	pop	r29
    2d84:	08 95       	ret

00002d86 <Button_GetState>:

Dio_PinStateType Button_GetState(uint8 btn)
{
    2d86:	df 93       	push	r29
    2d88:	cf 93       	push	r28
    2d8a:	cd b7       	in	r28, 0x3d	; 61
    2d8c:	de b7       	in	r29, 0x3e	; 62
    2d8e:	ae 97       	sbiw	r28, 0x2e	; 46
    2d90:	0f b6       	in	r0, 0x3f	; 63
    2d92:	f8 94       	cli
    2d94:	de bf       	out	0x3e, r29	; 62
    2d96:	0f be       	out	0x3f, r0	; 63
    2d98:	cd bf       	out	0x3d, r28	; 61
    2d9a:	8c a7       	std	Y+44, r24	; 0x2c
	uint8 btnState = RELEASED;
    2d9c:	1b a6       	std	Y+43, r1	; 0x2b
	switch (btn)
    2d9e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2da0:	28 2f       	mov	r18, r24
    2da2:	30 e0       	ldi	r19, 0x00	; 0
    2da4:	3e a7       	std	Y+46, r19	; 0x2e
    2da6:	2d a7       	std	Y+45, r18	; 0x2d
    2da8:	8d a5       	ldd	r24, Y+45	; 0x2d
    2daa:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	91 05       	cpc	r25, r1
    2db0:	09 f4       	brne	.+2      	; 0x2db4 <Button_GetState+0x2e>
    2db2:	94 c0       	rjmp	.+296    	; 0x2edc <Button_GetState+0x156>
    2db4:	2d a5       	ldd	r18, Y+45	; 0x2d
    2db6:	3e a5       	ldd	r19, Y+46	; 0x2e
    2db8:	22 30       	cpi	r18, 0x02	; 2
    2dba:	31 05       	cpc	r19, r1
    2dbc:	09 f4       	brne	.+2      	; 0x2dc0 <Button_GetState+0x3a>
    2dbe:	17 c1       	rjmp	.+558    	; 0x2fee <Button_GetState+0x268>
    2dc0:	8d a5       	ldd	r24, Y+45	; 0x2d
    2dc2:	9e a5       	ldd	r25, Y+46	; 0x2e
    2dc4:	00 97       	sbiw	r24, 0x00	; 0
    2dc6:	09 f0       	breq	.+2      	; 0x2dca <Button_GetState+0x44>
    2dc8:	99 c1       	rjmp	.+818    	; 0x30fc <Button_GetState+0x376>
	{
		case BTN0:
			if (Dio_ReadPin(BTN0_PORT, BTN0_PIN) == PRESSED)
    2dca:	83 e0       	ldi	r24, 0x03	; 3
    2dcc:	62 e0       	ldi	r22, 0x02	; 2
    2dce:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2dd2:	81 30       	cpi	r24, 0x01	; 1
    2dd4:	09 f0       	breq	.+2      	; 0x2dd8 <Button_GetState+0x52>
    2dd6:	92 c1       	rjmp	.+804    	; 0x30fc <Button_GetState+0x376>
    2dd8:	80 e0       	ldi	r24, 0x00	; 0
    2dda:	90 e0       	ldi	r25, 0x00	; 0
    2ddc:	a0 ef       	ldi	r26, 0xF0	; 240
    2dde:	b1 e4       	ldi	r27, 0x41	; 65
    2de0:	8f a3       	std	Y+39, r24	; 0x27
    2de2:	98 a7       	std	Y+40, r25	; 0x28
    2de4:	a9 a7       	std	Y+41, r26	; 0x29
    2de6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2de8:	6f a1       	ldd	r22, Y+39	; 0x27
    2dea:	78 a5       	ldd	r23, Y+40	; 0x28
    2dec:	89 a5       	ldd	r24, Y+41	; 0x29
    2dee:	9a a5       	ldd	r25, Y+42	; 0x2a
    2df0:	20 e0       	ldi	r18, 0x00	; 0
    2df2:	30 e0       	ldi	r19, 0x00	; 0
    2df4:	4a e7       	ldi	r20, 0x7A	; 122
    2df6:	55 e4       	ldi	r21, 0x45	; 69
    2df8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2dfc:	dc 01       	movw	r26, r24
    2dfe:	cb 01       	movw	r24, r22
    2e00:	8b a3       	std	Y+35, r24	; 0x23
    2e02:	9c a3       	std	Y+36, r25	; 0x24
    2e04:	ad a3       	std	Y+37, r26	; 0x25
    2e06:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2e08:	6b a1       	ldd	r22, Y+35	; 0x23
    2e0a:	7c a1       	ldd	r23, Y+36	; 0x24
    2e0c:	8d a1       	ldd	r24, Y+37	; 0x25
    2e0e:	9e a1       	ldd	r25, Y+38	; 0x26
    2e10:	20 e0       	ldi	r18, 0x00	; 0
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	40 e8       	ldi	r20, 0x80	; 128
    2e16:	5f e3       	ldi	r21, 0x3F	; 63
    2e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e1c:	88 23       	and	r24, r24
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <Button_GetState+0xa4>
		__ticks = 1;
    2e20:	81 e0       	ldi	r24, 0x01	; 1
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	9a a3       	std	Y+34, r25	; 0x22
    2e26:	89 a3       	std	Y+33, r24	; 0x21
    2e28:	3f c0       	rjmp	.+126    	; 0x2ea8 <Button_GetState+0x122>
	else if (__tmp > 65535)
    2e2a:	6b a1       	ldd	r22, Y+35	; 0x23
    2e2c:	7c a1       	ldd	r23, Y+36	; 0x24
    2e2e:	8d a1       	ldd	r24, Y+37	; 0x25
    2e30:	9e a1       	ldd	r25, Y+38	; 0x26
    2e32:	20 e0       	ldi	r18, 0x00	; 0
    2e34:	3f ef       	ldi	r19, 0xFF	; 255
    2e36:	4f e7       	ldi	r20, 0x7F	; 127
    2e38:	57 e4       	ldi	r21, 0x47	; 71
    2e3a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e3e:	18 16       	cp	r1, r24
    2e40:	4c f5       	brge	.+82     	; 0x2e94 <Button_GetState+0x10e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e42:	6f a1       	ldd	r22, Y+39	; 0x27
    2e44:	78 a5       	ldd	r23, Y+40	; 0x28
    2e46:	89 a5       	ldd	r24, Y+41	; 0x29
    2e48:	9a a5       	ldd	r25, Y+42	; 0x2a
    2e4a:	20 e0       	ldi	r18, 0x00	; 0
    2e4c:	30 e0       	ldi	r19, 0x00	; 0
    2e4e:	40 e2       	ldi	r20, 0x20	; 32
    2e50:	51 e4       	ldi	r21, 0x41	; 65
    2e52:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e56:	dc 01       	movw	r26, r24
    2e58:	cb 01       	movw	r24, r22
    2e5a:	bc 01       	movw	r22, r24
    2e5c:	cd 01       	movw	r24, r26
    2e5e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e62:	dc 01       	movw	r26, r24
    2e64:	cb 01       	movw	r24, r22
    2e66:	9a a3       	std	Y+34, r25	; 0x22
    2e68:	89 a3       	std	Y+33, r24	; 0x21
    2e6a:	0f c0       	rjmp	.+30     	; 0x2e8a <Button_GetState+0x104>
    2e6c:	80 e9       	ldi	r24, 0x90	; 144
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	98 a3       	std	Y+32, r25	; 0x20
    2e72:	8f 8f       	std	Y+31, r24	; 0x1f
    2e74:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2e76:	98 a1       	ldd	r25, Y+32	; 0x20
    2e78:	01 97       	sbiw	r24, 0x01	; 1
    2e7a:	f1 f7       	brne	.-4      	; 0x2e78 <Button_GetState+0xf2>
    2e7c:	98 a3       	std	Y+32, r25	; 0x20
    2e7e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e80:	89 a1       	ldd	r24, Y+33	; 0x21
    2e82:	9a a1       	ldd	r25, Y+34	; 0x22
    2e84:	01 97       	sbiw	r24, 0x01	; 1
    2e86:	9a a3       	std	Y+34, r25	; 0x22
    2e88:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e8a:	89 a1       	ldd	r24, Y+33	; 0x21
    2e8c:	9a a1       	ldd	r25, Y+34	; 0x22
    2e8e:	00 97       	sbiw	r24, 0x00	; 0
    2e90:	69 f7       	brne	.-38     	; 0x2e6c <Button_GetState+0xe6>
    2e92:	14 c0       	rjmp	.+40     	; 0x2ebc <Button_GetState+0x136>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e94:	6b a1       	ldd	r22, Y+35	; 0x23
    2e96:	7c a1       	ldd	r23, Y+36	; 0x24
    2e98:	8d a1       	ldd	r24, Y+37	; 0x25
    2e9a:	9e a1       	ldd	r25, Y+38	; 0x26
    2e9c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ea0:	dc 01       	movw	r26, r24
    2ea2:	cb 01       	movw	r24, r22
    2ea4:	9a a3       	std	Y+34, r25	; 0x22
    2ea6:	89 a3       	std	Y+33, r24	; 0x21
    2ea8:	89 a1       	ldd	r24, Y+33	; 0x21
    2eaa:	9a a1       	ldd	r25, Y+34	; 0x22
    2eac:	9e 8f       	std	Y+30, r25	; 0x1e
    2eae:	8d 8f       	std	Y+29, r24	; 0x1d
    2eb0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2eb2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2eb4:	01 97       	sbiw	r24, 0x01	; 1
    2eb6:	f1 f7       	brne	.-4      	; 0x2eb4 <Button_GetState+0x12e>
    2eb8:	9e 8f       	std	Y+30, r25	; 0x1e
    2eba:	8d 8f       	std	Y+29, r24	; 0x1d
			{
				_delay_ms(30);
				if (Dio_ReadPin(BTN0_PORT, BTN0_PIN) == PRESSED)
    2ebc:	83 e0       	ldi	r24, 0x03	; 3
    2ebe:	62 e0       	ldi	r22, 0x02	; 2
    2ec0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2ec4:	81 30       	cpi	r24, 0x01	; 1
    2ec6:	09 f0       	breq	.+2      	; 0x2eca <Button_GetState+0x144>
    2ec8:	19 c1       	rjmp	.+562    	; 0x30fc <Button_GetState+0x376>
				{
					btnState = PRESSED;
    2eca:	81 e0       	ldi	r24, 0x01	; 1
    2ecc:	8b a7       	std	Y+43, r24	; 0x2b
					while(Dio_ReadPin(BTN0_PORT, BTN0_PIN) == PRESSED);
    2ece:	83 e0       	ldi	r24, 0x03	; 3
    2ed0:	62 e0       	ldi	r22, 0x02	; 2
    2ed2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2ed6:	81 30       	cpi	r24, 0x01	; 1
    2ed8:	d1 f3       	breq	.-12     	; 0x2ece <Button_GetState+0x148>
    2eda:	10 c1       	rjmp	.+544    	; 0x30fc <Button_GetState+0x376>
				}
			}
			break;
		case BTN1:
			if (Dio_ReadPin(BTN1_PORT, BTN1_PIN) == PRESSED)
    2edc:	83 e0       	ldi	r24, 0x03	; 3
    2ede:	63 e0       	ldi	r22, 0x03	; 3
    2ee0:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2ee4:	81 30       	cpi	r24, 0x01	; 1
    2ee6:	09 f0       	breq	.+2      	; 0x2eea <Button_GetState+0x164>
    2ee8:	09 c1       	rjmp	.+530    	; 0x30fc <Button_GetState+0x376>
    2eea:	80 e0       	ldi	r24, 0x00	; 0
    2eec:	90 e0       	ldi	r25, 0x00	; 0
    2eee:	a0 ef       	ldi	r26, 0xF0	; 240
    2ef0:	b1 e4       	ldi	r27, 0x41	; 65
    2ef2:	89 8f       	std	Y+25, r24	; 0x19
    2ef4:	9a 8f       	std	Y+26, r25	; 0x1a
    2ef6:	ab 8f       	std	Y+27, r26	; 0x1b
    2ef8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2efa:	69 8d       	ldd	r22, Y+25	; 0x19
    2efc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2efe:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f00:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f02:	20 e0       	ldi	r18, 0x00	; 0
    2f04:	30 e0       	ldi	r19, 0x00	; 0
    2f06:	4a e7       	ldi	r20, 0x7A	; 122
    2f08:	55 e4       	ldi	r21, 0x45	; 69
    2f0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f0e:	dc 01       	movw	r26, r24
    2f10:	cb 01       	movw	r24, r22
    2f12:	8d 8b       	std	Y+21, r24	; 0x15
    2f14:	9e 8b       	std	Y+22, r25	; 0x16
    2f16:	af 8b       	std	Y+23, r26	; 0x17
    2f18:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f1a:	6d 89       	ldd	r22, Y+21	; 0x15
    2f1c:	7e 89       	ldd	r23, Y+22	; 0x16
    2f1e:	8f 89       	ldd	r24, Y+23	; 0x17
    2f20:	98 8d       	ldd	r25, Y+24	; 0x18
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	40 e8       	ldi	r20, 0x80	; 128
    2f28:	5f e3       	ldi	r21, 0x3F	; 63
    2f2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f2e:	88 23       	and	r24, r24
    2f30:	2c f4       	brge	.+10     	; 0x2f3c <Button_GetState+0x1b6>
		__ticks = 1;
    2f32:	81 e0       	ldi	r24, 0x01	; 1
    2f34:	90 e0       	ldi	r25, 0x00	; 0
    2f36:	9c 8b       	std	Y+20, r25	; 0x14
    2f38:	8b 8b       	std	Y+19, r24	; 0x13
    2f3a:	3f c0       	rjmp	.+126    	; 0x2fba <Button_GetState+0x234>
	else if (__tmp > 65535)
    2f3c:	6d 89       	ldd	r22, Y+21	; 0x15
    2f3e:	7e 89       	ldd	r23, Y+22	; 0x16
    2f40:	8f 89       	ldd	r24, Y+23	; 0x17
    2f42:	98 8d       	ldd	r25, Y+24	; 0x18
    2f44:	20 e0       	ldi	r18, 0x00	; 0
    2f46:	3f ef       	ldi	r19, 0xFF	; 255
    2f48:	4f e7       	ldi	r20, 0x7F	; 127
    2f4a:	57 e4       	ldi	r21, 0x47	; 71
    2f4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f50:	18 16       	cp	r1, r24
    2f52:	4c f5       	brge	.+82     	; 0x2fa6 <Button_GetState+0x220>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f54:	69 8d       	ldd	r22, Y+25	; 0x19
    2f56:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f58:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f5a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f5c:	20 e0       	ldi	r18, 0x00	; 0
    2f5e:	30 e0       	ldi	r19, 0x00	; 0
    2f60:	40 e2       	ldi	r20, 0x20	; 32
    2f62:	51 e4       	ldi	r21, 0x41	; 65
    2f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f68:	dc 01       	movw	r26, r24
    2f6a:	cb 01       	movw	r24, r22
    2f6c:	bc 01       	movw	r22, r24
    2f6e:	cd 01       	movw	r24, r26
    2f70:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f74:	dc 01       	movw	r26, r24
    2f76:	cb 01       	movw	r24, r22
    2f78:	9c 8b       	std	Y+20, r25	; 0x14
    2f7a:	8b 8b       	std	Y+19, r24	; 0x13
    2f7c:	0f c0       	rjmp	.+30     	; 0x2f9c <Button_GetState+0x216>
    2f7e:	80 e9       	ldi	r24, 0x90	; 144
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    2f82:	9a 8b       	std	Y+18, r25	; 0x12
    2f84:	89 8b       	std	Y+17, r24	; 0x11
    2f86:	89 89       	ldd	r24, Y+17	; 0x11
    2f88:	9a 89       	ldd	r25, Y+18	; 0x12
    2f8a:	01 97       	sbiw	r24, 0x01	; 1
    2f8c:	f1 f7       	brne	.-4      	; 0x2f8a <Button_GetState+0x204>
    2f8e:	9a 8b       	std	Y+18, r25	; 0x12
    2f90:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f92:	8b 89       	ldd	r24, Y+19	; 0x13
    2f94:	9c 89       	ldd	r25, Y+20	; 0x14
    2f96:	01 97       	sbiw	r24, 0x01	; 1
    2f98:	9c 8b       	std	Y+20, r25	; 0x14
    2f9a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f9c:	8b 89       	ldd	r24, Y+19	; 0x13
    2f9e:	9c 89       	ldd	r25, Y+20	; 0x14
    2fa0:	00 97       	sbiw	r24, 0x00	; 0
    2fa2:	69 f7       	brne	.-38     	; 0x2f7e <Button_GetState+0x1f8>
    2fa4:	14 c0       	rjmp	.+40     	; 0x2fce <Button_GetState+0x248>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2fa6:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa8:	7e 89       	ldd	r23, Y+22	; 0x16
    2faa:	8f 89       	ldd	r24, Y+23	; 0x17
    2fac:	98 8d       	ldd	r25, Y+24	; 0x18
    2fae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2fb2:	dc 01       	movw	r26, r24
    2fb4:	cb 01       	movw	r24, r22
    2fb6:	9c 8b       	std	Y+20, r25	; 0x14
    2fb8:	8b 8b       	std	Y+19, r24	; 0x13
    2fba:	8b 89       	ldd	r24, Y+19	; 0x13
    2fbc:	9c 89       	ldd	r25, Y+20	; 0x14
    2fbe:	98 8b       	std	Y+16, r25	; 0x10
    2fc0:	8f 87       	std	Y+15, r24	; 0x0f
    2fc2:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fc4:	98 89       	ldd	r25, Y+16	; 0x10
    2fc6:	01 97       	sbiw	r24, 0x01	; 1
    2fc8:	f1 f7       	brne	.-4      	; 0x2fc6 <Button_GetState+0x240>
    2fca:	98 8b       	std	Y+16, r25	; 0x10
    2fcc:	8f 87       	std	Y+15, r24	; 0x0f
			{
				_delay_ms(30);
				if (Dio_ReadPin(BTN1_PORT, BTN1_PIN) == PRESSED)
    2fce:	83 e0       	ldi	r24, 0x03	; 3
    2fd0:	63 e0       	ldi	r22, 0x03	; 3
    2fd2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2fd6:	81 30       	cpi	r24, 0x01	; 1
    2fd8:	09 f0       	breq	.+2      	; 0x2fdc <Button_GetState+0x256>
    2fda:	90 c0       	rjmp	.+288    	; 0x30fc <Button_GetState+0x376>
				{
					btnState = PRESSED;
    2fdc:	81 e0       	ldi	r24, 0x01	; 1
    2fde:	8b a7       	std	Y+43, r24	; 0x2b
					while(Dio_ReadPin(BTN1_PORT, BTN1_PIN) == PRESSED);
    2fe0:	83 e0       	ldi	r24, 0x03	; 3
    2fe2:	63 e0       	ldi	r22, 0x03	; 3
    2fe4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2fe8:	81 30       	cpi	r24, 0x01	; 1
    2fea:	d1 f3       	breq	.-12     	; 0x2fe0 <Button_GetState+0x25a>
    2fec:	87 c0       	rjmp	.+270    	; 0x30fc <Button_GetState+0x376>
				}
			}
			break;
		case BTN2:
			if (Dio_ReadPin(BTN2_PORT, BTN1_PIN) == PRESSED)
    2fee:	81 e0       	ldi	r24, 0x01	; 1
    2ff0:	63 e0       	ldi	r22, 0x03	; 3
    2ff2:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    2ff6:	81 30       	cpi	r24, 0x01	; 1
    2ff8:	09 f0       	breq	.+2      	; 0x2ffc <Button_GetState+0x276>
    2ffa:	80 c0       	rjmp	.+256    	; 0x30fc <Button_GetState+0x376>
    2ffc:	80 e0       	ldi	r24, 0x00	; 0
    2ffe:	90 e0       	ldi	r25, 0x00	; 0
    3000:	a0 ef       	ldi	r26, 0xF0	; 240
    3002:	b1 e4       	ldi	r27, 0x41	; 65
    3004:	8b 87       	std	Y+11, r24	; 0x0b
    3006:	9c 87       	std	Y+12, r25	; 0x0c
    3008:	ad 87       	std	Y+13, r26	; 0x0d
    300a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    300c:	6b 85       	ldd	r22, Y+11	; 0x0b
    300e:	7c 85       	ldd	r23, Y+12	; 0x0c
    3010:	8d 85       	ldd	r24, Y+13	; 0x0d
    3012:	9e 85       	ldd	r25, Y+14	; 0x0e
    3014:	20 e0       	ldi	r18, 0x00	; 0
    3016:	30 e0       	ldi	r19, 0x00	; 0
    3018:	4a e7       	ldi	r20, 0x7A	; 122
    301a:	55 e4       	ldi	r21, 0x45	; 69
    301c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3020:	dc 01       	movw	r26, r24
    3022:	cb 01       	movw	r24, r22
    3024:	8f 83       	std	Y+7, r24	; 0x07
    3026:	98 87       	std	Y+8, r25	; 0x08
    3028:	a9 87       	std	Y+9, r26	; 0x09
    302a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    302c:	6f 81       	ldd	r22, Y+7	; 0x07
    302e:	78 85       	ldd	r23, Y+8	; 0x08
    3030:	89 85       	ldd	r24, Y+9	; 0x09
    3032:	9a 85       	ldd	r25, Y+10	; 0x0a
    3034:	20 e0       	ldi	r18, 0x00	; 0
    3036:	30 e0       	ldi	r19, 0x00	; 0
    3038:	40 e8       	ldi	r20, 0x80	; 128
    303a:	5f e3       	ldi	r21, 0x3F	; 63
    303c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3040:	88 23       	and	r24, r24
    3042:	2c f4       	brge	.+10     	; 0x304e <Button_GetState+0x2c8>
		__ticks = 1;
    3044:	81 e0       	ldi	r24, 0x01	; 1
    3046:	90 e0       	ldi	r25, 0x00	; 0
    3048:	9e 83       	std	Y+6, r25	; 0x06
    304a:	8d 83       	std	Y+5, r24	; 0x05
    304c:	3f c0       	rjmp	.+126    	; 0x30cc <Button_GetState+0x346>
	else if (__tmp > 65535)
    304e:	6f 81       	ldd	r22, Y+7	; 0x07
    3050:	78 85       	ldd	r23, Y+8	; 0x08
    3052:	89 85       	ldd	r24, Y+9	; 0x09
    3054:	9a 85       	ldd	r25, Y+10	; 0x0a
    3056:	20 e0       	ldi	r18, 0x00	; 0
    3058:	3f ef       	ldi	r19, 0xFF	; 255
    305a:	4f e7       	ldi	r20, 0x7F	; 127
    305c:	57 e4       	ldi	r21, 0x47	; 71
    305e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3062:	18 16       	cp	r1, r24
    3064:	4c f5       	brge	.+82     	; 0x30b8 <Button_GetState+0x332>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3066:	6b 85       	ldd	r22, Y+11	; 0x0b
    3068:	7c 85       	ldd	r23, Y+12	; 0x0c
    306a:	8d 85       	ldd	r24, Y+13	; 0x0d
    306c:	9e 85       	ldd	r25, Y+14	; 0x0e
    306e:	20 e0       	ldi	r18, 0x00	; 0
    3070:	30 e0       	ldi	r19, 0x00	; 0
    3072:	40 e2       	ldi	r20, 0x20	; 32
    3074:	51 e4       	ldi	r21, 0x41	; 65
    3076:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    307a:	dc 01       	movw	r26, r24
    307c:	cb 01       	movw	r24, r22
    307e:	bc 01       	movw	r22, r24
    3080:	cd 01       	movw	r24, r26
    3082:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3086:	dc 01       	movw	r26, r24
    3088:	cb 01       	movw	r24, r22
    308a:	9e 83       	std	Y+6, r25	; 0x06
    308c:	8d 83       	std	Y+5, r24	; 0x05
    308e:	0f c0       	rjmp	.+30     	; 0x30ae <Button_GetState+0x328>
    3090:	80 e9       	ldi	r24, 0x90	; 144
    3092:	91 e0       	ldi	r25, 0x01	; 1
    3094:	9c 83       	std	Y+4, r25	; 0x04
    3096:	8b 83       	std	Y+3, r24	; 0x03
    3098:	8b 81       	ldd	r24, Y+3	; 0x03
    309a:	9c 81       	ldd	r25, Y+4	; 0x04
    309c:	01 97       	sbiw	r24, 0x01	; 1
    309e:	f1 f7       	brne	.-4      	; 0x309c <Button_GetState+0x316>
    30a0:	9c 83       	std	Y+4, r25	; 0x04
    30a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    30a4:	8d 81       	ldd	r24, Y+5	; 0x05
    30a6:	9e 81       	ldd	r25, Y+6	; 0x06
    30a8:	01 97       	sbiw	r24, 0x01	; 1
    30aa:	9e 83       	std	Y+6, r25	; 0x06
    30ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    30ae:	8d 81       	ldd	r24, Y+5	; 0x05
    30b0:	9e 81       	ldd	r25, Y+6	; 0x06
    30b2:	00 97       	sbiw	r24, 0x00	; 0
    30b4:	69 f7       	brne	.-38     	; 0x3090 <Button_GetState+0x30a>
    30b6:	14 c0       	rjmp	.+40     	; 0x30e0 <Button_GetState+0x35a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    30b8:	6f 81       	ldd	r22, Y+7	; 0x07
    30ba:	78 85       	ldd	r23, Y+8	; 0x08
    30bc:	89 85       	ldd	r24, Y+9	; 0x09
    30be:	9a 85       	ldd	r25, Y+10	; 0x0a
    30c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    30c4:	dc 01       	movw	r26, r24
    30c6:	cb 01       	movw	r24, r22
    30c8:	9e 83       	std	Y+6, r25	; 0x06
    30ca:	8d 83       	std	Y+5, r24	; 0x05
    30cc:	8d 81       	ldd	r24, Y+5	; 0x05
    30ce:	9e 81       	ldd	r25, Y+6	; 0x06
    30d0:	9a 83       	std	Y+2, r25	; 0x02
    30d2:	89 83       	std	Y+1, r24	; 0x01
    30d4:	89 81       	ldd	r24, Y+1	; 0x01
    30d6:	9a 81       	ldd	r25, Y+2	; 0x02
    30d8:	01 97       	sbiw	r24, 0x01	; 1
    30da:	f1 f7       	brne	.-4      	; 0x30d8 <Button_GetState+0x352>
    30dc:	9a 83       	std	Y+2, r25	; 0x02
    30de:	89 83       	std	Y+1, r24	; 0x01
			{
				_delay_ms(30);
				if (Dio_ReadPin(BTN2_PORT, BTN1_PIN) == PRESSED)
    30e0:	81 e0       	ldi	r24, 0x01	; 1
    30e2:	63 e0       	ldi	r22, 0x03	; 3
    30e4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    30e8:	81 30       	cpi	r24, 0x01	; 1
    30ea:	41 f4       	brne	.+16     	; 0x30fc <Button_GetState+0x376>
				{
					btnState = PRESSED;
    30ec:	81 e0       	ldi	r24, 0x01	; 1
    30ee:	8b a7       	std	Y+43, r24	; 0x2b
					while(Dio_ReadPin(BTN2_PORT, BTN2_PIN) == PRESSED);
    30f0:	81 e0       	ldi	r24, 0x01	; 1
    30f2:	62 e0       	ldi	r22, 0x02	; 2
    30f4:	0e 94 b5 0d 	call	0x1b6a	; 0x1b6a <Dio_ReadPin>
    30f8:	81 30       	cpi	r24, 0x01	; 1
    30fa:	d1 f3       	breq	.-12     	; 0x30f0 <Button_GetState+0x36a>
				}
			}
			break;
	}
	return btnState;
    30fc:	8b a5       	ldd	r24, Y+43	; 0x2b
}
    30fe:	ae 96       	adiw	r28, 0x2e	; 46
    3100:	0f b6       	in	r0, 0x3f	; 63
    3102:	f8 94       	cli
    3104:	de bf       	out	0x3e, r29	; 62
    3106:	0f be       	out	0x3f, r0	; 63
    3108:	cd bf       	out	0x3d, r28	; 61
    310a:	cf 91       	pop	r28
    310c:	df 91       	pop	r29
    310e:	08 95       	ret

00003110 <Heater_Control_Init>:
static boolean LM_flag = FALSE;
static boolean TempDisplay_Flag = FALSE;
static boolean LED_Blink_Flag = FALSE;

void Heater_Control_Init()
{
    3110:	df 93       	push	r29
    3112:	cf 93       	push	r28
    3114:	cd b7       	in	r28, 0x3d	; 61
    3116:	de b7       	in	r29, 0x3e	; 62
    SevenSeg_Init();
    3118:	0e 94 3a 0f 	call	0x1e74	; 0x1e74 <SevenSeg_Init>
    ADC_Init();
    311c:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <ADC_Init>
    EEPROM_Init();
    3120:	0e 94 91 0a 	call	0x1522	; 0x1522 <EEPROM_Init>
    Peltier_Init();
    3124:	0e 94 32 11 	call	0x2264	; 0x2264 <Peltier_Init>
    Ceramic_Heater_Init();
    3128:	0e 94 63 16 	call	0x2cc6	; 0x2cc6 <Ceramic_Heater_Init>
    Led_Init(LED1);
    312c:	81 e0       	ldi	r24, 0x01	; 1
    312e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <Led_Init>
    GIE_Enable();
    3132:	0e 94 20 09 	call	0x1240	; 0x1240 <GIE_Enable>
    Timer0_Init(NoClkSrc,0,TRUE);
    3136:	80 e0       	ldi	r24, 0x00	; 0
    3138:	60 e0       	ldi	r22, 0x00	; 0
    313a:	41 e0       	ldi	r20, 0x01	; 1
    313c:	0e 94 a3 05 	call	0xb46	; 0xb46 <Timer0_Init>
	Timer0_SetCallBack(Read_WaterTemperature);
    3140:	85 e5       	ldi	r24, 0x55	; 85
    3142:	9a e1       	ldi	r25, 0x1A	; 26
    3144:	0e 94 2c 07 	call	0xe58	; 0xe58 <Timer0_SetCallBack>
    // External interrupt initialization
    Ext_Int_Init(EXT_INT0);
    3148:	80 e0       	ldi	r24, 0x00	; 0
    314a:	0e 94 3c 09 	call	0x1278	; 0x1278 <Ext_Int_Init>
    Ext_Int_Enable(EXT_INT0);
    314e:	80 e0       	ldi	r24, 0x00	; 0
    3150:	0e 94 81 09 	call	0x1302	; 0x1302 <Ext_Int_Enable>
    Ext_Int_SetCallBack(EXT_INT0, UP_BUTTON);
    3154:	2f eb       	ldi	r18, 0xBF	; 191
    3156:	38 e1       	ldi	r19, 0x18	; 24
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	b9 01       	movw	r22, r18
    315c:	0e 94 ef 09 	call	0x13de	; 0x13de <Ext_Int_SetCallBack>

    Ext_Int_Init(EXT_INT1);
    3160:	81 e0       	ldi	r24, 0x01	; 1
    3162:	0e 94 3c 09 	call	0x1278	; 0x1278 <Ext_Int_Init>
    Ext_Int_Enable(EXT_INT1);
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	0e 94 81 09 	call	0x1302	; 0x1302 <Ext_Int_Enable>
    Ext_Int_SetCallBack(EXT_INT1, DOWN_BUTTON);
    316c:	25 e6       	ldi	r18, 0x65	; 101
    316e:	39 e1       	ldi	r19, 0x19	; 25
    3170:	81 e0       	ldi	r24, 0x01	; 1
    3172:	b9 01       	movw	r22, r18
    3174:	0e 94 ef 09 	call	0x13de	; 0x13de <Ext_Int_SetCallBack>
}
    3178:	cf 91       	pop	r28
    317a:	df 91       	pop	r29
    317c:	08 95       	ret

0000317e <UP_BUTTON>:

void UP_BUTTON(void)
{
    317e:	df 93       	push	r29
    3180:	cf 93       	push	r28
    3182:	cd b7       	in	r28, 0x3d	; 61
    3184:	de b7       	in	r29, 0x3e	; 62
    3186:	2e 97       	sbiw	r28, 0x0e	; 14
    3188:	0f b6       	in	r0, 0x3f	; 63
    318a:	f8 94       	cli
    318c:	de bf       	out	0x3e, r29	; 62
    318e:	0f be       	out	0x3f, r0	; 63
    3190:	cd bf       	out	0x3d, r28	; 61
	BUTTON_flag = TRUE;
    3192:	81 e0       	ldi	r24, 0x01	; 1
    3194:	80 93 76 00 	sts	0x0076, r24
	LM_flag = FALSE;
    3198:	10 92 77 00 	sts	0x0077, r1
	setTemperature += Temp_Step;
    319c:	80 91 68 00 	lds	r24, 0x0068
    31a0:	8b 5f       	subi	r24, 0xFB	; 251
    31a2:	80 93 68 00 	sts	0x0068, r24
	if (setTemperature > Temp_Max) {
    31a6:	80 91 68 00 	lds	r24, 0x0068
    31aa:	8c 34       	cpi	r24, 0x4C	; 76
    31ac:	18 f0       	brcs	.+6      	; 0x31b4 <UP_BUTTON+0x36>
		setTemperature = Temp_Max;
    31ae:	8b e4       	ldi	r24, 0x4B	; 75
    31b0:	80 93 68 00 	sts	0x0068, r24
	}
	SevenSeg(setTemperature);
    31b4:	80 91 68 00 	lds	r24, 0x0068
    31b8:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SevenSeg>
	EEPROM_WriteByte(0 ,setTemperature );
    31bc:	20 91 68 00 	lds	r18, 0x0068
    31c0:	80 e0       	ldi	r24, 0x00	; 0
    31c2:	90 e0       	ldi	r25, 0x00	; 0
    31c4:	62 2f       	mov	r22, r18
    31c6:	0e 94 9a 0a 	call	0x1534	; 0x1534 <EEPROM_WriteByte>
    31ca:	80 e0       	ldi	r24, 0x00	; 0
    31cc:	90 e0       	ldi	r25, 0x00	; 0
    31ce:	a8 ec       	ldi	r26, 0xC8	; 200
    31d0:	b2 e4       	ldi	r27, 0x42	; 66
    31d2:	8b 87       	std	Y+11, r24	; 0x0b
    31d4:	9c 87       	std	Y+12, r25	; 0x0c
    31d6:	ad 87       	std	Y+13, r26	; 0x0d
    31d8:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31da:	6b 85       	ldd	r22, Y+11	; 0x0b
    31dc:	7c 85       	ldd	r23, Y+12	; 0x0c
    31de:	8d 85       	ldd	r24, Y+13	; 0x0d
    31e0:	9e 85       	ldd	r25, Y+14	; 0x0e
    31e2:	20 e0       	ldi	r18, 0x00	; 0
    31e4:	30 e0       	ldi	r19, 0x00	; 0
    31e6:	4a e7       	ldi	r20, 0x7A	; 122
    31e8:	55 e4       	ldi	r21, 0x45	; 69
    31ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31ee:	dc 01       	movw	r26, r24
    31f0:	cb 01       	movw	r24, r22
    31f2:	8f 83       	std	Y+7, r24	; 0x07
    31f4:	98 87       	std	Y+8, r25	; 0x08
    31f6:	a9 87       	std	Y+9, r26	; 0x09
    31f8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    31fa:	6f 81       	ldd	r22, Y+7	; 0x07
    31fc:	78 85       	ldd	r23, Y+8	; 0x08
    31fe:	89 85       	ldd	r24, Y+9	; 0x09
    3200:	9a 85       	ldd	r25, Y+10	; 0x0a
    3202:	20 e0       	ldi	r18, 0x00	; 0
    3204:	30 e0       	ldi	r19, 0x00	; 0
    3206:	40 e8       	ldi	r20, 0x80	; 128
    3208:	5f e3       	ldi	r21, 0x3F	; 63
    320a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    320e:	88 23       	and	r24, r24
    3210:	2c f4       	brge	.+10     	; 0x321c <UP_BUTTON+0x9e>
		__ticks = 1;
    3212:	81 e0       	ldi	r24, 0x01	; 1
    3214:	90 e0       	ldi	r25, 0x00	; 0
    3216:	9e 83       	std	Y+6, r25	; 0x06
    3218:	8d 83       	std	Y+5, r24	; 0x05
    321a:	3f c0       	rjmp	.+126    	; 0x329a <UP_BUTTON+0x11c>
	else if (__tmp > 65535)
    321c:	6f 81       	ldd	r22, Y+7	; 0x07
    321e:	78 85       	ldd	r23, Y+8	; 0x08
    3220:	89 85       	ldd	r24, Y+9	; 0x09
    3222:	9a 85       	ldd	r25, Y+10	; 0x0a
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	3f ef       	ldi	r19, 0xFF	; 255
    3228:	4f e7       	ldi	r20, 0x7F	; 127
    322a:	57 e4       	ldi	r21, 0x47	; 71
    322c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3230:	18 16       	cp	r1, r24
    3232:	4c f5       	brge	.+82     	; 0x3286 <UP_BUTTON+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3234:	6b 85       	ldd	r22, Y+11	; 0x0b
    3236:	7c 85       	ldd	r23, Y+12	; 0x0c
    3238:	8d 85       	ldd	r24, Y+13	; 0x0d
    323a:	9e 85       	ldd	r25, Y+14	; 0x0e
    323c:	20 e0       	ldi	r18, 0x00	; 0
    323e:	30 e0       	ldi	r19, 0x00	; 0
    3240:	40 e2       	ldi	r20, 0x20	; 32
    3242:	51 e4       	ldi	r21, 0x41	; 65
    3244:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3248:	dc 01       	movw	r26, r24
    324a:	cb 01       	movw	r24, r22
    324c:	bc 01       	movw	r22, r24
    324e:	cd 01       	movw	r24, r26
    3250:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3254:	dc 01       	movw	r26, r24
    3256:	cb 01       	movw	r24, r22
    3258:	9e 83       	std	Y+6, r25	; 0x06
    325a:	8d 83       	std	Y+5, r24	; 0x05
    325c:	0f c0       	rjmp	.+30     	; 0x327c <UP_BUTTON+0xfe>
    325e:	80 e9       	ldi	r24, 0x90	; 144
    3260:	91 e0       	ldi	r25, 0x01	; 1
    3262:	9c 83       	std	Y+4, r25	; 0x04
    3264:	8b 83       	std	Y+3, r24	; 0x03
    3266:	8b 81       	ldd	r24, Y+3	; 0x03
    3268:	9c 81       	ldd	r25, Y+4	; 0x04
    326a:	01 97       	sbiw	r24, 0x01	; 1
    326c:	f1 f7       	brne	.-4      	; 0x326a <UP_BUTTON+0xec>
    326e:	9c 83       	std	Y+4, r25	; 0x04
    3270:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3272:	8d 81       	ldd	r24, Y+5	; 0x05
    3274:	9e 81       	ldd	r25, Y+6	; 0x06
    3276:	01 97       	sbiw	r24, 0x01	; 1
    3278:	9e 83       	std	Y+6, r25	; 0x06
    327a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    327c:	8d 81       	ldd	r24, Y+5	; 0x05
    327e:	9e 81       	ldd	r25, Y+6	; 0x06
    3280:	00 97       	sbiw	r24, 0x00	; 0
    3282:	69 f7       	brne	.-38     	; 0x325e <UP_BUTTON+0xe0>
    3284:	14 c0       	rjmp	.+40     	; 0x32ae <UP_BUTTON+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3286:	6f 81       	ldd	r22, Y+7	; 0x07
    3288:	78 85       	ldd	r23, Y+8	; 0x08
    328a:	89 85       	ldd	r24, Y+9	; 0x09
    328c:	9a 85       	ldd	r25, Y+10	; 0x0a
    328e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3292:	dc 01       	movw	r26, r24
    3294:	cb 01       	movw	r24, r22
    3296:	9e 83       	std	Y+6, r25	; 0x06
    3298:	8d 83       	std	Y+5, r24	; 0x05
    329a:	8d 81       	ldd	r24, Y+5	; 0x05
    329c:	9e 81       	ldd	r25, Y+6	; 0x06
    329e:	9a 83       	std	Y+2, r25	; 0x02
    32a0:	89 83       	std	Y+1, r24	; 0x01
    32a2:	89 81       	ldd	r24, Y+1	; 0x01
    32a4:	9a 81       	ldd	r25, Y+2	; 0x02
    32a6:	01 97       	sbiw	r24, 0x01	; 1
    32a8:	f1 f7       	brne	.-4      	; 0x32a6 <UP_BUTTON+0x128>
    32aa:	9a 83       	std	Y+2, r25	; 0x02
    32ac:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	BUTTON_flag = FALSE;
    32ae:	10 92 76 00 	sts	0x0076, r1
	LM_flag = TRUE;
    32b2:	81 e0       	ldi	r24, 0x01	; 1
    32b4:	80 93 77 00 	sts	0x0077, r24

}
    32b8:	2e 96       	adiw	r28, 0x0e	; 14
    32ba:	0f b6       	in	r0, 0x3f	; 63
    32bc:	f8 94       	cli
    32be:	de bf       	out	0x3e, r29	; 62
    32c0:	0f be       	out	0x3f, r0	; 63
    32c2:	cd bf       	out	0x3d, r28	; 61
    32c4:	cf 91       	pop	r28
    32c6:	df 91       	pop	r29
    32c8:	08 95       	ret

000032ca <DOWN_BUTTON>:

void DOWN_BUTTON(void)
{
    32ca:	df 93       	push	r29
    32cc:	cf 93       	push	r28
    32ce:	cd b7       	in	r28, 0x3d	; 61
    32d0:	de b7       	in	r29, 0x3e	; 62
    32d2:	2e 97       	sbiw	r28, 0x0e	; 14
    32d4:	0f b6       	in	r0, 0x3f	; 63
    32d6:	f8 94       	cli
    32d8:	de bf       	out	0x3e, r29	; 62
    32da:	0f be       	out	0x3f, r0	; 63
    32dc:	cd bf       	out	0x3d, r28	; 61
	BUTTON_flag = TRUE;
    32de:	81 e0       	ldi	r24, 0x01	; 1
    32e0:	80 93 76 00 	sts	0x0076, r24
	LM_flag = FALSE;
    32e4:	10 92 77 00 	sts	0x0077, r1
	setTemperature -= Temp_Step;
    32e8:	80 91 68 00 	lds	r24, 0x0068
    32ec:	85 50       	subi	r24, 0x05	; 5
    32ee:	80 93 68 00 	sts	0x0068, r24
	if (setTemperature < Temp_Min) {
    32f2:	80 91 68 00 	lds	r24, 0x0068
    32f6:	83 32       	cpi	r24, 0x23	; 35
    32f8:	18 f4       	brcc	.+6      	; 0x3300 <DOWN_BUTTON+0x36>
		setTemperature = Temp_Min;
    32fa:	83 e2       	ldi	r24, 0x23	; 35
    32fc:	80 93 68 00 	sts	0x0068, r24
	}
	SevenSeg(setTemperature);
    3300:	80 91 68 00 	lds	r24, 0x0068
    3304:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SevenSeg>
	EEPROM_WriteByte(0 ,setTemperature );
    3308:	20 91 68 00 	lds	r18, 0x0068
    330c:	80 e0       	ldi	r24, 0x00	; 0
    330e:	90 e0       	ldi	r25, 0x00	; 0
    3310:	62 2f       	mov	r22, r18
    3312:	0e 94 9a 0a 	call	0x1534	; 0x1534 <EEPROM_WriteByte>
    3316:	80 e0       	ldi	r24, 0x00	; 0
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	a8 ec       	ldi	r26, 0xC8	; 200
    331c:	b2 e4       	ldi	r27, 0x42	; 66
    331e:	8b 87       	std	Y+11, r24	; 0x0b
    3320:	9c 87       	std	Y+12, r25	; 0x0c
    3322:	ad 87       	std	Y+13, r26	; 0x0d
    3324:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3326:	6b 85       	ldd	r22, Y+11	; 0x0b
    3328:	7c 85       	ldd	r23, Y+12	; 0x0c
    332a:	8d 85       	ldd	r24, Y+13	; 0x0d
    332c:	9e 85       	ldd	r25, Y+14	; 0x0e
    332e:	20 e0       	ldi	r18, 0x00	; 0
    3330:	30 e0       	ldi	r19, 0x00	; 0
    3332:	4a e7       	ldi	r20, 0x7A	; 122
    3334:	55 e4       	ldi	r21, 0x45	; 69
    3336:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    333a:	dc 01       	movw	r26, r24
    333c:	cb 01       	movw	r24, r22
    333e:	8f 83       	std	Y+7, r24	; 0x07
    3340:	98 87       	std	Y+8, r25	; 0x08
    3342:	a9 87       	std	Y+9, r26	; 0x09
    3344:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3346:	6f 81       	ldd	r22, Y+7	; 0x07
    3348:	78 85       	ldd	r23, Y+8	; 0x08
    334a:	89 85       	ldd	r24, Y+9	; 0x09
    334c:	9a 85       	ldd	r25, Y+10	; 0x0a
    334e:	20 e0       	ldi	r18, 0x00	; 0
    3350:	30 e0       	ldi	r19, 0x00	; 0
    3352:	40 e8       	ldi	r20, 0x80	; 128
    3354:	5f e3       	ldi	r21, 0x3F	; 63
    3356:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    335a:	88 23       	and	r24, r24
    335c:	2c f4       	brge	.+10     	; 0x3368 <DOWN_BUTTON+0x9e>
		__ticks = 1;
    335e:	81 e0       	ldi	r24, 0x01	; 1
    3360:	90 e0       	ldi	r25, 0x00	; 0
    3362:	9e 83       	std	Y+6, r25	; 0x06
    3364:	8d 83       	std	Y+5, r24	; 0x05
    3366:	3f c0       	rjmp	.+126    	; 0x33e6 <DOWN_BUTTON+0x11c>
	else if (__tmp > 65535)
    3368:	6f 81       	ldd	r22, Y+7	; 0x07
    336a:	78 85       	ldd	r23, Y+8	; 0x08
    336c:	89 85       	ldd	r24, Y+9	; 0x09
    336e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3370:	20 e0       	ldi	r18, 0x00	; 0
    3372:	3f ef       	ldi	r19, 0xFF	; 255
    3374:	4f e7       	ldi	r20, 0x7F	; 127
    3376:	57 e4       	ldi	r21, 0x47	; 71
    3378:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    337c:	18 16       	cp	r1, r24
    337e:	4c f5       	brge	.+82     	; 0x33d2 <DOWN_BUTTON+0x108>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3380:	6b 85       	ldd	r22, Y+11	; 0x0b
    3382:	7c 85       	ldd	r23, Y+12	; 0x0c
    3384:	8d 85       	ldd	r24, Y+13	; 0x0d
    3386:	9e 85       	ldd	r25, Y+14	; 0x0e
    3388:	20 e0       	ldi	r18, 0x00	; 0
    338a:	30 e0       	ldi	r19, 0x00	; 0
    338c:	40 e2       	ldi	r20, 0x20	; 32
    338e:	51 e4       	ldi	r21, 0x41	; 65
    3390:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3394:	dc 01       	movw	r26, r24
    3396:	cb 01       	movw	r24, r22
    3398:	bc 01       	movw	r22, r24
    339a:	cd 01       	movw	r24, r26
    339c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33a0:	dc 01       	movw	r26, r24
    33a2:	cb 01       	movw	r24, r22
    33a4:	9e 83       	std	Y+6, r25	; 0x06
    33a6:	8d 83       	std	Y+5, r24	; 0x05
    33a8:	0f c0       	rjmp	.+30     	; 0x33c8 <DOWN_BUTTON+0xfe>
    33aa:	80 e9       	ldi	r24, 0x90	; 144
    33ac:	91 e0       	ldi	r25, 0x01	; 1
    33ae:	9c 83       	std	Y+4, r25	; 0x04
    33b0:	8b 83       	std	Y+3, r24	; 0x03
    33b2:	8b 81       	ldd	r24, Y+3	; 0x03
    33b4:	9c 81       	ldd	r25, Y+4	; 0x04
    33b6:	01 97       	sbiw	r24, 0x01	; 1
    33b8:	f1 f7       	brne	.-4      	; 0x33b6 <DOWN_BUTTON+0xec>
    33ba:	9c 83       	std	Y+4, r25	; 0x04
    33bc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    33be:	8d 81       	ldd	r24, Y+5	; 0x05
    33c0:	9e 81       	ldd	r25, Y+6	; 0x06
    33c2:	01 97       	sbiw	r24, 0x01	; 1
    33c4:	9e 83       	std	Y+6, r25	; 0x06
    33c6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    33c8:	8d 81       	ldd	r24, Y+5	; 0x05
    33ca:	9e 81       	ldd	r25, Y+6	; 0x06
    33cc:	00 97       	sbiw	r24, 0x00	; 0
    33ce:	69 f7       	brne	.-38     	; 0x33aa <DOWN_BUTTON+0xe0>
    33d0:	14 c0       	rjmp	.+40     	; 0x33fa <DOWN_BUTTON+0x130>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    33d2:	6f 81       	ldd	r22, Y+7	; 0x07
    33d4:	78 85       	ldd	r23, Y+8	; 0x08
    33d6:	89 85       	ldd	r24, Y+9	; 0x09
    33d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    33da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    33de:	dc 01       	movw	r26, r24
    33e0:	cb 01       	movw	r24, r22
    33e2:	9e 83       	std	Y+6, r25	; 0x06
    33e4:	8d 83       	std	Y+5, r24	; 0x05
    33e6:	8d 81       	ldd	r24, Y+5	; 0x05
    33e8:	9e 81       	ldd	r25, Y+6	; 0x06
    33ea:	9a 83       	std	Y+2, r25	; 0x02
    33ec:	89 83       	std	Y+1, r24	; 0x01
    33ee:	89 81       	ldd	r24, Y+1	; 0x01
    33f0:	9a 81       	ldd	r25, Y+2	; 0x02
    33f2:	01 97       	sbiw	r24, 0x01	; 1
    33f4:	f1 f7       	brne	.-4      	; 0x33f2 <DOWN_BUTTON+0x128>
    33f6:	9a 83       	std	Y+2, r25	; 0x02
    33f8:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);
	BUTTON_flag = FALSE;
    33fa:	10 92 76 00 	sts	0x0076, r1
	LM_flag = TRUE;
    33fe:	81 e0       	ldi	r24, 0x01	; 1
    3400:	80 93 77 00 	sts	0x0077, r24

}
    3404:	2e 96       	adiw	r28, 0x0e	; 14
    3406:	0f b6       	in	r0, 0x3f	; 63
    3408:	f8 94       	cli
    340a:	de bf       	out	0x3e, r29	; 62
    340c:	0f be       	out	0x3f, r0	; 63
    340e:	cd bf       	out	0x3d, r28	; 61
    3410:	cf 91       	pop	r28
    3412:	df 91       	pop	r29
    3414:	08 95       	ret

00003416 <Temp_Sensing>:


void Temp_Sensing(void)
{
    3416:	df 93       	push	r29
    3418:	cf 93       	push	r28
    341a:	cd b7       	in	r28, 0x3d	; 61
    341c:	de b7       	in	r29, 0x3e	; 62
    LM35_Read();
    341e:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LM35_Read>
}
    3422:	cf 91       	pop	r28
    3424:	df 91       	pop	r29
    3426:	08 95       	ret

00003428 <Heating_Cooling_Control>:

void Heating_Cooling_Control(void)
{
    3428:	df 93       	push	r29
    342a:	cf 93       	push	r28
    342c:	cd b7       	in	r28, 0x3d	; 61
    342e:	de b7       	in	r29, 0x3e	; 62
	TempDisplay_Flag = TRUE;
    3430:	81 e0       	ldi	r24, 0x01	; 1
    3432:	80 93 78 00 	sts	0x0078, r24
	currentTemperature = LM35_Read();
    3436:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LM35_Read>
    343a:	80 93 7b 00 	sts	0x007B, r24
	// Timer2_Stop();
	Timer0_Start(No_Prescaler);
    343e:	81 e0       	ldi	r24, 0x01	; 1
    3440:	0e 94 dc 05 	call	0xbb8	; 0xbb8 <Timer0_Start>
	if (currentTemperature < setTemperature) {
    3444:	90 91 7b 00 	lds	r25, 0x007B
    3448:	80 91 68 00 	lds	r24, 0x0068
    344c:	98 17       	cp	r25, r24
    344e:	68 f4       	brcc	.+26     	; 0x346a <Heating_Cooling_Control+0x42>
		Ceramic_Heater_SetMode(HEATER_ON_MODE);
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <Ceramic_Heater_SetMode>
		Peltier_SetMode(PELTIER_OFF_MODE);
    3456:	80 e0       	ldi	r24, 0x00	; 0
    3458:	0e 94 41 11 	call	0x2282	; 0x2282 <Peltier_SetMode>
		Led_Toggle(LED1);
    345c:	81 e0       	ldi	r24, 0x01	; 1
    345e:	0e 94 f4 11 	call	0x23e8	; 0x23e8 <Led_Toggle>
		LED_Blink_Flag = TRUE;
    3462:	81 e0       	ldi	r24, 0x01	; 1
    3464:	80 93 79 00 	sts	0x0079, r24
    3468:	1d c0       	rjmp	.+58     	; 0x34a4 <Heating_Cooling_Control+0x7c>

	} else if (currentTemperature > setTemperature) {
    346a:	90 91 7b 00 	lds	r25, 0x007B
    346e:	80 91 68 00 	lds	r24, 0x0068
    3472:	89 17       	cp	r24, r25
    3474:	60 f4       	brcc	.+24     	; 0x348e <Heating_Cooling_Control+0x66>
		Ceramic_Heater_SetMode(HEATER_OFF_MODE);
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <Ceramic_Heater_SetMode>
		Peltier_SetMode(PELTIER_ON_MODE);
    347c:	81 e0       	ldi	r24, 0x01	; 1
    347e:	0e 94 41 11 	call	0x2282	; 0x2282 <Peltier_SetMode>
		Led_On(LED1);
    3482:	81 e0       	ldi	r24, 0x01	; 1
    3484:	0e 94 92 11 	call	0x2324	; 0x2324 <Led_On>
		LED_Blink_Flag = FALSE;
    3488:	10 92 79 00 	sts	0x0079, r1
    348c:	0b c0       	rjmp	.+22     	; 0x34a4 <Heating_Cooling_Control+0x7c>
	} else {
		Ceramic_Heater_SetMode(HEATER_OFF_MODE);
    348e:	80 e0       	ldi	r24, 0x00	; 0
    3490:	0e 94 72 16 	call	0x2ce4	; 0x2ce4 <Ceramic_Heater_SetMode>
		Peltier_SetMode(PELTIER_OFF_MODE);
    3494:	80 e0       	ldi	r24, 0x00	; 0
    3496:	0e 94 41 11 	call	0x2282	; 0x2282 <Peltier_SetMode>
		Led_Off(LED1);
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	0e 94 c3 11 	call	0x2386	; 0x2386 <Led_Off>
		LED_Blink_Flag = FALSE;
    34a0:	10 92 79 00 	sts	0x0079, r1
	}

}
    34a4:	cf 91       	pop	r28
    34a6:	df 91       	pop	r29
    34a8:	08 95       	ret

000034aa <Read_WaterTemperature>:


void Read_WaterTemperature(void)
{
    34aa:	df 93       	push	r29
    34ac:	cf 93       	push	r28
    34ae:	cd b7       	in	r28, 0x3d	; 61
    34b0:	de b7       	in	r29, 0x3e	; 62
	static uint8 prevTemp = 0;

	/* Check to display temperature to avoid many writings and blinkings on SSD */
	if( (currentTemperature != prevTemp && LM_flag == TRUE) || TempDisplay_Flag == TRUE)
    34b2:	90 91 7b 00 	lds	r25, 0x007B
    34b6:	80 91 7a 00 	lds	r24, 0x007A
    34ba:	98 17       	cp	r25, r24
    34bc:	21 f0       	breq	.+8      	; 0x34c6 <Read_WaterTemperature+0x1c>
    34be:	80 91 77 00 	lds	r24, 0x0077
    34c2:	81 30       	cpi	r24, 0x01	; 1
    34c4:	21 f0       	breq	.+8      	; 0x34ce <Read_WaterTemperature+0x24>
    34c6:	80 91 78 00 	lds	r24, 0x0078
    34ca:	81 30       	cpi	r24, 0x01	; 1
    34cc:	31 f4       	brne	.+12     	; 0x34da <Read_WaterTemperature+0x30>
	{
		/* SSD Display */
		SevenSeg(LM35_Read());
    34ce:	0e 94 3d 16 	call	0x2c7a	; 0x2c7a <LM35_Read>
    34d2:	0e 94 c2 0f 	call	0x1f84	; 0x1f84 <SevenSeg>

		TempDisplay_Flag = FALSE;
    34d6:	10 92 78 00 	sts	0x0078, r1
	}
	prevTemp = currentTemperature;
    34da:	80 91 7b 00 	lds	r24, 0x007B
    34de:	80 93 7a 00 	sts	0x007A, r24
}
    34e2:	cf 91       	pop	r28
    34e4:	df 91       	pop	r29
    34e6:	08 95       	ret

000034e8 <main>:
 */

#include "Heater_Control_Interface.h"

int main(void)
{
    34e8:	df 93       	push	r29
    34ea:	cf 93       	push	r28
    34ec:	cd b7       	in	r28, 0x3d	; 61
    34ee:	de b7       	in	r29, 0x3e	; 62
	Heater_Control_Init();
    34f0:	0e 94 88 18 	call	0x3110	; 0x3110 <Heater_Control_Init>


    while (1)
    {
    	Temp_Sensing();
    34f4:	0e 94 0b 1a 	call	0x3416	; 0x3416 <Temp_Sensing>
    	Heating_Cooling_Control();
    34f8:	0e 94 14 1a 	call	0x3428	; 0x3428 <Heating_Cooling_Control>
    34fc:	fb cf       	rjmp	.-10     	; 0x34f4 <main+0xc>

000034fe <__udivmodqi4>:
    34fe:	99 1b       	sub	r25, r25
    3500:	79 e0       	ldi	r23, 0x09	; 9
    3502:	04 c0       	rjmp	.+8      	; 0x350c <__udivmodqi4_ep>

00003504 <__udivmodqi4_loop>:
    3504:	99 1f       	adc	r25, r25
    3506:	96 17       	cp	r25, r22
    3508:	08 f0       	brcs	.+2      	; 0x350c <__udivmodqi4_ep>
    350a:	96 1b       	sub	r25, r22

0000350c <__udivmodqi4_ep>:
    350c:	88 1f       	adc	r24, r24
    350e:	7a 95       	dec	r23
    3510:	c9 f7       	brne	.-14     	; 0x3504 <__udivmodqi4_loop>
    3512:	80 95       	com	r24
    3514:	08 95       	ret

00003516 <__prologue_saves__>:
    3516:	2f 92       	push	r2
    3518:	3f 92       	push	r3
    351a:	4f 92       	push	r4
    351c:	5f 92       	push	r5
    351e:	6f 92       	push	r6
    3520:	7f 92       	push	r7
    3522:	8f 92       	push	r8
    3524:	9f 92       	push	r9
    3526:	af 92       	push	r10
    3528:	bf 92       	push	r11
    352a:	cf 92       	push	r12
    352c:	df 92       	push	r13
    352e:	ef 92       	push	r14
    3530:	ff 92       	push	r15
    3532:	0f 93       	push	r16
    3534:	1f 93       	push	r17
    3536:	cf 93       	push	r28
    3538:	df 93       	push	r29
    353a:	cd b7       	in	r28, 0x3d	; 61
    353c:	de b7       	in	r29, 0x3e	; 62
    353e:	ca 1b       	sub	r28, r26
    3540:	db 0b       	sbc	r29, r27
    3542:	0f b6       	in	r0, 0x3f	; 63
    3544:	f8 94       	cli
    3546:	de bf       	out	0x3e, r29	; 62
    3548:	0f be       	out	0x3f, r0	; 63
    354a:	cd bf       	out	0x3d, r28	; 61
    354c:	09 94       	ijmp

0000354e <__epilogue_restores__>:
    354e:	2a 88       	ldd	r2, Y+18	; 0x12
    3550:	39 88       	ldd	r3, Y+17	; 0x11
    3552:	48 88       	ldd	r4, Y+16	; 0x10
    3554:	5f 84       	ldd	r5, Y+15	; 0x0f
    3556:	6e 84       	ldd	r6, Y+14	; 0x0e
    3558:	7d 84       	ldd	r7, Y+13	; 0x0d
    355a:	8c 84       	ldd	r8, Y+12	; 0x0c
    355c:	9b 84       	ldd	r9, Y+11	; 0x0b
    355e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3560:	b9 84       	ldd	r11, Y+9	; 0x09
    3562:	c8 84       	ldd	r12, Y+8	; 0x08
    3564:	df 80       	ldd	r13, Y+7	; 0x07
    3566:	ee 80       	ldd	r14, Y+6	; 0x06
    3568:	fd 80       	ldd	r15, Y+5	; 0x05
    356a:	0c 81       	ldd	r16, Y+4	; 0x04
    356c:	1b 81       	ldd	r17, Y+3	; 0x03
    356e:	aa 81       	ldd	r26, Y+2	; 0x02
    3570:	b9 81       	ldd	r27, Y+1	; 0x01
    3572:	ce 0f       	add	r28, r30
    3574:	d1 1d       	adc	r29, r1
    3576:	0f b6       	in	r0, 0x3f	; 63
    3578:	f8 94       	cli
    357a:	de bf       	out	0x3e, r29	; 62
    357c:	0f be       	out	0x3f, r0	; 63
    357e:	cd bf       	out	0x3d, r28	; 61
    3580:	ed 01       	movw	r28, r26
    3582:	08 95       	ret

00003584 <_exit>:
    3584:	f8 94       	cli

00003586 <__stop_program>:
    3586:	ff cf       	rjmp	.-2      	; 0x3586 <__stop_program>
